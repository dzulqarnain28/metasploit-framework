# -*- coding: binary -*-

module Msf
  class Exploit
    class Remote
      module Kerberos
        module Client
          # Methods for processing TGS responses.
          module TgsResponse
            # Extracts the Kerberos credentials, building a MIT Cache Credential,
            # from a Kerberos TGS response.
            #
            # @param res [Rex::Proto::Kerberos::Model::KdcResponse]
            # @param key [String]
            # @return [Rex::Proto::Kerberos::CredentialCache::Cache]
            # @see Rex::Proto::Kerberos::Model::EncKdcResponse
            # @see Rex::Proto::Kerberos::Model::EncKdcResponse.decode
            # @see Msf::Kerberos::Client::CacheCredential
            # @see Rex::Proto::Kerberos::CredentialCache::Krb5Ccache
            def extract_kerb_creds(res, key)
              decrypt_res = res.enc_part.decrypt_asn1(key, Rex::Proto::Kerberos::Crypto::KeyUsage::TGS_REP_ENCPART_AUTHENTICATOR_SUB_KEY)
              enc_res = Rex::Proto::Kerberos::Model::EncKdcResponse.decode(decrypt_res)

              cache = Rex::Proto::Kerberos::CredentialCache::Krb5Ccache.new(
                default_principal: {
                  name_type: res.cname.name_type, # NT_PRINCIPAL
                  realm: res.crealm,
                  components: res.cname.name_string
                },
                credentials: [
                  {
                    client: {
                      name_type: res.cname.name_type,
                      realm: res.crealm,
                      components: res.cname.name_string
                    },
                    server: {
                      name_type: enc_res.sname.name_type,
                      realm: enc_res.srealm,
                      components: enc_res.sname.name_string
                    },
                    keyblock: {
                      enctype: enc_res.key.type,
                      data: enc_res.key.value
                    },
                    authtime: enc_res.auth_time,
                    starttime: enc_res.start_time,
                    endtime: enc_res.end_time,
                    renew_till: enc_res.renew_till,
                    ticket_flags: enc_res.flags.to_i,
                    ticket: res.ticket.encode
                  }
                ]
              )

              cache
            end
          end
        end
      end
    end
  end
end
