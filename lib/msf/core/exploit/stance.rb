module Msf::Exploit::Stance
  # @method aggressive?
  #   Whether the module tries to trigger the vulnerability without waiting.
  #
  #   @return [true] if {#stance} is `Metasploit::Model::Module::Stance::AGGRESSIVE`.
  #   @return [false] otherwise.
  #
  # @method passive?
  #   Whether this module waits for interaction to trigger the vulnerability.
  #
  #   @return [true] if {#stance} is `Metasploit::Model::Module::Stance::PASSIVE`.
  #   @return [false] otherwise.

  # @!method aggressive?
  #   Whether {#stance} is `'aggressive'`.
  #
  #   @return [true] if {#stance} is `'aggressive'`
  #   @return [false] otherwise
  #
  # @!method passive?
  #   Whether {#stance} is `'passive'`.
  #
  #   @return [true] if {#stance} is `'passive'`
  #   @return [false] otherwise
  delegate :aggressive?,
           :passive?,
           to: :stance

  # Whether this module actively tries to trigger the exploit (`Metasploit::Model::Module::Stance::AGGRESSIVE`) or waits
  # for client (or other) interaction before trying to trigger the exploit
  # (`Metasploit::Model::Module::Stance::PASSIVE`).
  #
  # @return [ActiveSupport::StringInquirer] an element of `Metasploit::Model::Module::Stance::ALL`.
  def stance
    unless instance_variable_defined? :@stance
      # if multiple ancestors merge info into 'Stance', then it may be an Array, in which case aggressive wins
      # Arrap.wrap also, helpfully converts a missing stance to ''
      stances = Array.wrap module_info['Stance']

      # if no declared stance, then default to aggressive
      if stances.empty?
        aggregate_stance = Metasploit::Model::Module::Stance::AGGRESSIVE
      # if a mix of aggressive and passive, then counts as aggressive
      elsif stances.include? Metasploit::Model::Module::Stance::AGGRESSIVE
        aggregate_stance = Metasploit::Model::Module::Stance::AGGRESSIVE
      # if not empty and no aggressive stances, then it can count as passive
      else
        aggregate_stance = Metasploit::Model::Module::Stance::PASSIVE
      end

      begin
        @stance = ActiveSupport::StringInquirer.new(aggregate_stance)
      rescue Exception => error
        @stance = Metasploit::Model::Module::Stance::AGGRESSIVE
      end
    end

    @stance
  end
end
