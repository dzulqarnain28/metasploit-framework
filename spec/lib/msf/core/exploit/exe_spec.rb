# -*- coding:binary -*-
require 'spec_helper'

require 'msf/core'
require 'msf/core/module'
require 'msf/core/exploit/exe'
require 'support/shared/contexts/msf/util/exe'

describe Msf::Exploit::EXE do
  include_context "Msf::Util::Exe"

  it "has access to shared context with Msf::Util::Exe" do
    @platform_format_map && self.respond_to?(:verify_bin_fingerprint)
  end

  subject do
    payload = Msf::Payload.new
    payload.extend described_class
    payload
  end

  it 'should be a kind of Msf::Exploit::EXE' do
    subject.should be_a_kind_of described_class
  end

  it 'can generate a 32-bit/64-bit payload exe' do
    pending "Need to figure out how to build the opts right (SeeRM #8367)"
  end

  it 'can generate a 32-bit service payload' do
    exe = subject.generate_payload_exe_service(
      :arch => [ARCH_X86],
      :code => ("\x90" * 10)
    )
    format_hash ={
      :format => "exe",
      :arch => "x86",
      :file_fp => /PE32 /
    }
    verify_bin_fingerprint(format_hash, exe)
  end

  it 'can generate a 64-bit service payload' do
    exe = subject.generate_payload_exe_service(
      :arch => [ARCH_X64],
      :code => ("\x90" * 10)
    )
    format_hash ={
      :format => "dll",
      :arch => "x64",
      :file_fp => /PE32\+ /
    }
    verify_bin_fingerprint(format_hash, exe)
  end

  it 'can generate a 32-bit DLL payload' do
    exe = subject.generate_payload_dll(
      :arch => [ARCH_X86],
      :code => ("\x90" * 10)
    )
    format_hash ={
      :format => "dll",
      :arch => "x86",
      :file_fp => /PE32 /
    }
    verify_bin_fingerprint(format_hash, exe)
  end

  it 'can generate a 64-bit DLL payload' do
    exe = subject.generate_payload_dll(
      :arch => [ARCH_X64],
      :code => ("\x90" * 10)
    )
    format_hash ={
      :format => "dll",
      :arch => "x64",
      :file_fp => /PE32\+ /
    }
    verify_bin_fingerprint(format_hash, exe)
  end

end
